#------------------------------------------------------
fit.diff.logic <- model.objective.diff(DTL)
DTL <- add.diff.obj(DTL,fit.diff.logic)
DTL <- add.diff.obj.basic(DTL)
DTL <- add.levels(DTL,fit.diff.logic)
DTL <- add.levels.groups(DTL)
print.objective.diff.model(DTL,fit.diff.logic)
plot.objective.diff.model.curves(DTL,fit.diff.logic,0)
plot.objective.diff.model.curves(DTL,fit.diff.logic,1)
plot.objective.diff.model.curves.time(DTL,fit.diff.logic)
plot.objective.diff.density(DTL)
plot.objective.diff.smooth(DTL,"all", "logical all")
plot.objective.diff.smooth(DTL,"bad", "logical bad")
plot.objective.diff.smooth(DTL,"medium", "logical medium")
plot.objective.diff.smooth(DTL,"good", "logical good")
#------------------------------------------------------
#       MERGE INTO DTALL & DTConfidenceScale
#------------------------------------------------------
DTAll <- data.table()
DTAll <- rbind(DTAll,DTL)
DTAll <- rbind(DTAll,DTM)
DTAll <- rbind(DTAll,DTS)
DTConfidenceScale <- data.table()
DTConfidenceScale <- rbind(DTConfidenceScale,DTL)
DTConfidenceScale <- rbind(DTConfidenceScale,DTM)
DTConfidenceScale <- rbind(DTConfidenceScale,DTS)
#------------------------------------------------------
#        MODELING SUBJECTIVE DIFFICULTY
#------------------------------------------------------
#adding error between subjective difficulty and objective difficulty based on BET
# DTAll$subj.diff.mise = 1 - DTAll$miseNorm;
# DTAll$error.subj.diff.mise = DTAll$subj.diff.mise - DTAll$obj.diff
# DTAll <- DTAll[,error.subj.diff.mise.mean:=mean(error.subj.diff.mise),by=IDjoueur]
# DTConfidenceScale <- DTAll[,error.subj.diff.mise.mean:=mean(error.subj.diff.mise),by=IDjoueur]
#adding error between subjective difficulty and objective difficulty based on CONFIDENCE SCALE
DTAll$subj.diff.confiance = 1 - DTAll$confianceNorm;
DTAll$error.subj.diff.confiance = DTAll$subj.diff.confiance - DTAll$obj.diff
DTAll <- DTAll[,error.subj.diff.confiance.mean:=mean(error.subj.diff.confiance),by=IDjoueur]
DTConfidenceScale <- DTAll[,error.subj.diff.confiance.mean:=mean(error.subj.diff.confiance),by=IDjoueur]
#evaluating confidence as a damped over time sum of win and fails;
#each win and fail importance based on objective difficulty at that time
id = DTAll$IDjoueur; # tmp vector faster to read
cur.confidence = 0;
cur.confidence.liss = 0;
lastID <- id[1];
est.confidence <- numeric(nrow(DTAll))
est.confidence[1] = 0;
obj.diff = DTAll$obj.diff
gagnant = DTAll$gagnant; # tmp vector faster to read
alpha <- 0.6
i = 1
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
cur.confidence.liss = 0;
}else{
if(gagnant[i-1]){
cur.confidence = obj.diff[i-1];
}else{
cur.confidence = -(1 - obj.diff[i-1]);
}
cur.confidence.liss <- alpha * cur.confidence + (1-alpha) * cur.confidence;
}
lastID <- id[i];
est.confidence[i] <- cur.confidence.liss;
}
DTAll$est.confidence = est.confidence;
DTAll$est.confidence.norm = exp(DTAll$est.confidence) / (1+exp(DTAll$est.confidence));
DTConfidenceScale$est.confidence = est.confidence;
DTConfidenceScale$est.confidence.norm = exp(DTAll$est.confidence) / (1+exp(DTAll$est.confidence));
#update DTM DTS and DTL
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
#------------------------------------------------------
#        SHOWING PLAYERS' PROFILES
#------------------------------------------------------
#OLD REPRESENTATION
# hist(unique(DTM,by="IDjoueur")$age,breaks=30,main="Age of players")
# hist(unique(DTM,by="IDjoueur")$sexe,main="Sex of players")
# hist(unique(DTM,by="IDjoueur")$play.video.games,main="Playing Video Games")
# hist(unique(DTM,by="IDjoueur")$play.board.games,main="Playing Board Games")
# hist(unique(DTM,by="IDjoueur")$self.eff,main="Self efficacy")
# hist(unique(DTM,by="IDjoueur")$risk.av,main="Risk aversion")
#âge des participants
counts <- table(unique(DTAll,by="IDjoueur")$age)
bpAge <- barplot(counts,
col = c("lightblue", "lightgreen"),
xlab="Age",
ylab="Distribution by participants",
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=0.5,pos=3)
#niveau d'étude
precounts <- unique(DTAll,by="IDjoueur")$niveauEtude
counts <- table(factor(precounts,levels=1:9))
bpEtudes <- barplot(counts, main="Certificate levels", horiz=FALSE,
names.arg=c("None", "BEPC", "BEP/CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Certificate levels",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 35),
cex.names=0.8)
text(bpEtudes, 0, round(counts, 1),cex=0.5,pos=3)
#sexe des joueurs
counts <- table(unique(DTAll,by="IDjoueur")$sexe)
bpSexe <- barplot(counts, main="Genre of players", horiz=FALSE,
names.arg=c("Male", "Female"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
col = c("lightblue", "lightgreen"),
xlab="Genre of players",
ylab="Distribution by participants",
xlim = c(0, 3),
ylim = c(0, 60),
cex.names=1)
text(bpSexe, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux vidéo
counts <- table(unique(DTAll,by="IDjoueur")$play.video.games)
bpVideoGames <- barplot(counts, main="Playing Video Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Video Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 50),
cex.names=1)
text(bpVideoGames, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux de société
counts <- table(unique(DTAll,by="IDjoueur")$play.board.games)
bpBoardGames <- barplot(counts, main="Playing Board Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Board Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 35),
cex.names=1)
text(bpBoardGames, 0, round(counts, 1),cex=0.8,pos=3)
#sentiment d'auto-efficacité
#counts <- table(unique(DTM,by="IDjoueur")$self.eff)
counts <- table(exclude = NA, unique(DTAll,by="IDjoueur")$self.eff) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 8),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
legend("topright", legend = "From 0.5 as Medium to 1 as Strong")
#aversion au risque
counts <- table(unique(DTAll,by="IDjoueur")$risk.av)
bpRiskAver <- barplot(counts, main="Risk aversion", horiz=FALSE,
#names.arg=c("Very highly risk loving", "Highly risk loving", "Risk loving", "Risk neutral", "Slightly risk averse", "Risk averse", "Very risk averse", "Highly risk averse", "stay in bed"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Risk aversion",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 20),
cex.names=0.9)
text(bpRiskAver, 0, round(counts, 1),cex=0.8,pos=3)
#------------------------------------------------------
#        INFLUENCE OF PLAYERS' PROFILES
#------------------------------------------------------
#si X est continu
test.profile <- function(Y,X,title){
test <- cor.test(Y,X, method="kendall")
DT <- data.table(x=X,y=Y)
p <- ggplot(DT,aes(x, y)) + geom_point(alpha=0.5)
print(p)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
print(test)
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
test.profile.binary <- function(A,B,title){
DTA <- data.table(gp="A",val=A)
DTB <- data.table(gp="B",val=B)
DT <- rbind(DTA,DTB)
p <- ggplot(DT,aes(gp, val)) + geom_point(alpha=0.5)
print(p)
test <- wilcox.test(B,A,conf.int=T)
print(test)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
res <- paste(res,paste("mean(A):",signif(mean(A),digit=2)))
res <- paste(res,paste("mean(B):",signif(mean(B),digit=2)))
print(paste(title,res))
}
return(res)
}
#si X est un label, comparaison entre groupes
test.profile.multigroups <- function(Y,X,title){
test <- kruskal.test(Y ~ X)
res <- paste(format.pval.stars(test$p.value))
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
#---------------------------------------------------------------------
#        INFLUENCE OF VIDEO GAME EXPERTISE ON PLAYERS' PERFORMANCE
#---------------------------------------------------------------------
pvg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.video.games,"pvg.on.level.m")
pvg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.video.games,"pvg.on.level.s")
pvg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.video.games,"pvg.on.level.l")
#----------------------------------------------------------------------
#        INFLUENCE OF BOARD GAME EXPERTISE ON PLAYERS' PERFORMANCE
#----------------------------------------------------------------------
pbg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.board.games,"pbg.on.level.m")
pbg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.board.games,"pbg.on.level.s")
pbg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.board.games,"pbg.on.level.l")
#----------------------------------------------------------------------
#        INFLUENCE OF SELF-EFFICACY ON PLAYERS' PERFORMANCE
#----------------------------------------------------------------------
self.eff.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$self.eff,"self.eff.on.level.m")
self.eff.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$self.eff,"self.eff.on.level.s")
self.eff.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$self.eff,"self.eff.on.level.l")
#----------------------------------------------------------------------
#        INFLUENCE OF RISK AVERSION ON PLAYERS' PERFORMANCE
#----------------------------------------------------------------------
risk.av.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$risk.av,"risk.av.on.level.m")
risk.av.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$risk.av,"risk.av.on.level.s")
risk.av.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$risk.av,"risk.av.on.level.l")
#----------------------------------------------------------------------
#        INFLUENCE OF AGE AND LEVEL ON PLAYERS' PERFORMANCE
#----------------------------------------------------------------------
age.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$age,"age.on.level.m")
age.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$age,"age.on.level.s")
age.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$age,"age.on.level.l")
#----------------------------------------------------------------------
#        INFLUENCE OF SEX AND LEVEL ON PLAYERS' PERFORMANCE
#----------------------------------------------------------------------
sexe.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$sexe,"sexe.on.level.m")
sexe.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$sexe,"sexe.on.level.s")
sexe.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$sexe,"sexe.on.level.l")
sexe.on.level.m.2 <- test.profile.binary(unique(DTM[sexe==0],by="IDjoueur")$niveau, unique(DTM[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.m.2")
sexe.on.level.s.2 <- test.profile.binary(unique(DTS[sexe==0],by="IDjoueur")$niveau, unique(DTS[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.s.2")
sexe.on.level.l.2 <- test.profile.binary(unique(DTL[sexe==0],by="IDjoueur")$niveau, unique(DTL[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.l.2")
#-------------------------------------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY (CONFIDENCE SCALE APPROACH)
#-------------------------------------------------------------------------------------
plot.subjective.difficulty <- function(DT,selGroup,title){
print(selGroup)
# Lien entre confiance normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,1/16)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
shapes =  numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
if(selGroup != "all")
DTLoc = DTLoc[niveau.group==selGroup]
DTLoc = DTLoc[,.(confiance.mean=mean(subj.diff.confiance)),by=IDjoueur]
subj.diff = DTLoc$confiance.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
shapes[i] = 16
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
#print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 24
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#summary
print("mean and sd of nb players per bin")
DTNbVals = data.table(nb = nb.vals, pval=test.pvals)
print(DTNbVals[!is.na(pval)])
print(signif(mean(DTNbVals[!is.na(pval)]$nb),digits=3))
print(signif(sd(DTNbVals[!is.na(pval)]$nb),digits=3))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.confiance,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med, shapes=shapes)
p = ggplot() + ggtitle(title) +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3, shape=DTPlot$shapes) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue") +
xlab("Objective Difficulty") + ylab("Subjective Difficulty") + theme(text = element_text(size=15))
print(p)
}
plot.subjective.difficulty(DTAll,"all", "All tasks, all groups")
plot.subjective.difficulty(DTAll,"good", "All tasks, good")
plot.subjective.difficulty(DTAll,"medium", "All tasks, medium")
plot.subjective.difficulty(DTAll,"bad", "All tasks, bad")
# plot.subjective.difficulty(DTConfidenceScale,"all", "All tasks, all groups")
# plot.subjective.difficulty(DTConfidenceScale,"good", "All tasks, good")
# plot.subjective.difficulty(DTConfidenceScale,"medium", "All tasks, medium")
# plot.subjective.difficulty(DTConfidenceScale,"bad", "All tasks, bad")
plot.subjective.difficulty(DTM,"all", "Motor, all")
plot.subjective.difficulty(DTM,"good", "Motor, good")
plot.subjective.difficulty(DTM,"medium", "Motor, medium")
plot.subjective.difficulty(DTM,"bad", "Motor, bad")
plot.subjective.difficulty(DTS,"all","Sensory, all")
plot.subjective.difficulty(DTS,"good","Sensory, good")
plot.subjective.difficulty(DTS,"medium","Sensory, medium")
plot.subjective.difficulty(DTS,"bad","Sensory, bad")
plot.subjective.difficulty(DTL,"all","Logical, all")
plot.subjective.difficulty(DTL,"good","Logical, good")
plot.subjective.difficulty(DTL,"medium","Logical, medium")
plot.subjective.difficulty(DTL,"bad","Logical, bad")
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.confiance)) + geom_bin2d(binwidth=c(1,0.05))
print(p)
}
plot.subj.obj.diff.with.time <- function(DT,selGroup,title){
time.quants = seq(0,30,3)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(time.quants)-1
time.bin = numeric(nb.bins)
nb.vals = numeric(nb.bins)
error.diff = numeric(nb.bins)
#
# obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
subj.diff.mean = numeric(nb.bins)
obj.diff.mean = numeric(nb.bins)
shapes =  numeric(nb.bins)
# delta.obj.subj = numeric(nb.bins)
# hist(DT$obj.diff)
for(i in 1:nb.bins){
time.bin.cur = (time.quants[i] + time.quants[i+1])/2.0
DTLoc = DT[action_de_jeu > time.quants[i] & action_de_jeu<=time.quants[i+1]]
if(selGroup != "all")
DTLoc = DTLoc[niveau.group==selGroup]
time.bin[i] = time.bin.cur
subj.diff = DTLoc$subj.diff.confiance
obj.diff = DTLoc$obj.diff
# subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
error.diff[i] = NA
subj.diff.mean[i] = NA
obj.diff.mean[i] = NA
# delta.obj.subj[i] = NA
shapes[i] = 16
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,obj.diff,conf.int=T, paired=T))
if (class(try.res) != "try-error"){
#print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 24
subj.diff.mean[i] = mean(subj.diff)
obj.diff.mean[i] = mean(obj.diff)
error.diff[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
#delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(time.bin=time.bin,subj.diff.mean=subj.diff.mean,obj.diff.mean=obj.diff.mean,error.diff=error.diff,n=nb.vals,pval=test.pvals))
#kernel smooth
# subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
# DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(time=time.bin,error.diff=error.diff, shapes=shapes)
print(DTPlot)
#
p = ggplot() + ggtitle(title) +
geom_point(aes(x=DTPlot$time,y=DTPlot$error.diff),alpha = 1, size = 3, shape=DTPlot$shapes) +
xlim(0,30)+
ylim(-0.4,0.2)+
geom_errorbar(aes(x=DTPlot$time, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 0, color="blue") +
xlab("Time") + ylab("Estimation Error") + theme(text = element_text(size=15))
print(p)
}
plot.subjective.diff.error.density(DTM)
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTM))
plot.subjective.diff.error.density(DTS)
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTS))
plot.subjective.diff.error.density(DTL)
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTL))
plot.subj.obj.diff.with.time(DTM,"all", "Motor, all groups")
plot.subj.obj.diff.with.time(DTS,"all", "Sensory, all groups")
plot.subj.obj.diff.with.time(DTL,"all", "Logical, all groups")
plot.subjective.diff.error.density(DTAll[niveau.group=="bad"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTAll[niveau.group=="bad"]))
plot.subjective.diff.error.density(DTAll[niveau.group=="medium"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTAll[niveau.group=="medium"]))
plot.subjective.diff.error.density(DTAll[niveau.group=="good"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTAll[niveau.group=="good"]))
plot.subj.obj.diff.with.time(DTAll,"bad", "All tasks, bad")
plot.subj.obj.diff.with.time(DTAll,"medium", "All tasks, medium")
plot.subj.obj.diff.with.time(DTAll,"good", "All tasks, good")
plot.subjective.diff.error.density(DTM[niveau.group=="bad"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTM[niveau.group=="bad"]))
plot.subj.obj.diff.with.time(DTM,"bad", "Motor, bad")
plot.subjective.diff.error.density(DTM[niveau.group=="medium"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTM[niveau.group=="medium"]))
plot.subj.obj.diff.with.time(DTM,"medium", "Motor, medium")
plot.subjective.diff.error.density(DTM[niveau.group=="good"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTM[niveau.group=="good"]))
plot.subj.obj.diff.with.time(DTM,"good", "Motor, good")
plot.subjective.diff.error.density(DTS[niveau.group=="bad"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTS[niveau.group=="bad"]))
plot.subj.obj.diff.with.time(DTS,"bad", "Sensory, bad")
plot.subjective.diff.error.density(DTS[niveau.group=="medium"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTS[niveau.group=="medium"]))
plot.subj.obj.diff.with.time(DTS,"medium", "Sensory, medium")
plot.subjective.diff.error.density(DTS[niveau.group=="good"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTS[niveau.group=="good"]))
plot.subj.obj.diff.with.time(DTS,"good", "Sensory, good")
plot.subjective.diff.error.density(DTL[niveau.group=="bad"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTL[niveau.group=="bad"]))
plot.subj.obj.diff.with.time(DTL,"bad", "Logical, bad")
plot.subjective.diff.error.density(DTL[niveau.group=="medium"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTL[niveau.group=="medium"]))
plot.subj.obj.diff.with.time(DTL,"medium", "Logical, medium")
plot.subjective.diff.error.density(DTL[niveau.group=="good"])
summary(glm(error.subj.diff.confiance~timeNorm + obj.diff,data = DTL[niveau.group=="good"]))
plot.subj.obj.diff.with.time(DTL,"good", "Logical, good")
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
confiance=DT$confianceNorm,
gagnant=DT$gagnant)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=confiance,colour="Confiance"))
p <- p + geom_step(aes(y=gagnant,colour="Gagnant"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Estimated Confidence"))
p <- p + geom_step(aes(y=gagnant,colour="Gagnant"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "red",
"Estimated Confidence" = "green",
"Confiance" = "blue",
"Gagnant" = "black"))
p <- p  +  ggtitle(title);
print(p)
}
#plot(p)
#abline(35.076, 2.745, col = 'red')
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM,"Motor")
summary(glm(error.subj.diff.confiance~est.confidence.norm,data = DTM))
plot.random.diff.curve.confidence(DTS,"Sensory")
summary(glm(error.subj.diff.confiance~est.confidence.norm,data = DTS))
plot.random.diff.curve.confidence(DTL,"Logical")
summary(glm(error.subj.diff.confiance~est.confidence.norm,data = DTL))
cur.confidence.liss
cur.confidence.liss
cur.confidence.liss
cur.confidence
(1-alpha) * cur.confidence
alpha * cur.confidence.liss
alpha * cur.confidence.liss + (1-alpha) * cur.confidence
gagnant
