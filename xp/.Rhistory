lastID <- DTLoc[1]$IDjoueur;
alpha <- 0.6;
for(i in 2:nrow(DTLoc)){
if(DTLoc[i]$IDjoueur != lastID){
resLisseCur = 0;
}else{
res <- DTLoc[i-1,gagnant]*2-1
resLisseCur <- alpha * resLisseCur + res;
}
lastID = DTLoc[i]$IDjoueur;
DTResLisse <- rbind(DTResLisse,cbind(DTLoc[i,],data.table(resLisse=resLisseCur)))
}
DTLoc <- DTResLisse
DTLoc$resLisseBase <- DTLoc$resLisse;
DTLoc$resLisse = exp(DTLoc$resLisseBase) / (1+exp(DTLoc$resLisseBase));
return (DTLoc)
}
removeHeadTail <- function(DTLoc,nb,bHead=TRUE){
#garder que les 20 derniers tours de chaque personne
DTLoc <- as.data.table(DTLoc)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DTLoc <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DTLoc <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DTLoc)
}
lienErreurEvalDiffResLisse <- function(DTLoc,titre="title"){
plot(x=DTLoc$resLisse, y=DTLoc$erreurdiff, main=titre, xlab="Indice de confiance lissé", ylab="Erreur d'estimation de la difficulté")
# TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbFail]
# TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbFail]
# TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbFail]
# setkey(TMP,nbFail)
# setkey(TMP2,nbFail)
# setkey(TMP3,nbFail)
# points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
# points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
# points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova res lisse");
fit <- aov(erreurdiff ~ resLisse, data=DTLoc);
if(echoModels)
print(summary(fit));
print("Regression linéaire");
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$resLisse);
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl));
return(fit);
}
lienErreurEvalDiffFailsRepetes <- function(DTLoc,fails = TRUE,titre="title"){
if(fails){
plot(x=DTLoc$nbFail, y=DTLoc$erreurdiff, main=titre, xlab="Nombre d'échecs consécutifs (nbFail)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbFail]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbFail]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbFail]
setkey(TMP,nbFail)
setkey(TMP2,nbFail)
setkey(TMP3,nbFail)
points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova")
fit <- aov(erreurdiff ~ nbFail, data=DTLoc)
if(echoModels)
print(summary(fit))
print("Regression linéaire")
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$nbFail)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl))
}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurdiff, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurdiff)) + geom_boxplot()
print("Anova")
fit <- aov(erreurdiff ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,diffSubj,diffObj,confiance,id,nbWin,nbFail,error){
#print(diffSubj);
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns,y=diffObj)) + ggtitle(id[1]);
pl <- pl + geom_point(size=1);
pl <- pl + geom_line(size=0.5,colour="#992299");
pl <- pl + geom_line(aes(x=ns,y=diffSubj),size=0.5,colour="#992222");
pl <- pl + geom_line(aes(x=ns,y=confiance),size=0.5,colour="#229922");
pl <- pl + geom_line(aes(x=ns,y=error),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else{
return(paste(pv,":("));
}
return("");
}
#---------------------------------- traitement
#Prepa plot
#attach(mtcars)
#par(mfrow=c(5,3))
#on recup les données
csv.data <- read.csv(file,header=TRUE,sep=";")
View(csv.data)
#difficulte logique
DTL <- csv.data[which(csv.data$nom_du_jeu=="Logique2"),]
DTL <- as.data.table(DTL)
DTL <- addVariables(DTL,drawLogit,titre="Jeu de déduction (difficulté logique)")
#difficulte sensorielle
DTS <- csv.data[which(csv.data$nom_du_jeu=="Sensoriel"),]
DTS <- as.data.table(DTS)
DTS <- addVariables(DTS,drawLogit,titre="Jeu de perception visuelle (difficulté sensorielle)")
View(DTL)
View(DTL)
View(DTL)
#difficulte motrice
DTM <- csv.data[which(csv.data$nom_du_jeu=="Motrice"),]
DTM <- as.data.table(DTM)
DTM$difficulty <-  (DTM$difficulty)/ abs(max(DTM$difficulty)) #normalisation difficulte
DTM <- addVariables(DTM,drawLogit,titre="Jeu d'adresse (difficulté motrice)")
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sWin=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sWin=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sWin=sum(gagnant)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sWin))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSWinM <- boxplot.stats(DTDescM$sWin)$out
outliersSWinS <- boxplot.stats(DTDescS$sWin)$out
outliersSWinL <- boxplot.stats(DTDescL$sWin)$out
idOutliersM = DTDescM[sWin %in% outliersSWinM]$IDjoueur
idOutliersS = DTDescS[sWin %in% outliersSWinS]$IDjoueur
idOutliersL = DTDescL[sWin %in% outliersSWinL]$IDjoueur
print(paste("Id out motrice sum win:",toString(idOutliersM)))
print(paste("Id out senso sum win:",toString(idOutliersS)))
print(paste("Id out logique sum win:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurdiff);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurdiff);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurdiff);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
#creation de la table totale
DT <- data.table()
if(useLogique) DT <- rbind(DT,DTL)
if(useMotrice) DT <- rbind(DT,DTM)
if(useSensorielle) DT <- rbind(DT,DTS)
#supprimer le debut ou la fin
if(removeTenFirst)
DT <- removeHeadTail(DT,10);
#lien erreur d'eval diff (exces confiance ?) et fails ou succes répétés
fit <- lienErreurEvalDiffFailsRepetes(DT,TRUE,"Tous les jeux")
pvalDTFails = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTFails);
fit <- lienErreurEvalDiffFailsRepetes(DT,FALSE,"Tous les jeux")
pvalDTWins = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTWins);
fit <- lienErreurEvalDiffResLisse(DT,"Tous les jeux")
pvalDTLisse = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLisse);
fit <- lienErreurEvalDiffFailsRepetes(DTL,TRUE,"Difficulté logique")
pvalDTLFails = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLFails);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffFailsRepetes(DTL,FALSE,"Difficulté logique")
pvalDTLWins = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLWins);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffResLisse(DTL,"Difficulté logique")
pvalDTLLisse = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLLisse);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
if(plotDiffCurves){
void <- DTL[,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurdiff);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurves == FALSE")
}
View(DT)
View(csv.data)
DT2 <- DT[ lag_mise:=c(NA,mise[1:(length(mise)-1)]) ,by("difficulty", "nom_du_jeu", "IDjoueur")]
DT2 <- DT[, lag_mise:=c(NA,mise[1:(length(mise)-1)]) ,by("difficulty", "nom_du_jeu", "IDjoueur")]
DT2 <- DT[, lag_mise:=c(NA,mise[1:(length(mise)-1)])) ,by("difficulty", "nom_du_jeu", "IDjoueur")]
DT2 <- DT[, lag_mise:=c(NA,mise[1:(length(mise)-1)]), by=c("difficulty", "nom_du_jeu", "IDjoueur")]
View(DT2)
DT2 <- DT2[, passage:=1:.N, by=c("difficulty", "nom_du_jeu", "IDjoueur")]
DT2 <- DT
DT2[, lag_mise:=c(NA,mise[1:(length(mise)-1)]), by=c("difficulty", "nom_du_jeu", "IDjoueur")]
View(DT)
DT2[, passage:=1:.N, by=c("difficulty", "nom_du_jeu", "IDjoueur")]
View(DT2)
library(reshape2)
DT2[DT2$IDjoueur=DT2$IDjoueur[1]]
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1]]
View(joueur)
View(joueur)
DT3 <- dcast(joueur, difficulty + passage ~ mise)
DT3 <- dcast(joueur, difficulty ~ passage, value.var = mise)
DT3 <- dcast(joueur, difficulty ~ passage, value.var = "mise")
View(DT3)
DT3 <- dcast(joueur,  passage ~ difficulty, value.var = "mise")
View(DT3)
View(joueur)
DT3 <- dcast(joueur,  passage ~ difficulty, value.var = "mise", , fun.aggregate=sum)
DT3 <- dcast(joueur,  passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(DT3)
joueur[joueur$difficulty==0]
joueur$passage[joueur$difficulty==0]
joueur$passage[joueur$difficulty==0.1]
DT3 <- dcast(joueur,  nom_du_jeu + passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(DT3[DT3$nom_du_jeu=="Logique2"])
View(DT3[,nom_du_jeu=="Logique2"])
View(DT3[nom_du_jeu=="Logique2"])
View(DT3[nom_du_jeu=="Logique2",])
View(DT3)
View(DT3[DT3$nom_du_jeu=="Logique2",])
View(DT2)
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] && DT2$gagnant==1]
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] && DT2$gagnant==1 ,]
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] & DT2$gagnant==1 ]
View(joueur)
DT3 <- dcast(joueur,  nom_du_jeu + passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(DT3[DT3$nom_du_jeu=="Logique2",])
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] & DT2$gagnant==0 ]
DT3 <- dcast(joueur,  nom_du_jeu + passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(DT3[DT3$nom_du_jeu=="Logique2",])
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] & DT2$gagnant==1 ]
gagant <- dcast(joueur,  nom_du_jeu + passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(gagant[gagant$nom_du_jeu=="Logique2",])
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] & DT2$gagnant==0 ]
perdant <- dcast(joueur,  nom_du_jeu + passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(perdant[perdant$nom_du_jeu=="Logique2",])
View(DT2)
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] & DT2$nbWin>=1 ]
gagant <- dcast(joueur,  nom_du_jeu + passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(gagant[gagant$nom_du_jeu=="Logique2",])
joueur <- DT2[DT2$IDjoueur==DT2$IDjoueur[1] & DT2$nbFail>=1 ]
perdant <- dcast(joueur,  nom_du_jeu + passage ~ difficulty, value.var = "mise",fun.aggregate=sum)
View(perdant[perdant$nom_du_jeu=="Logique2",])
View(DT)
model <- glm(gagnant ~ difficulty + miseNorm, data = DT, family = "binomial"(link = "logit"))
print(model)
model <- glm(gagnant ~ difficulty + mise, data = DT, family = "binomial"(link = "logit"))
print(model)
(model,drawLogit,titre="Jeu de déduction (difficulté logique)")
plot(model)
model <- glm(gagnant ~ difficulty + miseNorm, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
model <- glm(perdant ~ difficulty + miseNorm, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
model <- glm(perdant ~ difficulty + miseNorm * difficulty, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
plot(model)
model <- glm(perdant ~ difficulty + miseNorm * nbFail, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
model <- glm(perdant ~ difficulty + miseNorm * nbWin, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
model <- glm(perdant ~ evalDiff + miseNorm * nbWin, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
model <- glm(perdant ~ evalDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
print(model)
model <- glm(perdant ~ evalDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
model <- glm(perdant ~ evalDiff + mise, data = DT, family = "binomial"(link = "logit"))
print(model)
model <- glm(perdant ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
model <- glm(perdant ~ estDiff + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model)
plot(model)
summary(model)
model <- glm(perdant ~ estDiff + nbFail +miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model)
summary(model)
model <- glm(gagnant ~ estDiff + nbFail +miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
model <- glm(gagnant ~ estDiff + nbFail +miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model)
summary(model)
model <- glm(gagnant ~ estDiff + nbFail + miseNorm, data = DT, family = "binomial"(link = "logit"))
print(model)
summary(model)
model <- glm(gagnant ~ estDiff + nbWin + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model)
summary(model)
plot(model)
model <- lda(gagnant ~ estDiff + nbWin + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
library(glm2)
install.packages("glm2")
library(glm2)
model <- glm2(gagnant ~ estDiff + nbWin + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model)
summary(model)
plot(model)
model <- glmnet(gagnant ~ estDiff + nbWin + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
install.packages("glmnet")
library(glmnet)
model <- glmnet(gagnant ~ estDiff + nbWin + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
model <- glm2(gagnant ~ estDiff + nbWin + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model)
summary(model)
model2 <- glm2(gagnant ~ estDiff + resLisseBase + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model2)
summary(model2)
model2 <- glm2(gagnant ~ estDiff + resLisseBase, data = DT, family = "binomial"(link = "logit"))
print(model2)
summary(model2)
model2 <- glm2(gagnant ~ estDiff + score + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
print(model2)
summary(model2)
model2 <- glm2(gagnant ~ estDiff, data = DT, family = "binomial"(link = "logit"))
print(model2)
summary(model2)
View(DT3)
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", append = FALSE, quote = TRUE, sep = ";",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "utf8")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", append = FALSE, quote = TRUE, sep = ";",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("double"),
fileEncoding = "utf8")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", append = FALSE, quote = TRUE, sep = ";",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE,
fileEncoding = "utf8")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv",)
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE, sep = ";",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "UTF-16LE")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE, sep = ";",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = FALSE, qmethod = c("escape", "double"),
fileEncoding = "UTF-16LE")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = NA, qmethod = c("double"),
fileEncoding = "UTF-16LE")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = NA, qmethod = c("double"),
fileEncoding = "UTF-16LE",)
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = NA, qmethod = c("double"),
fileEncoding = "UTF-16LE")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE, sep = ",",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
qmethod = c("double"),
fileEncoding = "UTF-16LE")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE,
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
qmethod = c("double"),
fileEncoding = "UTF-16LE")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE,
eol = "\n", na = "NA", row.names = TRUE,
qmethod = c("double"),
fileEncoding = "UTF-16LE")
setwd("C:/Users/Thomas Constant/Source/Repos/sorcerer/xp")
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE,
eol = "\n", na = "NA", row.names = TRUE,
fileEncoding = "UTF-16LE")
View(DT2)
write.csv(DT2, file = "./log_thomas_XPFINALES_WEEK2_RMODIF.csv", quote = FALSE,
eol = "\n", na = "NA", row.names = TRUE,
fileEncoding = "CP1252")
library(glm2)
model <- glm2(gagnant ~ estDiff + resLisseBase + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
summary(model)
model <- glm2(gagnant ~ estDiff + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
summary(model)
model <- glm2(formula = gagnant ~ estDiff + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
summary(model)
install.packages("ResourceSelection")
library(ResourceSelection)
hoslem.test(DT$gagnant, fitted(model))
model2 <- glm2(gagnant ~ estDiff + nb, data = DT, family = "binomial")
model <- glm2(formula = gagnant ~ estDiff + miseNorm * estDiff, data = DT, family = "binomial")
summary(model)
model <- glm2(formula = gagnant ~ estDiff + miseNorm * nbWin, data = DT, family = "binomial"(link = "logit"))
summary(model)
print(model)
model <- glm2(formula = gagnant ~ estDiff + miseNorm * nbWin, data = DT, family = "binomial"(link = "logit"))
print(model)
summary(model)
plot(model)
model <- glm2(formula = gagnant ~ estDiff + miseNorm * nbFail, data = DT, family = "binomial"(link = "logit"))
summary(model)
anova(model)
model <- glm2(formula = gagnant ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
summary(model)
anova(model)
model <- lm(formula = gagnant ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
library(stats-package)
install.packages(stats-package)
install.packages(stats)
library(glm2)
model <- glm2(formula = gagnant ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
summary(model)
coef(model)
anova(model)
model <- glm2(formula = gagnant ~ estDiff + miseNorm * estDiff, data = DT, family = "binomial"(link = "logit"))
summary(model)
anova(model)
model <- glm2(formula = nbWin ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
model <- glm2(formula = resLisseBase ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
DT$resLisseBaseNorm <- DT$resLisseBase / 2.5;
View(DT)
DT2$resLisseBaseNorm <- DT2$resLisseBase / 2.5;
model <- glm2(formula = resLisseBase ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
DT2$resLisseBaseNorm2 <- 1 - DT2$resLisseBaseNorm
model <- glm2(formula = resLisseBase ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
model <- glm2(formula = resLisseBaseNorm2 ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
model <- glm2(formula = resLisseBaseNorm2 ~ estDiff + miseNorm, data = DT2, family = "binomial"(link = "logit"))
model <- glm2(formula = resLisseBaseNorm2 ~ estDiff + miseNorm, data = DT2, family = "binomial"(link = "logit"))
View(DT)
model <- glm2(formula = perdant ~ estDiff + miseNorm, data = DT, family = "binomial"(link = "logit"))
summary(model)
anova(model)
plot(anova(model))
plot(coef(model))
manova(model)
chisq.test(model)
model <- glm2(formula = perdant ~ miseNorm, data = DT, family = "binomial"(link = "logit"))
summary(model)
anova(model)
plot(anova(model))
model <- glm2(formula = estDiff ~ erreurDiff, data = DT, family = "binomial"(link = "logit"))
model <- glm2(formula = estDiff ~ erreurdiff, data = DT, family = "binomial"(link = "logit"))
model <- glm2(formula = estDiff ~ erreurdiff + nbWin, data = DT, family = "binomial"(link = "logit"))
model <- glm2(formula = estDiff ~ erreurdiff + nbWin, data = DT)
summary(model)
anova(model)
model <- glm2(formula = estDiff ~ erreurdiff, data = DT)
summary(model)
anova(model)
plot(model)
model <- glm2(formula = estDiff ~ erreurdiff + gagnant, data = DT)
summary(model)
anova(model)
