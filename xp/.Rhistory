DTLoc <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DTLoc <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DTLoc)
}
lienErreurEvalDiffResLisse <- function(DTLoc,titre="title"){
plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Indice de confiance lissé", ylab="Erreur d'estimation de la difficulté")
# TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbFail]
# TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbFail]
# TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbFail]
# setkey(TMP,nbFail)
# setkey(TMP2,nbFail)
# setkey(TMP3,nbFail)
# points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
# points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
# points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova res lisse");
fit <- aov(erreurDiffConfiance ~ resLisse, data=DTLoc);
if(echoModels)
print(summary(fit));
print("Regression linéaire");
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl));
return(fit);
}
lienErreurEvalDiffFailsRepetes <- function(DTLoc,fails = TRUE,titre="title"){
if(fails){
plot(x=DTLoc$nbFail, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre d'échecs consécutifs (nbFail)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbFail]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbFail]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbFail]
setkey(TMP,nbFail)
setkey(TMP2,nbFail)
setkey(TMP3,nbFail)
points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbFail, data=DTLoc)
if(echoModels)
print(summary(fit))
print("Regression linéaire")
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbFail)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl))
}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurDiffConfiance)) + geom_boxplot()
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,difficulty,diffSubj,diffObj,confiance,id,nbWin,nbFail,error,mise,title){
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns)) # + ggtitle(id[1]);
pl <- pl + geom_point(aes(y=difficulty,colour="DiffBase"),size=1);
pl <- pl + geom_line(aes(y=difficulty,colour="DiffBase"));
pl <- pl + geom_line(aes(y=diffObj,colour="DiffObj"));
pl <- pl + geom_line(aes(y=diffSubj,colour="DiffSubj"));
pl <- pl + geom_line(aes(y=confiance,colour="Confiance"));
pl <- pl + geom_line(aes(y=mise,colour="Mise"));
pl <- pl + ylim(0, 1)
pl <- pl + scale_colour_manual(
values = c("DiffBase" = "red","DiffObj" = "pink","DiffSubj" = "blue","Confiance" = "green", "Mise" = "black"))
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
pl <- pl  +  ggtitle(title);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("");
}
#---------------------------------- traitement logs jeu
#Prepa plot
#attach(mtcars)
#par(mfrow=c(5,3))
#on recup les données
csv.data <- read.csv(file,header=TRUE,sep=";")
#---------------------------------- traitement logs questionnaires
dataQ <- read.xlsx(fileQ,sheetIndex=1,header=TRUE)
#effacer ligne 81 (vide)
dataQ <- dataQ[-c(81), ]
#effacer colonne 37 (vide)
dataQ <- subset(dataQ, select = -37)
#---------------------------------- sexe des participants
#compter les occurences de chacun
CumulMasculin <- table(dataQ$sexe==0)
CumulFeminin <- table(dataQ$sexe==1)
#afficher les résultats
bpSexe <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60))
text(bpSexe, 0, round(CumulMasculin, 1),cex=1,pos=3)
#---------------------------------- niveau d'étude des participants
#compter les occurences de chacun
counts <- table(dataQ$niveauEtude)
#afficher les résultats
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
text(bpEtudes, 0, round(counts, 1),cex=1,pos=3)
#---------------------------------- profil de joueur des participants
#sélectionner uniquement les données qui nous intéressent pour construire le profil
dataProfilJoueurs <- dataQ[,c("profilJoueur1","profilJoueur2","profilJoueur3","profilJoueur4","profilJoueur5","profilJoueur6","profilJoueur7")]
#somme de l'ensemble des données profilJoueur et intégration dans tableau
dataQ$sumProfilJoueur <- rowSums(dataProfilJoueurs, na.rm=TRUE)
# détail du résultat sumProfilJoueur (7 questions sur échelle de Likert de 1 à 5)
# de 7 à 14 : non joueur
# de 15 à 21 : joueur occasionnel
# de 22 à 28 : joueur régulier
# de 29 à 35 : pgm
#moyenne de l'ensemble des données profilJoueur et intégration dans tableau
dataQ$meanProfilJoueur <- rowMeans(dataProfilJoueurs, na.rm=TRUE)
#---------------------------------- sentiment d'auto efficacité (AE) des participants comme joueurs
#sélectionner uniquement les données qui nous intéressent pour construire le sentiment d'AE
dataProfilAE <- dataQ[,c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4","autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8","autoEffJoueur9","autoEffJoueur10")]
#somme de l'ensemble des données du sentiment d'auto efficacité et intégration dans tableau
dataQ$sumProfilAE <- rowSums(dataProfilAE, na.rm=TRUE)
# détail du résultat sumProfilAE (10 questions sur échelle de Likert de 1 à 5)
# 0 : n'a pas répondu au questionnaire, ne se considère pas comme joueur (réponse à profilJoueur8)
# de 10 à 20 : sentiment AE faible
# de 21 à 30 : sentiment AE moyen
# de 31 à 40 : sentiment AE fort
# de 41 à 50 : sentiment AE très fort (à regrouper ?)
#moyenne de l'ensemble des données du sentiment d'auto efficacité et intégration dans tableau
dataQ$meanProfilAE <- rowMeans(dataProfilAE, na.rm=TRUE)
#---------------------------------- aversion au risque (RA) des participants
#sélectionner uniquement les données qui nous intéressent pour construire le sentiment d'AE
dataProfilRA <- dataQ[,c("loterie1","loterie2","loterie3","loterie4","loterie5","loterie6","loterie7","loterie8","loterie9","loterie10")]
#somme de l'ensemble des données du test d'aversion au risque et intégration dans tableau
dataQ$sumProfilRA <- rowSums(dataProfilRA, na.rm=TRUE)
# nombre de choix sûrs
# 0-1 : highly risk loving
# 2 : very risk loving
# 3 : risk loving
# 4 : risk neutral
# 5 : slightly risk averse
# 6 : risk averse
# 7 : very risk averse
# 8 : highly risk avers
# 9-10 : max choix sûr
#difficulte logique
DTL <- csv.data[which(csv.data$nom_du_jeu=="Logique2"),]
DTL <- as.data.table(DTL)
DTL <- addVariables(DTL,plotLogit,titre="Jeu de déduction (difficulté logique)")
#difficulte sensorielle
DTS <- csv.data[which(csv.data$nom_du_jeu=="Sensoriel"),]
DTS <- as.data.table(DTS)
DTS <- addVariables(DTS,plotLogit,titre="Jeu de perception visuelle (difficulté sensorielle)")
#difficulte motrice
DTM <- csv.data[which(csv.data$nom_du_jeu=="Motrice"),]
DTM <- as.data.table(DTM)
DTM$difficulty <-  (DTM$difficulty)/ abs(max(DTM$difficulty)) #normalisation difficulte
DTM <- addVariables(DTM,plotLogit,titre="Jeu d'adresse (difficulté motrice)")
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sdMise=sd(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sdMise))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSdMiseM <- boxplot.stats(DTDescM$sdMise)$out
outliersSdMiseS <- boxplot.stats(DTDescS$sdMise)$out
outliersSdMiseL <- boxplot.stats(DTDescL$sdMise)$out
idOutliersM = DTDescM[sdMise %in% outliersSdMiseM]$IDjoueur
idOutliersS = DTDescS[sdMise %in% outliersSdMiseS]$IDjoueur
idOutliersL = DTDescL[sdMise %in% outliersSdMiseL]$IDjoueur
print(paste("Id out motrice sdMise:",toString(idOutliersM)))
print(paste("Id out senso sdMise:",toString(idOutliersS)))
print(paste("Id out logique sdMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=mean(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice mMise:",toString(idOutliersM)))
print(paste("Id out senso mMise:",toString(idOutliersS)))
print(paste("Id out logique mMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=sum(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=sum(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=sum(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice sum Mise:",toString(idOutliersM)))
print(paste("Id out senso sum Mise:",toString(idOutliersS)))
print(paste("Id out logique sum Mise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sWin=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sWin=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sWin=sum(gagnant)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sWin))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSWinM <- boxplot.stats(DTDescM$sWin)$out
outliersSWinS <- boxplot.stats(DTDescS$sWin)$out
outliersSWinL <- boxplot.stats(DTDescL$sWin)$out
idOutliersM = DTDescM[sWin %in% outliersSWinM]$IDjoueur
idOutliersS = DTDescS[sWin %in% outliersSWinS]$IDjoueur
idOutliersL = DTDescL[sWin %in% outliersSWinL]$IDjoueur
print(paste("Id out motrice sum win:",toString(idOutliersM)))
print(paste("Id out senso sum win:",toString(idOutliersS)))
print(paste("Id out logique sum win:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,cumul))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$cumul)$out
outliersMMiseS <- boxplot.stats(DTDescS$cumul)$out
outliersMMiseL <- boxplot.stats(DTDescL$cumul)$out
idOutliersM = DTDescM[cumul %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[cumul %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[cumul %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
#creation de la table totale
DT <- data.table()
if(useLogique) DT <- rbind(DT,DTL)
if(useMotrice) DT <- rbind(DT,DTM)
if(useSensorielle) DT <- rbind(DT,DTS)
#supprimer le debut ou la fin
if(removeTenFirst)
DT <- removeHeadTail(DT,10);
require(lme4)
require(MuMIn)
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
install.packages("MuMIn")
require(MuMIn)
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
DTLoc <- DTS[action_de_jeu==8]
View(DTS)
DTLoc <- DTL
DTLoc <- DTL[IDjoueur != "3t1l09dyk"]
DTLoc$newErr <- DTLoc$miseNorm - DTLoc$gagnant;
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
View(DTLoc)
lm(DTLoc$erreurMise ~ DTLoc$action_de_jeu)
df <- lm(DTLoc$erreurMise ~ DTLoc$action_de_jeu)
summary(df)
plot(df)
plot(df)
DTQLoc <- dataQ
model <- lmer(DTLoc$erreurMise ~ DTLoc$action_de_jeu)
model <- lmer(DTLoc$erreurMise ~ DTLoc$action_de_jeu + (1 | IDjoueur))
model <- lmer(DTLoc$erreurMise ~ DTLoc$action_de_jeu + (1 | DTLoc$IDjoueur))
summary(model)
DTQLoc <- dataQ
model <- lm(DTLoc$erreurMise ~ DTQLoc$sexe)
View(DTQLoc)
model <- aov(DTLoc$erreurMise ~ DTQLoc$sexe)
model <- aov(DTLoc$erreurMise ~ DTQLoc$age)
total <- merge(DTLoc,DTQLoc,by="IDjoueur")
total <- merge(DTLoc,DTQLoc,by="idJoueur")
