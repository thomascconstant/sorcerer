removeOutliers = TRUE
plotDiffCurves = TRUE
plotDiffCurvesOutliers = TRUE
plotLinModels = FALSE
echoModels = TRUE
file = "./log_thomas_XPFINALES_WEEK2.txt"
#file = "./log_thomas_XPFINALES_WEEK1.txt"
#file = "./log_thomas_XPFINALES_WEEK1ANDWEEK2.txt"
#file = "./log_thomas_correct_motrice.txt"
#---------------------------------- fonctions
addVariables <- function(DTLoc,trace = FALSE,titre="noTitle"){
#echec au lieu de succes pour diff c'est mieux
DTLoc$perdant <- 1-DTLoc$gagnant;
#normalisation de la mise
DTLoc$miseNorm <- DTLoc$mise / 7;
#difficulte évaluée par le joueur
DTLoc$evalDiff <- 1 - DTLoc$miseNorm;
#On définit mise binarisée
DTLoc[,miseBin := 0][mise>=4,miseBin:=1]
mylogit <- glm(miseBin ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$estDiffPlayer =  predict(mylogit, newdata = sample, type = "response");
if(trace){
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(mylogit, newdata = sample, type = "response")
plot(DTLoc$difficulty, DTLoc$miseBin, main=titre, xlab="Difficulté hypothétique",  ylab="Difficulté estimée par le joueur",  col=rgb(0,100,0,100,maxColorValue=255))
points(data.frame(sample,newres), type="o")
}
#On ajoute une colonne de la difficulte estimee, a partir d'un
#logit de la difficulte supposée sur l'échec constaté
mylogit <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$estDiff =  predict(mylogit, newdata = sample, type = "response");
if(trace){
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(mylogit, newdata = sample, type = "response")
plot(DTLoc$difficulty, DTLoc$perdant, main=titre, xlab="Difficulté hypothétique",  ylab="Difficulté objective (estimée)",  col=rgb(0,100,0,100,maxColorValue=255))
points(data.frame(sample,newres), type="o")
}
#erreur d'estimation de la difficulte par le joueur (exces de confiance ?)
DTLoc$erreurdiff <- DTLoc$evalDiff - DTLoc$estDiff;
#nombre de fail consecutifs
DTNbFail <- DTLoc[1,]
nbFailCpt = 0;#DTLoc[1,perdant]
DTNbFail <- cbind(DTNbFail,data.table(nbFail=nbFailCpt))
lastID <- DTLoc[1]$IDjoueur;
for(i in 2:nrow(DTLoc)){
if(DTLoc[i]$IDjoueur != lastID){
nbFailCpt = 0;
}else{
if(DTLoc[i-1,gagnant] == 0){
nbFailCpt = nbFailCpt+1;
}else{
nbFailCpt = 0;
}
}
lastID = DTLoc[i]$IDjoueur;
#if(nbFailCpt > 5)
#  nbFailCpt = 5
DTNbFail <- rbind(DTNbFail,cbind(DTLoc[i,],data.table(nbFail=nbFailCpt)))
}
DTLoc <- DTNbFail
#nombre de wins consecutifs
DTNbWin <- DTLoc[1,]
nbWinCpt = 0;#DTLoc[1,gagnant]
DTNbWin <- cbind(DTNbWin,data.table(nbWin=nbWinCpt))
lastID <- DTLoc[1]$IDjoueur;
for(i in 2:nrow(DTLoc)){
if(DTLoc[i]$IDjoueur != lastID){
nbWinCpt = 0;
}else{
if(DTLoc[i-1,gagnant] == 1){
nbWinCpt = nbWinCpt+1;
}else{
nbWinCpt = 0;
}
}
lastID = DTLoc[i]$IDjoueur;
#if(nbWinCpt > 5)
#  nbWinCpt = 5
DTNbWin <- rbind(DTNbWin,cbind(DTLoc[i,],data.table(nbWin=nbWinCpt)))
}
DTLoc <- DTNbWin
#On calcule une somme lissée des echecs et succes
DTResLisse <- DTLoc[1,]
resLisseCur <- 0
DTResLisse <- cbind(DTResLisse,data.table(resLisse=resLisseCur))
lastID <- DTLoc[1]$IDjoueur;
alpha <- 0.6;
for(i in 2:nrow(DTLoc)){
if(DTLoc[i]$IDjoueur != lastID){
resLisseCur = 0;
}else{
res <- DTLoc[i-1,gagnant]*2-1
resLisseCur <- alpha * resLisseCur + res;
}
lastID = DTLoc[i]$IDjoueur;
DTResLisse <- rbind(DTResLisse,cbind(DTLoc[i,],data.table(resLisse=resLisseCur)))
}
DTLoc <- DTResLisse
DTLoc$resLisseBase <- DTLoc$resLisse;
DTLoc$resLisse = exp(DTLoc$resLisseBase) / (1+exp(DTLoc$resLisseBase));
return (DTLoc)
}
removeHeadTail <- function(DTLoc,nb,bHead=TRUE){
#garder que les 20 derniers tours de chaque personne
DTLoc <- as.data.table(DTLoc)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DTLoc <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DTLoc <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DTLoc)
}
lienErreurEvalDiffResLisse <- function(DTLoc,titre="title"){
plot(x=DTLoc$resLisse, y=DTLoc$erreurdiff, main=titre, xlab="Indice de confiance lissé", ylab="Erreur d'estimation de la difficulté")
# TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbFail]
# TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbFail]
# TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbFail]
# setkey(TMP,nbFail)
# setkey(TMP2,nbFail)
# setkey(TMP3,nbFail)
# points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
# points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
# points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova res lisse");
fit <- aov(erreurdiff ~ resLisse, data=DTLoc);
if(echoModels)
print(summary(fit));
print("Regression linéaire");
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$resLisse);
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl));
return(fit);
}
lienErreurEvalDiffFailsRepetes <- function(DTLoc,fails = TRUE,titre="title"){
if(fails){
plot(x=DTLoc$nbFail, y=DTLoc$erreurdiff, main=titre, xlab="Nombre d'échecs consécutifs (nbFail)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbFail]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbFail]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbFail]
setkey(TMP,nbFail)
setkey(TMP2,nbFail)
setkey(TMP3,nbFail)
points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova")
fit <- aov(erreurdiff ~ nbFail, data=DTLoc)
if(echoModels)
print(summary(fit))
print("Regression linéaire")
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$nbFail)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl))
}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurdiff, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurdiff)) + geom_boxplot()
print("Anova")
fit <- aov(erreurdiff ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,diffSubj,diffObj,confiance,id,nbWin,nbFail,error){
#print(diffSubj);
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns,y=diffObj)) + ggtitle(id[1]);
pl <- pl + geom_point(size=1);
pl <- pl + geom_line(size=0.5,colour="#992299");
pl <- pl + geom_line(aes(x=ns,y=diffSubj),size=0.5,colour="#992222");
pl <- pl + geom_line(aes(x=ns,y=confiance),size=0.5,colour="#229922");
pl <- pl + geom_line(aes(x=ns,y=error),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else{
return(paste(pv,":("));
}
return("");
}
#---------------------------------- traitement
#Prepa plot
#attach(mtcars)
#par(mfrow=c(5,3))
#on recup les données
csv.data <- read.csv(file,header=TRUE,sep=";")
#difficulte logique
DTL <- csv.data[which(csv.data$nom_du_jeu=="Logique2"),]
DTL <- as.data.table(DTL)
DTL <- addVariables(DTL,drawLogit,titre="Jeu de déduction (difficulté logique)")
#----------------------------------- configuration
useMotrice = TRUE
useSensorielle = TRUE
useLogique = TRUE
removeTenFirst = FALSE
removeOutliers = TRUE
plotLogit = TRUE
plotDiffCurves = FALSE
plotDiffCurvesOutliers = TRUE
plotLinModels = TRUE
echoModels = TRUE
file = "./log_thomas_XPFINALES_WEEK2.txt"
#file = "./log_thomas_correct_motrice.txt"
#file = "./log_thomas_XPFINALES_ENCOURS.txt"
#---------------------------------- fonctions
addVariables <- function(DTLoc,trace = FALSE,titre="noTitle"){
#echec au lieu de succes pour diff c'est mieux
DTLoc$perdant <- 1-DTLoc$gagnant;
#This is FAIL: si on vire les mises, le modèle est parfait
#DTLoc$mise = 0;
#normalisation de la mise
DTLoc$miseNorm <- DTLoc$mise / 7;
#difficulte évaluée par le joueur
DTLoc$evalDiff <- 1 - DTLoc$miseNorm;
#difficulte evaluee par le joueur : logit approach
DTLoc[,miseBin := 0][mise >= 4, miseBin := 1]
DTLoc[,evalDiffBin := 1][mise >= 4, evalDiffBin := 0]
mylogit <- glm(evalDiffBin ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$evalDiff =  predict(mylogit, newdata = sample, type = "response");
if(trace){
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(mylogit, newdata = sample, type = "response")
plot(DTLoc$difficulty, DTLoc$evalDiffBin, main=titre, xlab="Difficulté hypothétique",  ylab="Difficulté estimée (mise)",  col=rgb(0,100,0,100,maxColorValue=255))
points(data.frame(sample,newres), type="o")
}
#On ajoute une colonne de la difficulte estimee, a partir d'un
#logit de la difficulte supposée sur l'échec constaté
mylogit <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$estDiff =  predict(mylogit, newdata = sample, type = "response");
if(trace){
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(mylogit, newdata = sample, type = "response")
plot(DTLoc$difficulty, DTLoc$perdant, main=titre, xlab="Difficulté hypothétique",  ylab="Difficulté objective (estimée)",  col=rgb(0,100,0,100,maxColorValue=255))
points(data.frame(sample,newres), type="o")
}
#erreur d'estimation de la difficulte par le joueur (exces de confiance ?)
DTLoc$erreurDiffConfiance <- DTLoc$estDiff - DTLoc$evalDiff;
#nombre de fails
temps <- proc.time()[1];
gagnant = DTLoc$gagnant; #sous table, pour gagner du temps au lookup
id = DTLoc$IDjoueur; #sous table, pour gagner du temps au lookup
nbFailCpt = 0;
lastID <- id[1];
res <- numeric(nrow(DTLoc))
res[1] = 0;
for(i in 2:nrow(DTLoc)){
if(id[i] != lastID){
nbFailCpt = 0;
}else{
if(gagnant[i-1] == 0){
nbFailCpt = nbFailCpt+1;
}else{
nbFailCpt = 0;
}
}
lastID = id[i-1];
#if(nbFailCpt > 5)
#nbFailCpt = 5
res[i] <- nbFailCpt;
}
DTLoc$nbFail = res;
print(paste("Fails:",toString(proc.time()[1]-temps)))
temps <- proc.time()[1];
nbWinCpt = 0;
lastID <- id[1];
res <- numeric(nrow(DTLoc))
res[1] = 0;
for(i in 2:nrow(DTLoc)){
if(id[i] != lastID){
nbWinCpt = 0;
}else{
if(gagnant[i-1] == 1){
nbWinCpt = nbWinCpt+1;
}else{
nbWinCpt = 0;
}
}
lastID = id[i];
#if(nbWinCpt > 5)
# nbWinCpt = 5
res[i] <- nbWinCpt;
}
DTLoc$nbWin = res;
print(paste("Wins:",toString(proc.time()[1]-temps)))
temps <- proc.time()[1];
#On calcule une somme lissée des echecs et succes
resLisseCur = 0;
lastID <- id[1];
res <- numeric(nrow(DTLoc))
res[1] = 0;
diffObj = DTLoc$estDiff;
alpha <- 0.9;
for(i in 2:nrow(DTLoc)){
if(id[i] != lastID){
resLisseCur = 0;
}else{
#confiance <- gagnant[i-1]*2-1
if(gagnant[i-1]){
confiance = diffObj[i-1];
}else{
confiance = -(1 - diffObj[i-1]);
}
resLisseCur <- alpha * resLisseCur + confiance;
}
lastID = id[i];
res[i] = resLisseCur;
}
DTLoc$resLisseBase = res;
DTLoc$resLisse = exp(DTLoc$resLisseBase) / (1+exp(DTLoc$resLisseBase));
print(paste("Lissee:",toString(proc.time()[1]-temps)))
temps <- proc.time()[1];
return (DTLoc)
}
removeHeadTail <- function(DTLoc,nb,bHead=TRUE){
#garder que les 20 derniers tours de chaque personne
DTLoc <- as.data.table(DTLoc)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DTLoc <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DTLoc <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DTLoc)
}
lienErreurEvalDiffResLisse <- function(DTLoc,titre="title"){
plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Indice de confiance lissé", ylab="Erreur d'estimation de la difficulté")
# TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbFail]
# TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbFail]
# TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbFail]
# setkey(TMP,nbFail)
# setkey(TMP2,nbFail)
# setkey(TMP3,nbFail)
# points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
# points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
# points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova res lisse");
fit <- aov(erreurDiffConfiance ~ resLisse, data=DTLoc);
if(echoModels)
print(summary(fit));
print("Regression linéaire");
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl));
return(fit);
}
lienErreurEvalDiffFailsRepetes <- function(DTLoc,fails = TRUE,titre="title"){
if(fails){
plot(x=DTLoc$nbFail, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre d'échecs consécutifs (nbFail)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbFail]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbFail]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbFail]
setkey(TMP,nbFail)
setkey(TMP2,nbFail)
setkey(TMP3,nbFail)
points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbFail, data=DTLoc)
if(echoModels)
print(summary(fit))
print("Regression linéaire")
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbFail)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl))
}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurDiffConfiance)) + geom_boxplot()
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,diffSubj,diffObj,confiance,id,nbWin,nbFail,error,mise){
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns)) # + ggtitle(id[1]);
pl <- pl + geom_point(aes(y=diffObj,colour="DiffObj"),size=1);
pl <- pl + geom_line(aes(y=diffObj,colour="DiffObj"));
pl <- pl + geom_line(aes(y=diffSubj,colour="DiffSubj"));
pl <- pl + geom_line(aes(y=confiance,colour="Confiance"));
pl <- pl + geom_line(aes(y=mise,colour="Mise"));
pl <- pl + ylim(0, 1)
pl <- pl + scale_colour_manual(
values = c("DiffObj" = "red","DiffSubj" = "blue","Confiance" = "green", "Mise" = "black"))
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("");
}
require(matrix)
install.packages("Matrix")
library(lme4)
require(matrix)
require(Matrix)
library(Matrix)
library(lme4)
fit <- glmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc,);
DTLoc <- DTS
DTLoc$newErr <- DTLoc$miseNorm - DTLoc$gagnant;
fit <- glmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc,);
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc,);
summary(fit)
ranef(fit)
plot(fit)
length(unlist((ranef(fit))))
plot(fit)
help(likert)
help("likert")
install.packages("SparseM")
install.packages("likert")
require(likert)
require(likert)
library("xlsx")
require(xlsx)
require(data.table)
require(ggplot2)
file = "./log_questionnaire_XP_WEEK1ANDWEEK2.xlsx"
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
require(ggplot2)
library("xlsx")
require(xlsx)
require(data.table)
file = "./log_questionnaire_XP_WEEK1ANDWEEK2.xlsx"
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
file = "./log_questionnaire_XP_WEEK1ANDWEEK2.xlsx"
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
data <- read.xlsx(file,sheetIndex=1,header=TRUE,full.names=T)
setwd("C:/Users/Thomas Constant/Source/Repos/sorcerer/xp")
file = "./log_questionnaire_XP_WEEK1ANDWEEK2.xlsx"
data <- read.xlsx(file,sheetIndex=1,header=TRUE,)
View(data)
