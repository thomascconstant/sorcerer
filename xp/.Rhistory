print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DT;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
fitg <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DT;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
fitg <- glm(mise ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
fitg <- glm(mise ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>0.5, 1, 0)
fitg <- glm(mise ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>0.5, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
View(DTLoc)
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
View(DTLoc)
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
#while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
*
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
#while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
#if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$mise, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample,y=newres,col="red")
sample = data.frame(resLisse=seq(0, 1, 0.05))
points(x=sample$resLisse,y=newres,col="red")
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "normal"(link = "logit"))
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
#}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DTL;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DTS;
res <- numeric(11)
nb <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 10)]
if(nrow(DTLoc) > 20){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = fit$coefficients[2];
nb[i+1] = nrow(DTLoc);
}else{
res[i+1] = NA;
}
i=i+1
}
print(nb)
print(res)
#
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiff)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
DTLoc1 = DTL;
