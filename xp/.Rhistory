vif(fit)
library(MASS)
sresid <- studres(fit)
qqnorm(residuals(fit))
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
fit <- glm(miseBin ~ nbWin + nbFail + difficulty, data=DTLoc);
fit <- glm(miseNorm ~ lastWin + lastFail + difficulty, data=DTLoc);
confint(fit)
fit <- glm(miseNorm ~ resLisse + difficulty, data=DTLoc);
summary(fit)
dotplot(ranef(fit))
ran = as.data.table()
hist(class(ranef(fit)))
ranef(fit)
fixef(fit)
length(unlist((ranef(fit))))
plot(fit, which=1)
}
# DTLoc1 = DTL;
#
# res <- numeric(11)
# nb <- numeric(11)
# i = 0;
# while(i<=10){
#   diff=i/10;
#   print(diff)
#   DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 5)]
#   if(nrow(DTLoc) > 20){
#     plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#     fit <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
#     DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
#     fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
#     sample = data.frame(resLisse=seq(0, 1, 0.05))
#     newres = predict(fitg, newdata = sample, type = "response")
#     points(x=sample$resLisse,y=newres,col="red")
#     print(summary(fitg))
#     abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#     res[i+1] = fit$coefficients[2];
#     nb[i+1] = nrow(DTLoc);
#   }else{
#     res[i+1] = NA;
#   }
#
#   i=i+1
# }
# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
coef <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
dObj <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0);
# DTLoc[,miseBin:= -1];
# DTLoc[mise > 4,miseBin := 1];
# DTLoc[mise < 4,miseBin := 0];
# DTLoc = DTLoc[miseBin != -1];
#
if(nrow(DTLoc) > 30){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#
# fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
#
#
# fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
# sample = data.frame(resLisse=seq(0, 1, 0.05))
# newres = predict(fitg, newdata = sample, type = "response")
# points(x=sample$resLisse,y=newres,col="red")
# print(summary(fitg))
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
# res[i+1] = signif(fit$coefficients[2],digits=2);
#
# #print(unlist(summary(fit)));
# pv1[i+1] = echoPValue(unlist(summary(fitg))$coefficients7)
# pv2[i+1] = echoPValue(unlist(summary(fitg))$coefficients8)
fit <- lm(DTLoc$miseNorm ~ DTLoc$resLisse);
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
print(summary(fit))
print(qqPlot(residuals(fit)))
pv1[i+1] = echoPValue(summary(fit)$coefficients[2,4]);
pv2[i+1] = echoPValue(shapiro.test(residuals(fit))$p.value);
res[i+1] =  signif(summary(fit)$r.squared,digits=2);
coef[i+1] =  signif(summary(fit)$coefficients[2,1],digits=2)
#print(echoPValue(summary(fit)$coefficients[,4]))
#print(summary(fit)$r.squared)
print("next")
}else{
res[i+1] = NA;
pv1[i+1] = NA;
pv2[i+1] = NA;
coef[i+1] = NA;
}
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
dObj[i+1] = DTLoc$estDiff[1];
i=i+1
}
resTable = data.table(NbObservations = nb);
#  resTable[,NbObservations := nb];
resTable[,DiffObj := dObj];
resTable[,NbJoueurs := nb2];
resTable[,Coef := coef];
resTable[,R2 := res];
resTable[,pValueModele := pv1];
resTable[,normResidus := pv2];
return(resTable)
}
print("Logique")
resLog = analyseParDifficute(DTL);
print("Motrice")
resMot = analyseParDifficute(DTM);
print("Senso")
resSenso = analyseParDifficute(DTS);
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiffConfiance)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
ranef(fit)
fit <- lmer(miseNorm ~ rResLisse + difficulty + (difficulty), data=DTLoc);
fit <- lmer(gagnant ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
fit <- lmer(gagnant ~ resLisse +  (difficulty | IDjoueur), data=DTLoc);
summary(fit)
ranef(fit)
fixef(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty * (1 | IDjoueur), data=DTLoc);
summary(fit)
ranef(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
ranef(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
test <- residuals(fit);
hist(test,breaks=30)
hist(test,breaks=30)
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
test <- residuals(fit);
hist(test,breaks=30)
hist(test,breaks=30)
shapiro.test(test);
qqPlot(residuals(fit))
qqPlot(residuals(fit))
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
qqPlot(residuals(fit))
qqPlot(residuals(fit))
summary(fit)
test = lm(resLisse ~ difficulty,data=DTLoc);
DTLoc$rResLisse = residuals(test)
fit <- lmer(miseNorm ~ rResLisse + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit)
fit <- lmer(gagnant ~ resLisse +  (difficulty | IDjoueur), data=DTLoc);
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
require(MuMIn)
install.packages("MuMIn")
r.squaredGLMM(fit)
require(lme4)
require(MuMIn)
r.squaredGLMM(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
fit2 <- lmer(miseNorm ~ difficulty + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
r.squaredGLMM(fit2)*
summary(fit2)
summary(fit2)
summary(fit1)
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
fit2 <- lmer(miseNorm ~ difficulty + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
help(r.squaredGLMM)
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
fit2 <- lmer(miseNorm ~ difficulty + (difficulty | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
hist(DTLoc$resLisse)
hist(DTLoc$resLisse)
View(DTL)
fit1 <- lmer(miseNorm ~ lastWin + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
fit1 <- lmer(miseNorm ~ nbWin + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
fit1 <- lmer(erreurMise ~ nbWin + difficulty + (1 | IDjoueur), data=DTLoc);
fit2 <- lmer(erreurMise ~ difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
fit1 <- lmer(erreurMise ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
fit1 <- lmer(erreurMise ~ resLisse + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
fit1 <- lmer(miseNorm ~ resLisse + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
fit1 <- lmer(miseNorm ~ resLisse + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
getwd()
file = "./log_questionnaire_XP_WEEK1ANDWEEK2_REWRITED.xlsx"
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
library("xlsx")
require(xlsx)
require(data.table)
require(ggplot2)
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
View(data)
bp <- barplot(data$sexe,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60))
CountMasculin <- sort(data$sexe==0)
TotalMasculin <- sum(CountMasculin)
CountFeminin <- sort(data$Sexe==1)
TotalFeminin <- sum(CountFeminin)
CountFeminin <- sort(data$sexe==1)
TotalFeminin <- sum(CountFeminin)
CumulMasculin <- table(data$sexe==0)
CumulFeminin <- table(data$sexe==1)
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CumulMasculin, 1), cex=2, pos=3))
CumulMasculin <- data$sexe==0
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CumulMasculin, 1), cex=2, pos=3))
CumulMasculin <- table(data$sexe==0)
CumulFeminin <- table(data$sexe==1)
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60))
CumulSansDiplome <- table(data$niveauEtude==0)
CumulBEPC <- table(data$niveauEtude==1)
CumulBEPCAP <- table(data$niveauEtude==2)
CumulBAC <- table(data$niveauEtude==3)
CumulBAC2 <- table(data$niveauEtude==4)
CumulBAC3 <- table(data$niveauEtude==5)
CumulBAC4 <- table(data$niveauEtude==6)
CumulBAC5 <- table(data$niveauEtude==7)
CumulBAC8 <- table(data$niveauEtude==8)
bpEtudes <- barplot(CumulSansDiplome,
names.arg=c("Sans diplome", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
col = c("lightblue", "lightgreen"),
xlab="Diplomes",
ylab="Nombre de participants",
ylim = c(0, 60))
counts <- table(data$niveauEtude)
barplot(counts, main="Car Distribution", horiz=TRUE,
names.arg=c("3 Gears", "4 Gears", "5 Gears"))
barplot(counts, main="Car Distribution", horiz=FALSE,
names.arg=c("3 Gears", "4 Gears", "5 Gears"))
barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Sans diplome", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"))
barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Sans diplome", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8")
xlab="Diplomes",
ylab="Nombre de participants",
ylim = c(0, 60))
barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Sans diplome", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplomes",
ylab="Nombre de participants",
ylim = c(0, 60))
barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Sans diplome", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplomes",
ylab="Nombre de participants",
ylim = c(0, 40))
barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Sans diplome", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplomes",
ylab="Répartition selon les participants",
ylim = c(0, 30))
barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Sans diplome", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplomes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplomes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
dt <- CumulSansDiplome <- table(data$niveauEtude==0)
bpEtudes2 <- barplot(CumulSansDiplome, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes2 <- barplot(CumulSansDiplome, CumulBEPC, CumulBEPCAP, CumulBAC, CumulBAC2, CumulBAC3, CumulBAC4, CumulBAC5, CumulBAC8,
main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = FALSE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
olMeans(mp),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
colMeans(mp),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
colMeans(data$niveauEtude),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
colMeans(CumulSansDiplome),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
colMeans(counts),
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
text(bpEtudes, 0, round(counts, 1),cex=1,pos=3)
text(bpEtudes, 0, round(counts, 1),cex=0,pos=3)
text(bpEtudes, 0, round(counts, 1),cex=1,pos=4)
text(bpEtudes, 0, round(counts, 2),cex=1,pos=3)
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
text(bpEtudes, 0, round(counts, 1),cex=1,pos=3)
help(round)
help(text)
bpEtudes <- barplot(counts, main="Niveau d'études", horiz=FALSE,
names.arg=c("Aucun", "BEPC", "BEP, CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Diplômes",
ylab="Répartition selon les participants",
ylim = c(0, 35))
text(bpEtudes, 0, round(counts, 1),cex=1,pos=3)
bpSexe <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60))
text(bpSexe, 0, round(CumulMasculin, 1),cex=1,pos=3)
dataProfilJoueurs <- data.frame(data$profilJoueur1, data$profilJoueur2, data$profilJoueur3, data$profilJoueur4, data$profilJoueur5, data$profilJoueur6, data$profilJoueur7)
View(dataProfilJoueurs)
dataProfilJoueurs <- data.frame(data$idJoueur, data$profilJoueur1, data$profilJoueur2, data$profilJoueur3, data$profilJoueur4, data$profilJoueur5, data$profilJoueur6, data$profilJoueur7)
data2 <- data.frame(data$Sexe)
data.sexeMasculin = data[which(data$Sexe=="Masculin"),]
View(data.sexeMasculin)
help(count)
table(dataProfilJoueurs)
table(data)
table(data$profilJoueur1)
View(data)
table(dataProfilJoueurs)
table(data$idJoueur)
table(data$profilJoueur1===1)
table(data$profilJoueur1==1)
table(data$profilJoueur1==="1")
table(data$profilJoueur1="1")
table(data$profilJoueur1=1)
table(data$profilJoueur1)
count(data$profilJoueur1)
sum(data$profilJoueur1)
help("rle")
rle(data$profilJoueur1)
rle(dataProfilJoueurs)
dataProfilJoueurs <- data.frame(data$idJoueur, data$profilJoueur1, data$profilJoueur2, data$profilJoueur3, data$profilJoueur4, data$profilJoueur5, data$profilJoueur6, data$profilJoueur7)
rle(dataProfilJoueurs)
rle(sort(data$profilJoueur1)
rle(sort(data$profilJoueur1))
data.frame ( table ( data$profilJoueur1, data$idJoueur ) )))
data.frame ( table ( data$profilJoueur1, data$idJoueur ) )
data.frame ( table (data$idJoueur,data$profilJoueur1))
data.frame(table(dataProfilJoueurs))
setDT(data)[profilJoueur1==2, count.2:=1:.N, by=idJoueur][]
help(ave)
data$countProfilJoueurIs1 <- ave(data$profilJoueur1, data$idJoueur,  FUN = seq_along)
help(dplyr)
installed.packages("dplyr")
installed.package("dplyr")
install.packages("dplyr")
require(dplyr)
help(dplyr)
browseVignettes(package = "dplyr")
data %>% group_by(idJoueur, profilJoueur1) %>% mutate(count = n())
dataProfilJoueurs %>% group_by(idJoueur, profilJoueur1) %>% mutate(count = n())
dataProfilJoueurs <- data.frame(data$idJoueur, data$profilJoueur1, data$profilJoueur2, data$profilJoueur3, data$profilJoueur4, data$profilJoueur5, data$profilJoueur6, data$profilJoueur7)
dataProfilJoueurs %>% group_by(idJoueur, profilJoueur1) %>% mutate(count = n())
dataProfilJoueurs %>% group_by(profilJoueur1, profilJoueur2) %>% mutate(count = n())
data %>% group_by(profilJoueur1, profilJoueur2) %>% mutate(count = n())
setDT(data)[, count:=.N, by = .(idJoueur, profilJoueur1)]
setDT(data)[, count:=.N, by = .(idJoueur, profilJoueur1)]
setDT(dataProfilJoueurs)[, count:=.N, by = .(idJoueur, profilJoueur1)]
dataProfilJoueurs <- data.frame(data$idJoueur, data$profilJoueur1, data$profilJoueur2, data$profilJoueur3, data$profilJoueur4, data$profilJoueur5, data$profilJoueur6, data$profilJoueur7)
dataProfilJoueurs <- data.frame(idJoueur, data$profilJoueur1, data$profilJoueur2, data$profilJoueur3, data$profilJoueur4, data$profilJoueur5, data$profilJoueur6, data$profilJoueur7)
setDT(dataProfilJoueurs)[, count:=.N, by = .(data.idJoueur, data.profilJoueur1)]
dataProfilJoueurs
help(setDT)
test(which.max(table(profilJoueur1)))
names(which.max(table(profilJoueur1)))
names(which.max(table(data$profilJoueur1)))
names(which.max(table(dataProfilJoueurs)))
names(which.max(table(data$profilJoueur2)))
counts[which.max(data$profilJoueur2)]
table(data$profilJoueur2)
table(data$profilJoueur2, data$idJoueur)
table(data$idJoueur, data$profilJoueur2)
