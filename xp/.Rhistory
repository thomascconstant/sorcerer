}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurDiffConfiance)) + geom_boxplot()
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,difficulty,diffSubj,diffObj,confiance,id,nbWin,nbFail,error,mise,title){
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns)) # + ggtitle(id[1]);
pl <- pl + geom_point(aes(y=difficulty,colour="Difficulté du jeu"),size=1);
pl <- pl + geom_line(aes(y=difficulty,colour="Difficulté du jeu"));
pl <- pl + geom_line(aes(y=diffObj,colour="Difficulté Objective"));
pl <- pl + geom_line(aes(y=diffSubj,colour="Difficulté Subjective"));
pl <- pl + geom_line(aes(y=confiance,colour="Confiance"));
pl <- pl + geom_line(aes(y=mise,colour="Mise"));
pl <- pl + ylim(0, 1)
pl <- pl + scale_colour_manual(
values = c("Difficulté du jeu" = "red","Difficulté Objective" = "pink","Difficulté Subjective" = "blue","Confiance" = "green", "Mise" = "black"))
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
pl <- pl  +  ggtitle(title);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("");
}
#difficulte logique
DTL <- dataG[which(dataG$nom_du_jeu=="Logique2"),]
DTL <- as.data.table(DTL)
DTL <- addVariables(DTL,plotLogit,titre="Jeu de déduction (difficulté logique)")
#difficulte sensorielle
DTS <- dataG[which(dataG$nom_du_jeu=="Sensoriel"),]
DTS <- as.data.table(DTS)
DTS <- addVariables(DTS,plotLogit,titre="Jeu de perception visuelle (difficulté sensorielle)")
#difficulte motrice
DTM <- dataG[which(dataG$nom_du_jeu=="Motrice"),]
DTM <- as.data.table(DTM)
DTM$difficulty <-  (DTM$difficulty)/ abs(max(DTM$difficulty)) #normalisation difficulte
DTM <- addVariables(DTM,plotLogit,titre="Jeu d'adresse (difficulté motrice)")
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sdMise=sd(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sdMise)) +
xlab("Types de difficulté") +
ylab("Ecart type de la mise") +
ggtitle("Isoler les stratégies critiques")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSdMiseM <- boxplot.stats(DTDescM$sdMise)$out
outliersSdMiseS <- boxplot.stats(DTDescS$sdMise)$out
outliersSdMiseL <- boxplot.stats(DTDescL$sdMise)$out
idOutliersM = DTDescM[sdMise %in% outliersSdMiseM]$IDjoueur
idOutliersS = DTDescS[sdMise %in% outliersSdMiseS]$IDjoueur
idOutliersL = DTDescL[sdMise %in% outliersSdMiseL]$IDjoueur
print(paste("Id out motrice sdMise:",toString(idOutliersM)))
print(paste("Id out senso sdMise:",toString(idOutliersS)))
print(paste("Id out logique sdMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=mean(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise)) +
xlab("Types de difficulté") +
ylab("Moyenne de la mise") +
ggtitle("Isoler les stratégies critiques")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice mMise:",toString(idOutliersM)))
print(paste("Id out senso mMise:",toString(idOutliersS)))
print(paste("Id out logique mMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=sum(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=sum(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=sum(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise)) +
xlab("Types de difficulté") +
ylab("Somme des mises") +
ggtitle("Isoler les stratégies critiques")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice sum Mise:",toString(idOutliersM)))
print(paste("Id out senso sum Mise:",toString(idOutliersS)))
print(paste("Id out logique sum Mise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sWin=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sWin=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sWin=sum(gagnant)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sWin)) +
xlab("Types de difficulté") +
ylab("Cumul des succès") +
ggtitle("Isoler les joueurs critiques (succès)")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSWinM <- boxplot.stats(DTDescM$sWin)$out
outliersSWinS <- boxplot.stats(DTDescS$sWin)$out
outliersSWinL <- boxplot.stats(DTDescL$sWin)$out
idOutliersM = DTDescM[sWin %in% outliersSWinM]$IDjoueur
idOutliersS = DTDescS[sWin %in% outliersSWinS]$IDjoueur
idOutliersL = DTDescL[sWin %in% outliersSWinL]$IDjoueur
print(paste("Id out motrice sum win:",toString(idOutliersM)))
print(paste("Id out senso sum win:",toString(idOutliersS)))
print(paste("Id out logique sum win:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons)) +
xlab("Types de difficulté") +
ylab("Cumul des moutons gagnés") +
ggtitle("Isoler les bons joueurs critiques (mise)")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons)) +
xlab("Types de difficulté") +
ylab("Cumul des moutons perdus") +
ggtitle("Isoler les mauvais joueurs critiques (mise)")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,cumul)) +
xlab("Types de difficulté") +
ylab("Cumul du delta des mises") +
ggtitle("Isoler la stratégie alernance échec/succès")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$cumul)$out
outliersMMiseS <- boxplot.stats(DTDescS$cumul)$out
outliersMMiseL <- boxplot.stats(DTDescL$cumul)$out
idOutliersM = DTDescM[cumul %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[cumul %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[cumul %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
#creation de la table totale
DT <- data.table()
if(useLogique) DT <- rbind(DT,DTL)
if(useMotrice) DT <- rbind(DT,DTM)
if(useSensorielle) DT <- rbind(DT,DTS)
#supprimer le debut ou la fin
if(removeTenFirst)
DT <- removeHeadTail(DT,10);
DTLoc$perdant <- 1-DTLoc$gagnant;
DTLoc$miseNorm <- DTLoc$mise / 7;
DTLoc$evalDiff <- 1 - DTLoc$miseNorm;
DTLoc$newErr <- DTLoc$miseNorm - DTLoc$gagnant;
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
mylogit <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
DTLoc$estDiff =  predict(mylogit, newdata = sample, type = "response");
mylogit <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$estDiff =  predict(mylogit, newdata = sample, type = "response");
maxEstDiff <- max(DTLoc$estDiff)
minEstDiff <- min(DTLoc$estDiff)
lengthEstDiff <- maxEstDiff - minEstDiff
lengthEstDiff/10
maxEstDiff <- max(DTLoc$estDiff)
minEstDiff <- min(DTLoc$estDiff)
intervalEstDiff <- (maxEstDiff - minEstDiff)/10
maxEstDiffL <- max(DTLocL$estDiff)
View(DTL)
DTLocL <- DTLoc[nom_du_jeu == "Logique2"]
View(DTLocL)
maxEstDiffL <- max(DTLoc$estDiff)
minEstDiffL <- min(DTLocL$estDiff)
intervalEstDiffL <- (maxEstDiffL - minEstDiffL)/10
plot(DTLocL$evalDiff ~ minEstDiffL)
help(qplot)
ggplot(DTLocL, aes(x=factor(evalDiff), y=estDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(evalDiff), y=estDiff)) + stat_summary(fun.y="mean", geom="bar")
help("ggplot")
ggplot(DTLocL, aes(x=factor(evalDiff), y=minEstDiffL)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(evalDiff), y=minEstDiffL)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(minEstDiffL), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(minEstDiffL), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="point")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="point")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="abline")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="rect")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="step")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="step")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="jitter")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="hline")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="line")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="line")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
DTLocS <- DTLoc[nom_du_jeu == "Sensoriel"]
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
maxEstDiffS <- max(DTLocS$estDiff)
minEstDiffS <- min(DTLocS$estDiff)
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
DTLocS <- DTLoc[nom_du_jeu == "Motrice"]
DTLocM <- DTLoc[nom_du_jeu == "Motrice"]
maxEstDiffM <- max(DTLocM$estDiff)
minEstDiffM <- min(DTLocM$estDiff)
ggplot(DTLocM, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocM, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
DTLocL <- DTLoc[nom_du_jeu == "Logique2"]
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
DTLocL <- DTLoc[nom_du_jeu == "Logique2"]
DTLocS <- DTLoc[nom_du_jeu == "Sensoriel"]
DTLocM <- DTLoc[nom_du_jeu == "Motrice"]
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocM, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocM, aes(x=factor(estDiff), y=evalDiff)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff),
label=format(DTLocL$evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff),
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff),
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff),
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff, digits=2),
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff, digits=2),
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff, digits=2),
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", geom="bar")
ggplot(DTLocL,
aes(x=factor(estDiff),
y=evalDiff, digits=2),
label=format(evalDiff, digits=2)) + stat_summary(fun.y="mean", digits=2, geom="bar")
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6,
vjust = -0.5)
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6,
vjust = -0.5)
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6,
vjust = -0.5)
ggplot(DTLocS, aes(x=factor(estDiff), y=evalDiff)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6,
vjust = -0.5)
ggplot(DTLocM, aes(x=factor(estDiff), y=evalDiff)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6,
vjust = -0.5)
ggplot(DTLocL, aes(x=factor(estDiff), y=evalDiff)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(aes(label=round(..y..,2)), fun.y=mean, geom="text", size=6,
vjust = -0.5)
