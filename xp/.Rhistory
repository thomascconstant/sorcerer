bpEtudes <- barplot(counts, main="Certificate levels", horiz=FALSE,
names.arg=c("None", "BEPC", "BEP/CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Certificate levels",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 35),
cex.names=0.8)
text(bpEtudes, 0, round(counts, 1),cex=0.5,pos=3)
#sexe des joueurs
counts <- table(unique(DTAll,by="IDjoueur")$sexe)
bpSexe <- barplot(counts, main="Genre of players", horiz=FALSE,
names.arg=c("Male", "Female"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
col = c("lightblue", "lightgreen"),
xlab="Genre of players",
ylab="Distribution by participants",
xlim = c(0, 3),
ylim = c(0, 60),
cex.names=1)
text(bpSexe, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux vidéo
counts <- table(unique(DTAll,by="IDjoueur")$play.video.games)
bpVideoGames <- barplot(counts, main="Playing Video Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Video Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 50),
cex.names=1)
text(bpVideoGames, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux de société
counts <- table(unique(DTAll,by="IDjoueur")$play.board.games)
bpBoardGames <- barplot(counts, main="Playing Board Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Board Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 35),
cex.names=1)
text(bpBoardGames, 0, round(counts, 1),cex=0.8,pos=3)
#sentiment d'auto-efficacité
#counts <- table(unique(DTM,by="IDjoueur")$self.eff)
counts <- table(exclude = NA, unique(DTAll,by="IDjoueur")$self.eff) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 8),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
legend("topright", legend = "From 0.5 as Medium to 1 as Strong")
#aversion au risque
counts <- table(unique(DTAll,by="IDjoueur")$risk.av)
bpRiskAver <- barplot(counts, main="Risk aversion", horiz=FALSE,
names.arg=c("Very highly risk loving", "Highly risk loving", "Risk loving", "Risk neutral", "Slightly risk averse", "Risk averse", "Very risk averse", "Highly risk averse", "stay in bed"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Risk aversion",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 20),
cex.names=0.9)
text(bpRiskAver, 0, round(counts, 1),cex=0.8,pos=3)
#si X est continu
test.profile <- function(Y,X,title){
test <- cor.test(Y,X, method="kendall")
DT <- data.table(x=X,y=Y)
p <- ggplot(DT,aes(x, y)) + geom_point(alpha=0.5)
print(p)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
print(test)
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
test.profile.binary <- function(A,B,title){
DTA <- data.table(gp="A",val=A)
DTB <- data.table(gp="B",val=B)
DT <- rbind(DTA,DTB)
p <- ggplot(DT,aes(gp, val)) + geom_point(alpha=0.5)
print(p)
test <- wilcox.test(B,A,conf.int=T)
print(test)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
res <- paste(res,paste("mean(A):",signif(mean(A),digit=2)))
res <- paste(res,paste("mean(B):",signif(mean(B),digit=2)))
print(paste(title,res))
}
return(res)
}
#si X est un label, comparaison entre groupes
test.profile.multigroups <- function(Y,X,title){
test <- kruskal.test(Y ~ X)
res <- paste(format.pval.stars(test$p.value))
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
pvg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.video.games,"pvg.on.level.m")
pvg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.video.games,"pvg.on.level.s")
pvg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.video.games,"pvg.on.level.l")
pbg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.board.games,"pbg.on.level.m")
pbg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.board.games,"pbg.on.level.s")
pbg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.board.games,"pbg.on.level.l")
self.eff.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$self.eff,"self.eff.on.level.m")
self.eff.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$self.eff,"self.eff.on.level.s")
self.eff.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$self.eff,"self.eff.on.level.l")
risk.av.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$risk.av,"risk.av.on.level.m")
risk.av.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$risk.av,"risk.av.on.level.s")
risk.av.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$risk.av,"risk.av.on.level.l")
age.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$age,"age.on.level.m")
age.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$age,"age.on.level.s")
age.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$age,"age.on.level.l")
sexe.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$sexe,"sexe.on.level.m")
sexe.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$sexe,"sexe.on.level.s")
sexe.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$sexe,"sexe.on.level.l")
sexe.on.level.m.2 <- test.profile.binary(unique(DTM[sexe==0],by="IDjoueur")$niveau, unique(DTM[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.m.2")
sexe.on.level.s.2 <- test.profile.binary(unique(DTS[sexe==0],by="IDjoueur")$niveau, unique(DTS[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.s.2")
sexe.on.level.l.2 <- test.profile.binary(unique(DTL[sexe==0],by="IDjoueur")$niveau, unique(DTL[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.l.2")
pvg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.video.games,"pvg.on.error")
pbg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.board.games,"pbg.on.error")
niveau.group.on.error <- test.profile.multigroups(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error")
niveau.group.on.error.m <- test.profile.multigroups(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.m")
niveau.group.on.error.s <- test.profile.multigroups(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.s")
niveau.group.on.error.l <- test.profile.multigroups(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.l")
niveau.group.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error")
niveau.group.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error.m")
niveau.group.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error.s")
niveau.group.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error.l")
sexe.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error")
sexe.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.m")
sexe.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.s")
sexe.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.l")
sexe.on.error.2 <- test.profile.binary(unique(DTAll[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.2")
sexe.on.error.m.2 <- test.profile.binary(unique(DTM[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.m.2")
sexe.on.error.s.2 <- test.profile.binary(unique(DTS[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.s.2")
sexe.on.error.l.2 <- test.profile.binary(unique(DTL[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.l.2")
risk.av.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
risk.av.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
risk.av.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
risk.av.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
self.eff.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
self.eff.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
self.eff.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
self.eff.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
self.eff.subj.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$level,"self.eff.subj.on.error")
self.eff.subj.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,"self.eff.subj.on.error")
self.eff.subj.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.error")
self.eff.subj.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,unique(DTM,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.error")
self.eff.subj.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,unique(DTS,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.Oerror")
self.eff.subj.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,unique(DTL,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.error")
self.eff.subj.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.error")
self.eff.subj.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau,unique(DTM,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.error")
self.eff.subj.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau,unique(DTS,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.Oerror")
self.eff.subj.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau,unique(DTL,by=c("IDjoueur","nom_du_jeu"))$subj.diff.mise.mean,"self.eff.subj.on.error")
install.packages(c("curl", "quantreg"))
---
title: "Experiment with Random Difficulty (results based on the confidence scale)"
output:
html_document:
theme: lumen
pdf_document: default
---
```{r global.infos, echo=FALSE}
# risk aversion scores
# 0-1 : highly risk loving
#  2  : very risk loving
#  3  : risk loving
#  4  : risk neutral
#  5  : slightly risk averse
#  6  : risk averse
#  7  : very risk averse
#  8  : highly risk avers
# 9-10 : max choix sûr
# self efficacy scores
# 0 : not a player so did not answer
# de 10 à 20 : sentiment AE faible
# de 21 à 30 : sentiment AE moyen
# de 31 à 40 : sentiment AE fort
# de 41 à 50 : sentiment AE très fort
```
```{r setup, include = FALSE}
#------------------------------------------------------
#                  SETUP : PACKAGES
#------------------------------------------------------
require(xlsx)
require(plyr)
require(data.table)
require(ggplot2)
library(car)
require(lme4)
require(lmerTest)
require(Matrix)
library(usdm)
require(lattice)
require(psychometric)
require(MuMIn)
require(pyramid)
require(sjPlot)
require(arm)
library(MASS)
require(MuMIn)
require(Hmisc)
require(RColorBrewer)
#------------------------------------------------------
#              SETUP : UTILS FUNCTIONS
#------------------------------------------------------
format.pval.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("unable to format pvalue !!");
}
format.pval.only.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return("***");
}else if(pv<0.01){
return("**");
}else  if(pv<0.05){
return("*");
}else if(pv<0.1){
return(".");
}else{
return(":(");
}
return("unable to format pvalue !!");
}
format.coef <- function(coef,p.val){
return(paste(signif(coef,digits=3),format.pval.stars(p.val)))
}
remove.na.cols <- function(DT){
return(as.data.table(DT[,which(unlist(lapply(DT, function(x)!all(is.na(x))))),with=F]))
}
remove.na.rows <- function(DT){
return(as.data.table(DT[rowSums(is.na(DT)) != ncol(DT),]))
}
set.empty.to.na <- function(DT){
return(as.data.table(lapply(DT, function(x){replace(x, x=="",NA)})))
}
remove.head.tail <- function(DT,nb,bHead=TRUE){
DT <- as.data.table(DT)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DT <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DT <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DT)
}
#Plot la courbe de diff pour un joueur avec la BET
plot.diff.curve <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
#Plot la courbe de diff pour un joueur avec la CS
plot.diff.curve.cs <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
confidence=DT$confianceNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=confidence,colour="Confidence"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Confidence" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
```
```{r data.loading, echo=FALSE}
#------------------------------------------------------
#                  LOADING DATA
#------------------------------------------------------
# Data from game trace
#fileGameTrace = "./log_thomas_XPFINALES_WEEK2.txt" #résultats jeux XP CN2 avec diff DDA
fileGameTrace = "./log_jeu_XP_NOWELL.txt" #résultats jeux XP CN2 avec diff RANDOM
DTGame <- read.csv(fileGameTrace,header=TRUE,sep=";")
DTGame <- as.data.table(DTGame)
DTGame <- set.empty.to.na(DTGame)
DTGame <- remove.na.cols(DTGame)
DTGame <- remove.na.rows(DTGame)
DTAll <- DTGame #pour n'avoir que les données tirées du jeu
# Data from questionnaire
#fileQuestions = "./log_questionnaire_XP_WEEK2_REWRITED.csv" #résultats questionnaire XP CN2 avec diff DDA
fileQuestions = "./log_questionnaire_XP_NOWELL.csv" #résultats questionnaire XP CN2 avec diff RANDOM
DTQuest <- read.csv(fileQuestions,header=TRUE,sep=";")
DTQuest <- as.data.table(DTQuest)
DTQuest <- set.empty.to.na(DTQuest)
DTQuest <- remove.na.cols(DTQuest)
DTQuest <- remove.na.rows(DTQuest)
# Merging tables into one
setkey(DTGame,IDjoueur)
setkey(DTQuest,IDjoueur)
DTAll <- merge(DTGame,DTQuest, all.x=TRUE)
# Removing the first 3 training turns
DTAll <- subset(DTAll, modeTest!=1)
# Removing the first turn (where difficulty == 0)
DTAll <- subset(DTAll, action_de_jeu!=1)
```
```{r questionnaire.variables, echo=FALSE}
#------------------------------------------------------
#         ADDING VARIABLES FOR QUESTIONNAIRE
#------------------------------------------------------
# how much playing video games in general
DTAll$play.video.games = pmax(DTAll$profilJoueur2,
DTAll$profilJoueur3,
DTAll$profilJoueur4,
DTAll$profilJoueur5,
DTAll$profilJoueur6)
DTAll$play.video.games = DTAll$play.video.games / max(DTAll$play.video.games)
# how much playing board games
DTAll$play.board.games = pmax(DTAll$profilJoueur1)
DTAll$play.board.games = DTAll$play.board.games / max(DTAll$play.board.games)
# how much playing games with money
DTAll$play.money.games = pmax(DTAll$profilJoueur7)
DTAll$play.money.games = DTAll$play.money.games / max(DTAll$play.money.games)
DTAll <- DTAll[,c("profilJoueur1","profilJoueur2","profilJoueur3","profilJoueur4",
"profilJoueur5","profilJoueur6","profilJoueur7"):=NULL] #dont need them anymore
# feeling of self efficacy
cols.self.eff <- c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4",
"autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8",
"autoEffJoueur9","autoEffJoueur10")
DTAll = DTAll[, self.eff := rowSums(.SD,na.rm=TRUE), .SDcols = cols.self.eff]
DTAll$self.eff = DTAll$self.eff/10
DTAll[profilJoueur8==0,self.eff := NA] #NA tout ceux qui ne jouaient pas au jeu vidéo
DTAll <- DTAll[,c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4",
"autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8",
"autoEffJoueur9","autoEffJoueur10","profilJoueur8"):=NULL] #dont need them anymore
# risk aversion
cols.risk.av <- c("loterie1","loterie2","loterie3","loterie4","loterie5",
"loterie6","loterie7","loterie8","loterie9","loterie10")
DTAll = DTAll[, risk.av := rowSums(.SD,na.rm=TRUE), .SDcols = cols.risk.av]
DTAll$risk.av = DTAll$risk.av/10
DTAll <- DTAll[,c("loterie1","loterie2","loterie3","loterie4","loterie5",
"loterie6","loterie7","loterie8","loterie9","loterie10"):=NULL] #dont need them anymore
# Printing data from players
DTQuestLit <- subset(DTQuest, select=c("IDjoueur"))
p <- nrow(DTQuestLit[IDjoueur])
cat("Nombre de participants à l'expérimentation : ", p)
#------------------------------------------------------
#                  SETUP : PACKAGES
#------------------------------------------------------
require(xlsx)
require(plyr)
require(data.table)
require(ggplot2)
library(car)
require(lme4)
require(lmerTest)
require(Matrix)
library(usdm)
require(lattice)
require(psychometric)
require(MuMIn)
require(pyramid)
require(sjPlot)
require(arm)
library(MASS)
require(MuMIn)
require(Hmisc)
require(RColorBrewer)
#------------------------------------------------------
#              SETUP : UTILS FUNCTIONS
#------------------------------------------------------
format.pval.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("unable to format pvalue !!");
}
format.pval.only.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return("***");
}else if(pv<0.01){
return("**");
}else  if(pv<0.05){
return("*");
}else if(pv<0.1){
return(".");
}else{
return(":(");
}
return("unable to format pvalue !!");
}
format.coef <- function(coef,p.val){
return(paste(signif(coef,digits=3),format.pval.stars(p.val)))
}
remove.na.cols <- function(DT){
return(as.data.table(DT[,which(unlist(lapply(DT, function(x)!all(is.na(x))))),with=F]))
}
remove.na.rows <- function(DT){
return(as.data.table(DT[rowSums(is.na(DT)) != ncol(DT),]))
}
set.empty.to.na <- function(DT){
return(as.data.table(lapply(DT, function(x){replace(x, x=="",NA)})))
}
remove.head.tail <- function(DT,nb,bHead=TRUE){
DT <- as.data.table(DT)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DT <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DT <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DT)
}
#Plot la courbe de diff pour un joueur avec la BET
plot.diff.curve <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
#Plot la courbe de diff pour un joueur avec la CS
plot.diff.curve.cs <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
confidence=DT$confianceNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=confidence,colour="Confidence"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Confidence" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
DTQuestLit <- subset(DTQuest, select=c("IDjoueur"))
p <- nrow(DTQuestLit[IDjoueur])
p <- nrow(DTQuestLit["IDjoueur"])
cat("Nombre de participants à l'expérimentation : ", p)
View(DTQuestLit)
p <- nrow(DTQuestLit)
cat("Nombre de participants à l'expérimentation : ", p)
