# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
coef <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
dObj <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0);
# DTLoc[,miseBin:= -1];
# DTLoc[mise > 4,miseBin := 1];
# DTLoc[mise < 4,miseBin := 0];
# DTLoc = DTLoc[miseBin != -1];
#
if(nrow(DTLoc) > 30){
# plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#
# fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
#
#
# fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
# sample = data.frame(resLisse=seq(0, 1, 0.05))
# newres = predict(fitg, newdata = sample, type = "response")
# points(x=sample$resLisse,y=newres,col="red")
# print(summary(fitg))
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
# res[i+1] = signif(fit$coefficients[2],digits=2);
#
# #print(unlist(summary(fit)));
# pv1[i+1] = echoPValue(unlist(summary(fitg))$coefficients7)
# pv2[i+1] = echoPValue(unlist(summary(fitg))$coefficients8)
fit <- lm(DTLoc$miseNorm ~ DTLoc$resLisse);
print(summary(fit))
print(qqPlot(residuals(fit)))
pv1[i+1] = echoPValue(summary(fit)$coefficients[2,4]);
pv2[i+1] = echoPValue(shapiro.test(residuals(fit)));
res[i+1] =  signif(summary(fit)$r.squared,digits=2);
coef[i+1] =  signif(summary(fit)$coefficients[2,1],digits=2)
#print(echoPValue(summary(fit)$coefficients[,4]))
#print(summary(fit)$r.squared)
print("next")
}else{
res[i+1] = NA;
pv1[i+1] = NA;
pv2[i+1] = NA;
coef[i+1] = NA;
}
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
dObj[i+1] = DTLoc$estDiff[1];
i=i+1
}
resTable = data.table(NbObservations = nb);
#  resTable[,NbObservations := nb];
resTable[,DiffObj := dObj];
resTable[,NbJoueurs := nb2];
resTable[,Coef := coef];
resTable[,R2 := res];
resTable[,pValueModele := pv1];
resTable[,normResidus := pv2];
return(resTable)
}
print("Logique")
resLog = analyseParDifficute(DTL);
shapiro.test(residuals(fit))
unlist(shapiro.test(residuals(fit)))
shapiro.test(residuals(fit))$p.value
if(TEST){
DTLoc <- DTS[action_de_jeu==8]
DTLoc <- DTL
DTLoc <- DTL[IDjoueur != "3t1l09dyk"]
DTLoc$newErr <- DTLoc$miseNorm - DTLoc$gagnant;
#fit <- glm(DTLoc$newErr ~ DTLoc$resLisse + DTLoc$difficulty, family = "binomial"(link = "logit"));
fit <- glm(newErr ~ resLisse + difficulty, data=DTLoc);
fit <- glm(newErr ~  nbWin + nbFail + difficulty, data=DTLoc);
fit <- lmer(gagnant ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
#residualisation
test = lm(resLisse ~ difficulty,data=DTLoc);
summary(test)
DTLoc$rResLisse = residuals(test)
fit <- lmer(miseNorm ~ rResLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
fit <- lm(miseNorm ~ rResLisse + difficulty, data=DTLoc);
require(lme4)
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
require(languageR)
head(DTLoc)
collin.fnc(DTLoc,c(7,14))$cnumber
fit <- glm(miseNorm ~ nbWin + nbFail + difficulty, data=DTLoc);
fit <- lm(mise ~ difficulty + nbFail + nbWin,  data=DTLoc);
fit <- glm(miseBin ~ difficulty, family="binomial"(link = "logit"),  data=DTLoc);
hist(DTLoc$estDiff,breaks=30)
dummy_df <- data.frame(DTLoc$difficulty, DTLoc$resLisse, DTLoc$rResLisse)
correl_dummy_df <- round(cor(dummy_df, use = "pair"), 2)
#resumé
summary(fit)
#normality of residuals
test <- residuals(fit);
hist(test,breaks=30)
shapiro.test(test);
#homoscedasticity
ncvTest(fit)
#colinear predictors
vif(fit)
library(MASS)
sresid <- studres(fit)
qqnorm(residuals(fit))
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
fit <- glm(miseBin ~ nbWin + nbFail + difficulty, data=DTLoc);
fit <- glm(miseNorm ~ lastWin + lastFail + difficulty, data=DTLoc);
confint(fit)
fit <- glm(miseNorm ~ resLisse + difficulty, data=DTLoc);
summary(fit)
dotplot(ranef(fit))
ran = as.data.table()
hist(class(ranef(fit)))
ranef(fit)
fixef(fit)
length(unlist((ranef(fit))))
plot(fit, which=1)
}
# DTLoc1 = DTL;
#
# res <- numeric(11)
# nb <- numeric(11)
# i = 0;
# while(i<=10){
#   diff=i/10;
#   print(diff)
#   DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 5)]
#   if(nrow(DTLoc) > 20){
#     plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#     fit <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
#     DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
#     fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
#     sample = data.frame(resLisse=seq(0, 1, 0.05))
#     newres = predict(fitg, newdata = sample, type = "response")
#     points(x=sample$resLisse,y=newres,col="red")
#     print(summary(fitg))
#     abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#     res[i+1] = fit$coefficients[2];
#     nb[i+1] = nrow(DTLoc);
#   }else{
#     res[i+1] = NA;
#   }
#
#   i=i+1
# }
# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
coef <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
dObj <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0);
# DTLoc[,miseBin:= -1];
# DTLoc[mise > 4,miseBin := 1];
# DTLoc[mise < 4,miseBin := 0];
# DTLoc = DTLoc[miseBin != -1];
#
if(nrow(DTLoc) > 30){
# plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#
# fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
#
#
# fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
# sample = data.frame(resLisse=seq(0, 1, 0.05))
# newres = predict(fitg, newdata = sample, type = "response")
# points(x=sample$resLisse,y=newres,col="red")
# print(summary(fitg))
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
# res[i+1] = signif(fit$coefficients[2],digits=2);
#
# #print(unlist(summary(fit)));
# pv1[i+1] = echoPValue(unlist(summary(fitg))$coefficients7)
# pv2[i+1] = echoPValue(unlist(summary(fitg))$coefficients8)
fit <- lm(DTLoc$miseNorm ~ DTLoc$resLisse);
print(summary(fit))
print(qqPlot(residuals(fit)))
pv1[i+1] = echoPValue(summary(fit)$coefficients[2,4]);
pv2[i+1] = echoPValue(shapiro.test(residuals(fit))$p.value);
res[i+1] =  signif(summary(fit)$r.squared,digits=2);
coef[i+1] =  signif(summary(fit)$coefficients[2,1],digits=2)
#print(echoPValue(summary(fit)$coefficients[,4]))
#print(summary(fit)$r.squared)
print("next")
}else{
res[i+1] = NA;
pv1[i+1] = NA;
pv2[i+1] = NA;
coef[i+1] = NA;
}
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
dObj[i+1] = DTLoc$estDiff[1];
i=i+1
}
resTable = data.table(NbObservations = nb);
#  resTable[,NbObservations := nb];
resTable[,DiffObj := dObj];
resTable[,NbJoueurs := nb2];
resTable[,Coef := coef];
resTable[,R2 := res];
resTable[,pValueModele := pv1];
resTable[,normResidus := pv2];
return(resTable)
}
print("Logique")
resLog = analyseParDifficute(DTL);
print("Motrice")
resMot = analyseParDifficute(DTM);
print("Senso")
resSenso = analyseParDifficute(DTS);
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiffConfiance)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
if(TEST){
DTLoc <- DTS[action_de_jeu==8]
DTLoc <- DTL
DTLoc <- DTL[IDjoueur != "3t1l09dyk"]
DTLoc$newErr <- DTLoc$miseNorm - DTLoc$gagnant;
#fit <- glm(DTLoc$newErr ~ DTLoc$resLisse + DTLoc$difficulty, family = "binomial"(link = "logit"));
fit <- glm(newErr ~ resLisse + difficulty, data=DTLoc);
fit <- glm(newErr ~  nbWin + nbFail + difficulty, data=DTLoc);
fit <- lmer(gagnant ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
#residualisation
test = lm(resLisse ~ difficulty,data=DTLoc);
summary(test)
DTLoc$rResLisse = residuals(test)
fit <- lmer(miseNorm ~ rResLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
fit <- lm(miseNorm ~ rResLisse + difficulty, data=DTLoc);
require(lme4)
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
require(languageR)
head(DTLoc)
collin.fnc(DTLoc,c(7,14))$cnumber
fit <- glm(miseNorm ~ nbWin + nbFail + difficulty, data=DTLoc);
fit <- lm(mise ~ difficulty + nbFail + nbWin,  data=DTLoc);
fit <- glm(miseBin ~ difficulty, family="binomial"(link = "logit"),  data=DTLoc);
hist(DTLoc$estDiff,breaks=30)
dummy_df <- data.frame(DTLoc$difficulty, DTLoc$resLisse, DTLoc$rResLisse)
correl_dummy_df <- round(cor(dummy_df, use = "pair"), 2)
#resumé
summary(fit)
#normality of residuals
test <- residuals(fit);
hist(test,breaks=30)
shapiro.test(test);
#homoscedasticity
ncvTest(fit)
#colinear predictors
vif(fit)
library(MASS)
sresid <- studres(fit)
qqnorm(residuals(fit))
hist(sresid, freq=FALSE, main="Distribution of Studentized Residuals")
fit <- glm(miseBin ~ nbWin + nbFail + difficulty, data=DTLoc);
fit <- glm(miseNorm ~ lastWin + lastFail + difficulty, data=DTLoc);
confint(fit)
fit <- glm(miseNorm ~ resLisse + difficulty, data=DTLoc);
summary(fit)
dotplot(ranef(fit))
ran = as.data.table()
hist(class(ranef(fit)))
ranef(fit)
fixef(fit)
length(unlist((ranef(fit))))
plot(fit, which=1)
}
# DTLoc1 = DTL;
#
# res <- numeric(11)
# nb <- numeric(11)
# i = 0;
# while(i<=10){
#   diff=i/10;
#   print(diff)
#   DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 5)]
#   if(nrow(DTLoc) > 20){
#     plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#     fit <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
#     DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
#     fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
#     sample = data.frame(resLisse=seq(0, 1, 0.05))
#     newres = predict(fitg, newdata = sample, type = "response")
#     points(x=sample$resLisse,y=newres,col="red")
#     print(summary(fitg))
#     abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#     res[i+1] = fit$coefficients[2];
#     nb[i+1] = nrow(DTLoc);
#   }else{
#     res[i+1] = NA;
#   }
#
#   i=i+1
# }
# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
coef <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
dObj <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0);
# DTLoc[,miseBin:= -1];
# DTLoc[mise > 4,miseBin := 1];
# DTLoc[mise < 4,miseBin := 0];
# DTLoc = DTLoc[miseBin != -1];
#
if(nrow(DTLoc) > 30){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#
# fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
#
#
# fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
# sample = data.frame(resLisse=seq(0, 1, 0.05))
# newres = predict(fitg, newdata = sample, type = "response")
# points(x=sample$resLisse,y=newres,col="red")
# print(summary(fitg))
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
# res[i+1] = signif(fit$coefficients[2],digits=2);
#
# #print(unlist(summary(fit)));
# pv1[i+1] = echoPValue(unlist(summary(fitg))$coefficients7)
# pv2[i+1] = echoPValue(unlist(summary(fitg))$coefficients8)
fit <- lm(DTLoc$miseNorm ~ DTLoc$resLisse);
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
print(summary(fit))
print(qqPlot(residuals(fit)))
pv1[i+1] = echoPValue(summary(fit)$coefficients[2,4]);
pv2[i+1] = echoPValue(shapiro.test(residuals(fit))$p.value);
res[i+1] =  signif(summary(fit)$r.squared,digits=2);
coef[i+1] =  signif(summary(fit)$coefficients[2,1],digits=2)
#print(echoPValue(summary(fit)$coefficients[,4]))
#print(summary(fit)$r.squared)
print("next")
}else{
res[i+1] = NA;
pv1[i+1] = NA;
pv2[i+1] = NA;
coef[i+1] = NA;
}
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
dObj[i+1] = DTLoc$estDiff[1];
i=i+1
}
resTable = data.table(NbObservations = nb);
#  resTable[,NbObservations := nb];
resTable[,DiffObj := dObj];
resTable[,NbJoueurs := nb2];
resTable[,Coef := coef];
resTable[,R2 := res];
resTable[,pValueModele := pv1];
resTable[,normResidus := pv2];
return(resTable)
}
print("Logique")
resLog = analyseParDifficute(DTL);
print("Motrice")
resMot = analyseParDifficute(DTM);
print("Senso")
resSenso = analyseParDifficute(DTS);
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiffConfiance)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
ranef(fit)
fit <- lmer(miseNorm ~ rResLisse + difficulty + (difficulty), data=DTLoc);
fit <- lmer(gagnant ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
fit <- lmer(gagnant ~ resLisse +  (difficulty | IDjoueur), data=DTLoc);
summary(fit)
ranef(fit)
fixef(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty * (1 | IDjoueur), data=DTLoc);
summary(fit)
ranef(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
ranef(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
test <- residuals(fit);
hist(test,breaks=30)
hist(test,breaks=30)
fit <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
test <- residuals(fit);
hist(test,breaks=30)
hist(test,breaks=30)
shapiro.test(test);
qqPlot(residuals(fit))
qqPlot(residuals(fit))
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
qqPlot(residuals(fit))
qqPlot(residuals(fit))
summary(fit)
test = lm(resLisse ~ difficulty,data=DTLoc);
DTLoc$rResLisse = residuals(test)
fit <- lmer(miseNorm ~ rResLisse + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit)
fit <- lmer(gagnant ~ resLisse +  (difficulty | IDjoueur), data=DTLoc);
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
require(MuMIn)
install.packages("MuMIn")
r.squaredGLMM(fit)
require(lme4)
require(MuMIn)
r.squaredGLMM(fit)
fit <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
fit2 <- lmer(miseNorm ~ difficulty + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
r.squaredGLMM(fit2)*
summary(fit2)
summary(fit2)
summary(fit1)
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
fit2 <- lmer(miseNorm ~ difficulty + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
help(r.squaredGLMM)
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
fit1 <- lmer(miseNorm ~ resLisse + difficulty + (difficulty | IDjoueur), data=DTLoc);
fit2 <- lmer(miseNorm ~ difficulty + (difficulty | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
r.squaredGLMM(fit2)
hist(DTLoc$resLisse)
hist(DTLoc$resLisse)
View(DTL)
fit1 <- lmer(miseNorm ~ lastWin + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
fit1 <- lmer(miseNorm ~ nbWin + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
fit1 <- lmer(erreurMise ~ nbWin + difficulty + (1 | IDjoueur), data=DTLoc);
fit2 <- lmer(erreurMise ~ difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
fit1 <- lmer(erreurMise ~ resLisse + difficulty + (1 | IDjoueur), data=DTLoc);
summary(fit1)
fit1 <- lmer(erreurMise ~ resLisse + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
fit1 <- lmer(miseNorm ~ resLisse + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
fit1 <- lmer(miseNorm ~ resLisse + (1 | IDjoueur), data=DTLoc);
r.squaredGLMM(fit1)
