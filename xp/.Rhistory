return(paste(pv,"*"));
}else{
return(paste(pv,":("));
}
return("");
}
# DTLoc1 = DTL;
#
# res <- numeric(11)
# nb <- numeric(11)
# i = 0;
# while(i<=10){
#   diff=i/10;
#   print(diff)
#   DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 5)]
#   if(nrow(DTLoc) > 20){
#     plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#     fit <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
#     DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
#     fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
#     sample = data.frame(resLisse=seq(0, 1, 0.05))
#     newres = predict(fitg, newdata = sample, type = "response")
#     points(x=sample$resLisse,y=newres,col="red")
#     print(summary(fitg))
#     abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#     res[i+1] = fit$coefficients[2];
#     nb[i+1] = nrow(DTLoc);
#   }else{
#     res[i+1] = NA;
#   }
#
#   i=i+1
# }
# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
if(nrow(DTLoc) > 30){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = signif(fit$coefficients[2],digits=2);
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
print(unlist(summary(fit)));
#pv1[i+1] = unlist(summary(fit))$coefficient7
#pv2[i+1] = unlist(summary(fit))$coefficient8
}else{
res[i+1] = NA;
}
i=i+1
}
resTable = data.table(NbObservations := nb);
#  resTable[,NbObservations := nb];
resTable[,NbJoueurs := nb2];
resTable[,Coeffs := nb3];
resTable[,Interecept := pv1];
resTable[,resLisse := pv2];
print(resTable)
}
print("Tous")
analyseParDifficute(DT);
# DTLoc1 = DTL;
#
# res <- numeric(11)
# nb <- numeric(11)
# i = 0;
# while(i<=10){
#   diff=i/10;
#   print(diff)
#   DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 5)]
#   if(nrow(DTLoc) > 20){
#     plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#     fit <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
#     DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
#     fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
#     sample = data.frame(resLisse=seq(0, 1, 0.05))
#     newres = predict(fitg, newdata = sample, type = "response")
#     points(x=sample$resLisse,y=newres,col="red")
#     print(summary(fitg))
#     abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#     res[i+1] = fit$coefficients[2];
#     nb[i+1] = nrow(DTLoc);
#   }else{
#     res[i+1] = NA;
#   }
#
#   i=i+1
# }
# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
if(nrow(DTLoc) > 30){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = signif(fit$coefficients[2],digits=2);
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
print(unlist(summary(fit)));
#pv1[i+1] = unlist(summary(fit))$coefficient7
#pv2[i+1] = unlist(summary(fit))$coefficient8
}else{
res[i+1] = NA;
}
i=i+1
}
resTable = data.table(NbObservations = nb);
#  resTable[,NbObservations := nb];
resTable[,NbJoueurs := nb2];
resTable[,Coeffs := nb3];
resTable[,Interecept := pv1];
resTable[,resLisse := pv2];
print(resTable)
}
print("Tous")
analyseParDifficute(DT);
View(DT)
View(DTL)
#----------------------------------- configuration
useMotrice = TRUE
useSensorielle = TRUE
useLogique = TRUE
removeTenFirst = FALSE
removeOutliers = TRUE
plotLogit = TRUE
plotDiffCurves = FALSE
plotDiffCurvesOutliers = TRUE
plotLinModels = TRUE
echoModels = TRUE
file = "./log_thomas_XPFINALES_WEEK2.txt"
#file = "./log_thomas_correct_motrice.txt"
#file = "./log_thomas_XPFINALES_ENCOURS.txt"
#---------------------------------- fonctions
addVariables <- function(DTLoc,trace = FALSE,titre="noTitle"){
#echec au lieu de succes pour diff c'est mieux
DTLoc$perdant <- 1-DTLoc$gagnant;
#This is FAIL: si on vire les mises, le modèle est parfait
#DTLoc$mise = 0;
#normalisation de la mise
DTLoc$miseNorm <- DTLoc$mise / 7;
#difficulte évaluée par le joueur
DTLoc$evalDiff <- 1 - DTLoc$miseNorm;
#difficulte evaluee par le joueur : logit approach
DTLoc[,miseBin := 0][mise >= 4, miseBin := 1]
DTLoc[,evalDiffBin := 1][mise >= 4, evalDiffBin := 0]
mylogit <- glm(evalDiffBin ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$evalDiff =  predict(mylogit, newdata = sample, type = "response");
if(trace){
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(mylogit, newdata = sample, type = "response")
plot(DTLoc$difficulty, DTLoc$evalDiffBin, main=titre, xlab="Difficulté hypothétique",  ylab="Difficulté estimée (mise)",  col=rgb(0,100,0,100,maxColorValue=255))
points(data.frame(sample,newres), type="o")
}
#On ajoute une colonne de la difficulte estimee, a partir d'un
#logit de la difficulte supposée sur l'échec constaté
mylogit <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$estDiff =  predict(mylogit, newdata = sample, type = "response");
if(trace){
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(mylogit, newdata = sample, type = "response")
plot(DTLoc$difficulty, DTLoc$perdant, main=titre, xlab="Difficulté hypothétique",  ylab="Difficulté objective (estimée)",  col=rgb(0,100,0,100,maxColorValue=255))
points(data.frame(sample,newres), type="o")
}
#erreur d'estimation de la difficulte par le joueur (exces de confiance ?)
DTLoc$erreurDiffConfiance <- DTLoc$estDiff - DTLoc$evalDiff;
#nombre de fails
temps <- proc.time()[1];
gagnant = DTLoc$gagnant; #sous table, pour gagner du temps au lookup
id = DTLoc$IDjoueur; #sous table, pour gagner du temps au lookup
nbFailCpt = 0;
lastID <- id[1];
res <- numeric(nrow(DTLoc))
res[1] = 0;
for(i in 2:nrow(DTLoc)){
if(id[i] != lastID){
nbFailCpt = 0;
}else{
if(gagnant[i-1] == 0){
nbFailCpt = nbFailCpt+1;
}else{
nbFailCpt = 0;
}
}
lastID = id[i-1];
#if(nbFailCpt > 5)
#nbFailCpt = 5
res[i] <- nbFailCpt;
}
DTLoc$nbFail = res;
print(paste("Fails:",toString(proc.time()[1]-temps)))
temps <- proc.time()[1];
nbWinCpt = 0;
lastID <- id[1];
res <- numeric(nrow(DTLoc))
res[1] = 0;
for(i in 2:nrow(DTLoc)){
if(id[i] != lastID){
nbWinCpt = 0;
}else{
if(gagnant[i-1] == 1){
nbWinCpt = nbWinCpt+1;
}else{
nbWinCpt = 0;
}
}
lastID = id[i];
#if(nbWinCpt > 5)
# nbWinCpt = 5
res[i] <- nbWinCpt;
}
DTLoc$nbWin = res;
print(paste("Wins:",toString(proc.time()[1]-temps)))
temps <- proc.time()[1];
#On calcule une somme lissée des echecs et succes
resLisseCur = 0;
lastID <- id[1];
res <- numeric(nrow(DTLoc))
res[1] = 0;
diffObj = DTLoc$estDiff;
alpha <- 0.9;
for(i in 2:nrow(DTLoc)){
if(id[i] != lastID){
resLisseCur = 0;
}else{
#confiance <- gagnant[i-1]*2-1
if(gagnant[i-1]){
confiance = diffObj[i-1];
}else{
confiance = -(1 - diffObj[i-1]);
}
resLisseCur <- alpha * resLisseCur + confiance;
}
lastID = id[i];
res[i] = resLisseCur;
}
DTLoc$resLisseBase = res;
DTLoc$resLisse = exp(DTLoc$resLisseBase) / (1+exp(DTLoc$resLisseBase));
print(paste("Lissee:",toString(proc.time()[1]-temps)))
temps <- proc.time()[1];
return (DTLoc)
}
removeHeadTail <- function(DTLoc,nb,bHead=TRUE){
#garder que les 20 derniers tours de chaque personne
DTLoc <- as.data.table(DTLoc)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DTLoc <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DTLoc <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DTLoc)
}
lienErreurEvalDiffResLisse <- function(DTLoc,titre="title"){
plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Indice de confiance lissé", ylab="Erreur d'estimation de la difficulté")
# TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbFail]
# TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbFail]
# TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbFail]
# setkey(TMP,nbFail)
# setkey(TMP2,nbFail)
# setkey(TMP3,nbFail)
# points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
# points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
# points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova res lisse");
fit <- aov(erreurDiffConfiance ~ resLisse, data=DTLoc);
if(echoModels)
print(summary(fit));
print("Regression linéaire");
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl));
return(fit);
}
lienErreurEvalDiffFailsRepetes <- function(DTLoc,fails = TRUE,titre="title"){
if(fails){
plot(x=DTLoc$nbFail, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre d'échecs consécutifs (nbFail)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbFail]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbFail]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbFail]
setkey(TMP,nbFail)
setkey(TMP2,nbFail)
setkey(TMP3,nbFail)
points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbFail, data=DTLoc)
if(echoModels)
print(summary(fit))
print("Regression linéaire")
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbFail)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl))
}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurDiffConfiance)) + geom_boxplot()
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,diffSubj,diffObj,confiance,id,nbWin,nbFail,error,mise){
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns)) # + ggtitle(id[1]);
pl <- pl + geom_point(aes(y=diffObj,colour="DiffObj"),size=1);
pl <- pl + geom_line(aes(y=diffObj,colour="DiffObj"));
pl <- pl + geom_line(aes(y=diffSubj,colour="DiffSubj"));
pl <- pl + geom_line(aes(y=confiance,colour="Confiance"));
pl <- pl + geom_line(aes(y=mise,colour="Mise"));
pl <- pl + ylim(0, 1)
pl <- pl + scale_colour_manual(
values = c("DiffObj" = "red","DiffSubj" = "blue","Confiance" = "green", "Mise" = "black"))
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else{
return(paste(pv,":("));
}
return("");
}
DTL[,nombre=nrow(IDjoueur),by=IDjoueur]
DTL[,nombre=nrow(IDjoueur),by=IDjoueur]
test = DTL[,nombre=nrow(IDjoueur),by=IDjoueur]
test <- DTL[,nombre=nrow(IDjoueur),by=IDjoueur]
test <- DTL[,.(nombre=nrow(IDjoueur)),by=IDjoueur]
test <- DTL[,.(nombre=mean(IDjoueur)),by=IDjoueur]
test <- DTL[,.(nombre=mean(IDjoueur)),by=IDjoueur]
test <- DTL[,.(nombre=mean(IDjoueur)),by=IDjoueur]
test <- DTL[,.(fuck=mean(IDjoueur)),by=IDjoueur]
test <- DTL[,.(fuck:=mean(IDjoueur)),by=IDjoueur]
test <- DTL[,.(fuck:=max(IDjoueur)),by=IDjoueur]
test <- DT[,.(fuck:=max(IDjoueur)),by=IDjoueur]
DTL = as.data.table(DTL)
test <- DTL[,.(fuck:=max(IDjoueur)),by=IDjoueur]
View(DTL)
View(test)
test <- DTL[,.(fuck:=max(mise)),by=IDjoueur]
test <- DTL[,.(fuck=max(mise)),by=IDjoueur]
View(test)
test <- DTL[,.(fuck=nrow(.DT),by=IDjoueur]
test <- DTL[,.(fuck=nrow(.SD),by=IDjoueur]
test <- DTL[,.(fuck=nrow(.SD),by=IDjoueur]
DTL = as.data.table(DTL)
test <- DTL[,.(fuck=nrow(.SD)),by=IDjoueur]
View(test)
# DTLoc1 = DTL;
#
# res <- numeric(11)
# nb <- numeric(11)
# i = 0;
# while(i<=10){
#   diff=i/10;
#   print(diff)
#   DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 5)]
#   if(nrow(DTLoc) > 20){
#     plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#     fit <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
#     DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
#     fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
#     sample = data.frame(resLisse=seq(0, 1, 0.05))
#     newres = predict(fitg, newdata = sample, type = "response")
#     points(x=sample$resLisse,y=newres,col="red")
#     print(summary(fitg))
#     abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#     res[i+1] = fit$coefficients[2];
#     nb[i+1] = nrow(DTLoc);
#   }else{
#     res[i+1] = NA;
#   }
#
#   i=i+1
# }
# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
if(nrow(DTLoc) > 30){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = signif(fit$coefficients[2],digits=2);
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
#print(unlist(summary(fit)));
pv1[i+1] = echoPValue(unlist(summary(fit))$coefficients7)
pv2[i+1] = echoPValue(unlist(summary(fit))$coefficients8)
}else{
res[i+1] = NA;
}
i=i+1
}
resTable = data.table(NbObservations = nb);
#  resTable[,NbObservations := nb];
resTable[,NbJoueurs := nb2];
resTable[,Coeffs := res];
resTable[,Interecept := pv1];
resTable[,resLisse := pv2];
return(resTable)
}
print("Logique")
resLog = analyseParDifficute(DTL);
print("Motrice")
resMot = analyseParDifficute(DTM);
print("Senso")
resSenso = analyseParDifficute(DTS);
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiffConfiance)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
