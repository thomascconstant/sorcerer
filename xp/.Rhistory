fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbFail)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl))
}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurDiffConfiance, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurDiffConfiance)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurDiffConfiance)+2*sd(erreurDiffConfiance)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurDiffConfiance)-2*sd(erreurDiffConfiance)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurDiffConfiance)) + geom_boxplot()
print("Anova")
fit <- aov(erreurDiffConfiance ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,difficulty,diffSubj,diffObj,confiance,id,nbWin,nbFail,error,mise,title){
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns)) # + ggtitle(id[1]);
pl <- pl + geom_point(aes(y=difficulty,colour="DiffBase"),size=1);
pl <- pl + geom_line(aes(y=difficulty,colour="DiffBase"));
pl <- pl + geom_line(aes(y=diffObj,colour="DiffObj"));
pl <- pl + geom_line(aes(y=diffSubj,colour="DiffSubj"));
pl <- pl + geom_line(aes(y=confiance,colour="Confiance"));
pl <- pl + geom_line(aes(y=mise,colour="Mise"));
pl <- pl + ylim(0, 1)
pl <- pl + scale_colour_manual(
values = c("DiffBase" = "red","DiffObj" = "pink","DiffSubj" = "blue","Confiance" = "green", "Mise" = "black"))
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
pl <- pl  +  ggtitle(title);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("");
}
#difficulte logique
DTL <- dataG[which(dataG$nom_du_jeu=="Logique2"),]
DTL <- as.data.table(DTL)
DTL <- addVariables(DTL,plotLogit,titre="Jeu de déduction (difficulté logique)")
#difficulte sensorielle
DTS <- dataG[which(dataG$nom_du_jeu=="Sensoriel"),]
DTS <- as.data.table(DTS)
DTS <- addVariables(DTS,plotLogit,titre="Jeu de perception visuelle (difficulté sensorielle)")
#difficulte motrice
DTM <- dataG[which(dataG$nom_du_jeu=="Motrice"),]
DTM <- as.data.table(DTM)
DTM$difficulty <-  (DTM$difficulty)/ abs(max(DTM$difficulty)) #normalisation difficulte
DTM <- addVariables(DTM,plotLogit,titre="Jeu d'adresse (difficulté motrice)")
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sdMise=sd(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sdMise))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSdMiseM <- boxplot.stats(DTDescM$sdMise)$out
outliersSdMiseS <- boxplot.stats(DTDescS$sdMise)$out
outliersSdMiseL <- boxplot.stats(DTDescL$sdMise)$out
idOutliersM = DTDescM[sdMise %in% outliersSdMiseM]$IDjoueur
idOutliersS = DTDescS[sdMise %in% outliersSdMiseS]$IDjoueur
idOutliersL = DTDescL[sdMise %in% outliersSdMiseL]$IDjoueur
print(paste("Id out motrice sdMise:",toString(idOutliersM)))
print(paste("Id out senso sdMise:",toString(idOutliersS)))
print(paste("Id out logique sdMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=mean(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice mMise:",toString(idOutliersM)))
print(paste("Id out senso mMise:",toString(idOutliersS)))
print(paste("Id out logique mMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=sum(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=sum(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=sum(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice sum Mise:",toString(idOutliersM)))
print(paste("Id out senso sum Mise:",toString(idOutliersS)))
print(paste("Id out logique sum Mise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sWin=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sWin=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sWin=sum(gagnant)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sWin))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSWinM <- boxplot.stats(DTDescM$sWin)$out
outliersSWinS <- boxplot.stats(DTDescS$sWin)$out
outliersSWinL <- boxplot.stats(DTDescL$sWin)$out
idOutliersM = DTDescM[sWin %in% outliersSWinM]$IDjoueur
idOutliersS = DTDescS[sWin %in% outliersSWinS]$IDjoueur
idOutliersL = DTDescL[sWin %in% outliersSWinL]$IDjoueur
print(paste("Id out motrice sum win:",toString(idOutliersM)))
print(paste("Id out senso sum win:",toString(idOutliersS)))
print(paste("Id out logique sum win:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,cumul))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$cumul)$out
outliersMMiseS <- boxplot.stats(DTDescS$cumul)$out
outliersMMiseL <- boxplot.stats(DTDescL$cumul)$out
idOutliersM = DTDescM[cumul %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[cumul %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[cumul %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
#creation de la table totale
DT <- data.table()
if(useLogique) DT <- rbind(DT,DTL)
if(useMotrice) DT <- rbind(DT,DTM)
if(useSensorielle) DT <- rbind(DT,DTS)
#supprimer le debut ou la fin
if(removeTenFirst)
DT <- removeHeadTail(DT,10);
DTLoc$newErr <- DTLoc$miseNorm - DTLoc$gagnant;
DTLoc$perdant <- 1-DTLoc$gagnant;
DTLoc$miseNorm <- DTLoc$mise / 7;
DTLoc$evalDiff <- 1 - DTLoc$miseNorm;
DTLoc[,miseBin := 0][mise >= 4, miseBin := 1]
DTLoc[,evalDiffBin := 1][mise >= 4, evalDiffBin := 0]
DTLoc$newErr <- DTLoc$miseNorm - DTLoc$gagnant;
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
model <- lmer(DTLoc$erreurMise ~ DTLoc$action_de_jeu + (1 | DTLoc$IDjoueur))
summary(model) #nope
model <- lmer(DTLoc$erreurMise ~ DTLoc$meanProfilJoueur + (1 | DTLoc$IDjoueur))
summary(model)
DTLocGamer <- DTLoc$meanProfilJoueur>3
DTLocGamer
DTLocGamer <- DTLoc[meanProfilJoueur>3]
View(DTLocGamer)
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$meanProfilJoueur + (1 | DTLocGamer$IDjoueur))
summary(model)
DTLocNoGamer <- DTLoc[meanProfilJoueur<3]
model <- lmer(DTLocNoGamer$erreurMise ~ DTLocNoGamer$meanProfilJoueur + (1 | DTLocNoGamer$IDjoueur))
summary(model)
DTLocGamer <- DTLoc[meanProfilJoueur=>3]
DTLocGamer <- DTLoc[meanProfilJoueur>=3]
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$meanProfilJoueur + (1 | DTLocGamer$IDjoueur))
summary(model)
DTLocNoGamer <- DTLoc[meanProfilJoueur<3]
model <- lmer(DTLocNoGamer$erreurMise ~ DTLocNoGamer$meanProfilJoueur + (1 | DTLocNoGamer$IDjoueur))
summary(model)
DTLocRisk <- DTLoc[sumProfilRA>=6]
model <- lmer(DTLocRisk$erreurMise ~ DTLocRisk$meanProfilJoueur + (1 | DTLocRisk$IDjoueur))
summary(model) #*, c'est déjà ça
View(DTLocRisk)
DTLocNoRisk <- DTLoc[sumProfilRA<6]
model <- lmer(DTLocNoRisk$erreurMise ~ DTLocNoRisk$meanProfilJoueur + (1 | DTLocNoRisk$IDjoueur))
summary(model) #nope
DTLocNoRisk <- DTLoc[sumProfilRA<=5]
model <- lmer(DTLocNoRisk$erreurMise ~ DTLocNoRisk$meanProfilJoueur + (1 | DTLocNoRisk$IDjoueur))
summary(model) #rassurant, être risquophobe n'a pas d'impact, on peut garder les données
DTLocWomen <- DTLoc[sexe==1]
model <- lmer(DTLocWomen$erreurMise ~ DTLocWomen$meanProfilJoueur + (1 | DTLocWomen$IDjoueur))
View(DTLocWomen)
summary(model) #rassurant, être risquophobe n'a pas d'impact, on peut garder les données
DTLocWomen <- DTLoc[sexe==0]
model <- lmer(DTLocWomen$erreurMise ~ DTLocWomen$meanProfilJoueur + (1 | DTLocWomen$IDjoueur))
summary(model) #rassurant, être risquophobe n'a pas d'impact, on peut garder les données
DTLocWomen <- DTLoc[sexe==1]
model <- lmer(DTLocWomen$erreurMise ~ DTLocWomen$meanProfilJoueur + (1 | DTLocWomen$IDjoueur))
summary(model) #rassurant, être risquophobe n'a pas d'impact, on peut garder les données
DTLocBac2Plus <- DTLoc[niveauEtude>=4]
model <- lmer(DTLocBac2Plus$erreurMise ~ DTLocBac2Plus$meanProfilJoueur + (1 | DTLocBac2Plus$IDjoueur))
summary(model) #pas d'impact lié au sexe
DTLocNoBac <- DTLoc[niveauEtude<3]
model <- lmer(DTLocNoBac$erreurMise ~ DTLocNoBac$meanProfilJoueur + (1 | DTLocNoBac$IDjoueur))
summary(model) #pas d'impact lié à un niveau d'étude >= à Bac+2
DTLocBacPlus <- DTLoc[niveauEtude>=3]
model <- lmer(DTLocBacPlus$erreurMise ~ DTLocBacPlus$meanProfilJoueur + (1 | DTLocBacPlus$IDjoueur))
summary(model) #pas d'impact lié à un niveau d'étude >= à Bac
counts <- table(dataQ$age)
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
ylim = c(0, 60))
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=1,pos=3)
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
ylim = c(0, 15))
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
ylim = c(0, 20
))
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=1,pos=3)
help(text)
help(text())
bpSexe <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60))
text(bpSexe, 0, round(CumulMasculin, 1),cex=1,pos=3)
bpSexe <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60))
text(bpSexe, 0, round(CumulMasculin, 1),cex=1,pos=3)
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=1,pos=3)
#afficher les résultats (à appeller en même temps)
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
xlim= c(0, 60),
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=1,pos=3)
#afficher les résultats (à appeller en même temps)
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
xlim= c(0, 51),
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=1,pos=3)
#afficher les résultats (à appeller en même temps)
bpAge <- barplot(counts,
#names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Âge",
ylab="Répartition selon les participants",
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=1,pos=3)
DTLocMoins15 <- DTLoc[age<=15]
model <- lmer(DTLocMoins15$erreurMise ~ DTLocMoins15$meanProfilJoueur + (1 | DTLocMoins15$IDjoueur))
summary(model) #pas d'impact lié à un niveau d'étude >= à Bac+2
DTLocPlus15 <- DTLoc[niveauEtude>15]
model <- lmer(DTLocPlus15$erreurMise ~ DTLocPlus15$meanProfilJoueur + (1 | DTLocPlus15$IDjoueur))
DTLocPlus15 <- DTLoc[niveauEtude>15]
View(DTLocPlus15)
DTLocPlus15 <- DTLoc[age>15]
model <- lmer(DTLocPlus15$erreurMise ~ DTLocPlus15$meanProfilJoueur + (1 | DTLocPlus15$IDjoueur))
summary(model) #pas d'impact lié à un niveau d'étude >= à Bac
