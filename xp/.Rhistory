# how much playing video games in general
DTAll$play.video.games = pmax(DTAll$profilJoueur2,
DTAll$profilJoueur3,
DTAll$profilJoueur4,
DTAll$profilJoueur5,
DTAll$profilJoueur6)
# how much playing board games
DTAll$play.board.games = pmax(DTAll$profilJoueur1)
# how much playing games with money
DTAll$play.money.games = pmax(DTAll$profilJoueur7)
# feeling of self efficacy
cols.self.eff <- c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4",
"autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8",
"autoEffJoueur9","autoEffJoueur10")
DTAll = DTAll[, self.eff := rowSums(.SD,na.rm=TRUE), .SDcols = cols.self.eff]
# risk aversion
cols.risk.av <- c("loterie1","loterie2","loterie3","loterie4","loterie5",
"loterie6","loterie7","loterie8","loterie9","loterie10")
DTAll = DTAll[, risk.av := rowSums(.SD,na.rm=TRUE), .SDcols = cols.risk.av]
#------------------------------------------------------
#         ADDING SIMPLE VARIABLES FOR GAME TRACES
#------------------------------------------------------
DTAll$perdant <- 1-DTAll$gagnant # if the player did fail on that try
DTAll$miseNorm <- DTAll$mise / 7 # normalize bet
#number of consecutive fails
gagnant = DTAll$gagnant; # tmp vector faster to read
id = DTAll$IDjoueur; # tmp vector faster to read
nbFails <- numeric(nrow(DTAll)) # tmp vector faster to write
nbFails[1] = 0;
nbFailCpt = 0;
lastID <- id[1];
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
nbFailCpt = 0;
}else{
if(gagnant[i-1] == 0){
nbFailCpt = nbFailCpt+1;
}else{
nbFailCpt = 0;
}
}
nbFails[i] <- nbFailCpt;
lastID = id[i-1];
}
DTAll$nbFail = nbFails;
#number of consecutive wins
nbWins <- numeric(nrow(DTAll)) # tmp vector faster to write
nbWins[1] = 0;
nbWinCpt = 0;
lastID <- id[1];
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
nbWinCpt = 0;
}else{
if(gagnant[i-1] == 1){
nbWinCpt = nbWinCpt+1;
}else{
nbWinCpt = 0;
}
}
nbWins[i] <- nbWinCpt;
lastID = id[i-1];
}
DTAll$nbWin = nbWins;
#sum of absolute bet variation over time, mainly to spot 1/7/1/7/1/7 behaviors
mise = DTAll$mise;
cumulDeltaMise <- numeric(nrow(DTAll))
cumulDeltaMise[1] = 0;
lastID <- id[1];
currentCumulDeltaMise = 0;
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
currentCumulDeltaMise = 0;
}else{
currentCumulDeltaMise = currentCumulDeltaMise + abs(mise[i] - mise[i-1]);
}
lastID = id[i];
cumulDeltaMise[i] = currentCumulDeltaMise;
}
DTAll$cumulDeltaMise = cumulDeltaMise;
#------------------------------------------------------
#            OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
outliers = data.table(type=character(0),id=character(0))
setkey(outliers,id)
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by=c("id","type"),all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by=c("id","type"),all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by=c("id","type"),all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
#------------------------------------------------------
#            OUTLIERS BET STD DEV
#------------------------------------------------------
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
DTM[IDjoueur %in% unlist(outliers[type=="Moteur"]$id) ,{plot.diff.curve(.SD,"Outlier Bet Sd Motor Task");NULL},by=.(IDjoueur)]
DTS[IDjoueur %in% unlist(outliers[type=="Sensoriel"]$id) ,{plot.diff.curve(.SD,"Outlier Bet Sd Sensory Task");NULL},by=.(IDjoueur)]
DTL[IDjoueur %in% unlist(outliers[type=="Logique"]$id) ,{plot.diff.curve(.SD,"Outlier Bet Sd Logical Task");NULL},by=.(IDjoueur)]
#------------------------------------------------------
#            OUTLIERS SUM OF WINS
#------------------------------------------------------
# Difficulty : win sum
# DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
# DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
# DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
#
# plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
#
# outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
# outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
# print(paste("Outliers :",toString(outliersLoc$id)))
#
# DTM[IDjoueur %in% unlist(outliersLoc[type=="Moteur"]$id) ,{plot.diff.curve(.SD,"Outlier Win Sum Motor Task");NULL},by=.(IDjoueur)]
# DTS[IDjoueur %in% unlist(outliersLoc[type=="Sensoriel"]$id) ,{plot.diff.curve(.SD,"Outlier Win Sum Sensory Task");NULL},by=.(IDjoueur)]
# DTL[IDjoueur %in% unlist(outliersLoc[type=="Logique"]$id) ,{plot.diff.curve(.SD,"Outlier Win Sum Logical Task");NULL},by=.(IDjoueur)]
#------------------------------------------------------
#            OUTLIERS SAVED SHEEPS
#------------------------------------------------------
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
DTM[IDjoueur %in% unlist(outliersLoc[type=="Moteur"]$id) ,{plot.diff.curve(.SD,"Outlier Score Motor Task");NULL},by=.(IDjoueur)]
DTS[IDjoueur %in% unlist(outliersLoc[type=="Sensoriel"]$id) ,{plot.diff.curve(.SD,"Outlier Score Sensory Task");NULL},by=.(IDjoueur)]
DTL[IDjoueur %in% unlist(outliersLoc[type=="Logique"]$id) ,{plot.diff.curve(.SD,"Outlier Score Logical Task");NULL},by=.(IDjoueur)]
#------------------------------------------------------
#            OUTLIERS EXPLOIT DDA
#------------------------------------------------------
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
DTM[IDjoueur %in% unlist(outliersLoc[type=="Moteur"]$id) ,{plot.diff.curve(.SD,"Outlier Delta Bet Motor Task");NULL},by=.(IDjoueur)]
DTS[IDjoueur %in% unlist(outliersLoc[type=="Sensoriel"]$id) ,{plot.diff.curve(.SD,"Outlier Delta Bet Sensory Task");NULL},by=.(IDjoueur)]
DTL[IDjoueur %in% unlist(outliersLoc[type=="Logique"]$id) ,{plot.diff.curve(.SD,"Outlier Delta Bet Logical Task");NULL},by=.(IDjoueur)]
#------------------------------------------------------
#            OUTLIERS SUMMARY
#------------------------------------------------------
print(paste("Total number of outliers: ",toString(nrow(unique(outliers,by="id")))))
print(paste("Total number of outliers motor task: ",toString(nrow(unique(outliers[type=="Moteur"],by="id")))))
print(paste("Total number of outliers perceptive task: ",toString(nrow(unique(outliers[type=="Logique"],by="id")))))
print(paste("Total number of outliers logical task: ",toString(nrow(unique(outliers[type=="Sensoriel"],by="id")))))
#------------------------------------------------------
#            REMOVING OUTLIERS FROM TABLES
#------------------------------------------------------
# removing all outliers
DTM <- DTM[!IDjoueur %in% unlist(outliers[type=="Moteur"]$id)]
DTS <- DTS[!IDjoueur %in% unlist(outliers[type=="Sensoriel"]$id)]
DTL <- DTL[!IDjoueur %in% unlist(outliers[type=="Logique"]$id)]
DTAll <- data.table()
DTAll <- rbind(DTAll,DTL)
DTAll <- rbind(DTAll,DTM)
DTAll <- rbind(DTAll,DTS)
#------------------------------------------------------
#            MODELING OBJECTIVE DIFFICULTY
#------------------------------------------------------
#modeling difficulty as mixed effect linear model
model.objective.diff <- function(DT){
return(glmer(perdant ~ difficulty + (1 | IDjoueur), data=DT,family = "binomial"(link = "logit")))
}
add.diff.obj <- function (DT,fit){
sample = data.frame(difficulty=DT$difficulty, IDjoueur=DT$IDjoueur)
DT$obj.diff =  predict(fit, newdata = sample, type = "response")
return (DT)
}
get.levels <- function(DT,fit){
fit.ranef = ranef(fit)$IDjoueur
DTLevel <- data.table(IDjoueur=rownames(fit.ranef),niveau=-fit.ranef); # ! minus, cause it's a level
setnames(DTLevel,"niveau.(Intercept)","niveau")
return(DTLevel)
}
add.levels <- function(DT,fit){
DTLevel <- get.levels(DT,fit)
return(merge(DT,DTLevel,by="IDjoueur",all=T))
}
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
inter.p.val = fit.sum$coefficients7
beta.diff.p.val = fit.sum$coefficients8
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
plot.objective.diff.model.curves <- function (DT,fit) {
DTLevel <- get.levels(DT,fit)
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = DTLevel[i]$IDjoueur, estDiff = newres)
if(i==1)
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2) + xlim(0,1) + ylim(0,1)
else
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2)
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
#DTLevel = DTLevel[order(niveau)];
#joueurMin = DTLevel[1]$IDjoueur
#joueurMax = DTLevel[nrow(DTLevel)]$IDjoueur
level.sd = sd(DTLevel$niveau)
level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(niveau - (level.mean - level.sd)))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.mean + level.sd)))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
print(p)
}
plot.objective.diff.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, obj.diff)) + geom_bin2d(binwidth=c(1,0.05))
print(p)
}
#------------------------------------------------------
#        MODELING OBJECTIVE DIFFICULTY MOTOR TASK
#------------------------------------------------------
fit.diff.motor <- model.objective.diff(DTM)
DTM <- add.diff.obj(DTM,fit.diff.motor)
DTM <- add.levels(DTM,fit.diff.motor)
print.objective.diff.model(DTM,fit.diff.motor)
plot.objective.diff.model.curves(DTM,fit.diff.motor)
plot.objective.diff.density(DTM)
#------------------------------------------------------
#        MODELING OBJECTIVE DIFFICULTY SENSORY TASK
#------------------------------------------------------
fit.diff.senso <- model.objective.diff(DTS)
DTS <- add.diff.obj(DTS,fit.diff.senso)
DTS <- add.levels(DTS,fit.diff.senso)
print.objective.diff.model(DTS,fit.diff.senso)
plot.objective.diff.model.curves(DTS,fit.diff.senso)
plot.objective.diff.density(DTS)
#------------------------------------------------------
#        MODELING OBJECTIVE DIFFICULTY LOGICAL TASK
#------------------------------------------------------
fit.diff.logic <- model.objective.diff(DTL)
DTL <- add.diff.obj(DTL,fit.diff.logic)
DTL <- add.levels(DTL,fit.diff.logic)
print.objective.diff.model(DTL,fit.diff.logic)
plot.objective.diff.model.curves(DTL,fit.diff.logic)
plot.objective.diff.density(DTL)
#------------------------------------------------------
#       MERGE INTO DTALL
#------------------------------------------------------
DTAll <- data.table()
DTAll <- rbind(DTAll,DTL)
DTAll <- rbind(DTAll,DTM)
DTAll <- rbind(DTAll,DTS)
#------------------------------------------------------
#        MODELING SUBJECTIVE DIFFICULTY
#------------------------------------------------------
#adding error between subjective difficulty and objecive difficulty
DTAll$subj.diff.mise = 1 - DTAll$miseNorm;
DTAll$error.subj.diff.mise = DTAll$subj.diff.mise - DTAll$obj.diff
#evaluating confidence as a damped over time sum of win and fails;
#each win and fail importance based on objective difficulty at that time
id = DTAll$IDjoueur; # tmp vector faster to read
cur.confidence = 0;
cur.confidence.liss = 0;
lastID <- id[1];
est.confidence <- numeric(nrow(DTAll))
est.confidence[1] = 0;
obj.diff = DTAll$obj.diff
alpha <- 0.9
i = 1
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
cur.confidence.liss = 0;
}else{
if(gagnant[i-1]){
cur.confidence = obj.diff[i-1];
}else{
cur.confidence = -(1 - obj.diff[i-1]);
}
cur.confidence.liss <- alpha * cur.confidence.liss + cur.confidence;
}
lastID <- id[i];
est.confidence[i] <- cur.confidence.liss;
}
DTAll$est.confidence = est.confidence;
DTAll$est.confidence.norm = exp(DTAll$est.confidence) / (1+exp(DTAll$est.confidence));
#update DTM DTS and DTL
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
hist(unique(DTM,by="IDjoueur")$age,breaks=30,main="Age of players")
hist(unique(DTM,by="IDjoueur")$sexe,main="Sex of players")
hist(unique(DTM,by="IDjoueur")$play.video.games,main="Playing Video Games")
hist(unique(DTM,by="IDjoueur")$play.board.games,main="Playing Board Games")
hist(unique(DTM,by="IDjoueur")$self.eff,main="Self efficacy")
hist(unique(DTM,by="IDjoueur")$risk.av,main="Risk aversion")
test.profile <- function(Y,X,title){
test <- cor.test(Y,X, method="kendall")
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1)
print(paste(title,res))
return(res)
}
test.profile.binary <- function(A,B,title){
test <- wilcox.test(A,B,conf.int=T)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1)
print(paste(title,res))
return(res)
}
#Objective level and player profile
pvg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.video.games,"pvg.on.level.m")
pvg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.video.games,"pvg.on.level.s")
pvg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.video.games,"pvg.on.level.l")
pbg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.board.games,"pbg.on.level.m")
pbg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.board.games,"pbg.on.level.s")
pbg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.board.games,"pbg.on.level.l")
self.eff.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$self.eff,"self.eff.on.level.m")
self.eff.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$self.eff,"self.eff.on.level.s")
self.eff.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$self.eff,"self.eff.on.level.l")
risk.av.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$risk.av,"risk.av.on.level.m")
risk.av.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$risk.av,"risk.av.on.level.s")
risk.av.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$risk.av,"risk.av.on.level.l")
age.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$age,"age.on.level.m")
age.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$age,"age.on.level.s")
age.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$age,"age.on.level.l")
sexe.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$sexe,"sexe.on.level.m")
sexe.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$sexe,"sexe.on.level.s")
sexe.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$sexe,"sexe.on.level.l")
sexe.on.level.m.2 <- test.profile.binary(unique(DTM[sexe==0],by="IDjoueur")$niveau, unique(DTM[sexe==1],by="IDjoueur")$sexe,"sexe.on.level.m.2")
sexe.on.level.s.2 <- test.profile.binary(unique(DTS[sexe==0],by="IDjoueur")$niveau, unique(DTS[sexe==1],by="IDjoueur")$sexe,"sexe.on.level.s.2")
sexe.on.level.l.2 <- test.profile.binary(unique(DTL[sexe==0],by="IDjoueur")$niveau, unique(DTL[sexe==1],by="IDjoueur")$sexe,"sexe.on.level.l.2")
#Subjective difficulty and play habits
pvg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.video.games,"pvg.on.error")
pbg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.board.games,"pbg.on.error")
sexe.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error")
sexe.on.error.2 <- test.profile.binary(unique(DTAll[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise, unique(DTAll[sexe==1],by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.2")
#Subjective difficulty and risk aversion
risk.av.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
#Subjective difficulty and self efficacy
self.eff.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
subj.diff.med = numeric(10)
obj.diff.bin = numeric(10)
obj.diff.bin.cur = 0;
test.pvals = numeric(10)
conf.min = numeric(10)
conf.max = numeric(10)
nb.vals = numeric(10)
delta.obj.subj = numeric(10)
obj.diff.quants = quantile(DT$obj.diff, probs=(seq(0,1,0.1)))
hist(DT$obj.diff)
for(i in 1:10){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = obj.diff.quants[i+1]
subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
test.pvals[i] = format.pval.stars(test.res$p.value)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med)
p = ggplot(DTPlot, aes(obj.diff,subj.diff)) +
geom_point(alpha = 0.4, size = 3.5) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
plot.subjective.difficulty(DTM)
plot.subjective.difficulty(DTS)
plot.subjective.difficulty(DTL)
plot.subjective.diff.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, subj.diff)) + geom_bin2d(binwidth=c(1,0.05))
print(p)
}
plot.subjective.diff.density(DTM)
plot.subjective.diff.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.05))
print(p)
}
plot.subjective.diff.density(DTM)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTM))
plot.subjective.diff.density(DTS)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTL))
plot.subjective.diff.density(DTL)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTS))
plot.subjective.diff.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, subj.diff.mise)) + geom_bin2d(binwidth=c(1,1/7))
print(p)
}
plot.subjective.diff.density(DTM)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTM))
plot.subjective.diff.density(DTS)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTL))
plot.subjective.diff.density(DTL)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTS))
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.05))
print(p)
}
plot.subjective.diff.density(DTM)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTM))
plot.subjective.diff.density(DTS)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTL))
plot.subjective.diff.density(DTL)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTS))
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.1))
print(p)
}
plot.subjective.diff.density(DTM)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTM))
plot.subjective.diff.density(DTS)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTL))
plot.subjective.diff.density(DTL)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTS))
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.1))
print(p)
}
plot.subjective.diff.error.density(DTM)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTM))
plot.subjective.diff.error.density(DTS)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTL))
plot.subjective.diff.error.density(DTL)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTS))
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.2))
print(p)
}
plot.subjective.diff.error.density(DTM)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTM))
plot.subjective.diff.error.density(DTS)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTL))
plot.subjective.diff.error.density(DTL)
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTS))
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.2))
print(p)
}
plot.subjective.diff.error.density(DTM[action_de_jeu > 5])
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTM))
plot.subjective.diff.error.density(DTS[action_de_jeu > 5])
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTL))
plot.subjective.diff.error.density(DTL[action_de_jeu > 5])
summary(glm(error.subj.diff.mise~action_de_jeu + obj.diff,data = DTS))
