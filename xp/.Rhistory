echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("");
}
#difficulte logique
DTL <- dataG[which(dataG$nom_du_jeu=="Logique2"),]
DTL <- as.data.table(DTL)
DTL <- addVariables(DTL,plotLogit,titre="Jeu de déduction (difficulté logique)")
#difficulte sensorielle
DTS <- dataG[which(dataG$nom_du_jeu=="Sensoriel"),]
DTS <- as.data.table(DTS)
DTS <- addVariables(DTS,plotLogit,titre="Jeu de perception visuelle (difficulté sensorielle)")
#difficulte motrice
DTM <- dataG[which(dataG$nom_du_jeu=="Motrice"),]
DTM <- as.data.table(DTM)
DTM$difficulty <-  (DTM$difficulty)/ abs(max(DTM$difficulty)) #normalisation difficulte
DTM <- addVariables(DTM,plotLogit,titre="Jeu d'adresse (difficulté motrice)")
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sdMise=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sdMise=sd(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sdMise)) +
xlab("Types de difficulté") +
ylab("Ecart type de la mise") +
ggtitle("Isoler les stratégies critiques")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSdMiseM <- boxplot.stats(DTDescM$sdMise)$out
outliersSdMiseS <- boxplot.stats(DTDescS$sdMise)$out
outliersSdMiseL <- boxplot.stats(DTDescL$sdMise)$out
idOutliersM = DTDescM[sdMise %in% outliersSdMiseM]$IDjoueur
idOutliersS = DTDescS[sdMise %in% outliersSdMiseS]$IDjoueur
idOutliersL = DTDescL[sdMise %in% outliersSdMiseL]$IDjoueur
print(paste("Id out motrice sdMise:",toString(idOutliersM)))
print(paste("Id out senso sdMise:",toString(idOutliersS)))
print(paste("Id out logique sdMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=mean(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise)) +
xlab("Types de difficulté") +
ylab("Moyenne de la mise") +
ggtitle("Isoler les stratégies critiques")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice mMise:",toString(idOutliersM)))
print(paste("Id out senso mMise:",toString(idOutliersS)))
print(paste("Id out logique mMise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",mMise=sum(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",mMise=sum(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",mMise=sum(miseNorm)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,mMise)) +
xlab("Types de difficulté") +
ylab("Somme des mises") +
ggtitle("Isoler les stratégies critiques")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$mMise)$out
outliersMMiseS <- boxplot.stats(DTDescS$mMise)$out
outliersMMiseL <- boxplot.stats(DTDescL$mMise)$out
idOutliersM = DTDescM[mMise %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[mMise %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[mMise %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice sum Mise:",toString(idOutliersM)))
print(paste("Id out senso sum Mise:",toString(idOutliersS)))
print(paste("Id out logique sum Mise:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",sWin=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",sWin=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",sWin=sum(gagnant)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,sWin)) +
xlab("Types de difficulté") +
ylab("Cumul des succès") +
ggtitle("Isoler les joueurs critiques (succès)")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersSWinM <- boxplot.stats(DTDescM$sWin)$out
outliersSWinS <- boxplot.stats(DTDescS$sWin)$out
outliersSWinL <- boxplot.stats(DTDescL$sWin)$out
idOutliersM = DTDescM[sWin %in% outliersSWinM]$IDjoueur
idOutliersS = DTDescS[sWin %in% outliersSWinS]$IDjoueur
idOutliersL = DTDescL[sWin %in% outliersSWinL]$IDjoueur
print(paste("Id out motrice sum win:",toString(idOutliersM)))
print(paste("Id out senso sum win:",toString(idOutliersS)))
print(paste("Id out logique sum win:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM)==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons)) +
xlab("Types de difficulté") +
ylab("Cumul des moutons gagnés") +
ggtitle("Isoler les bons joueurs critiques (mise)")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons)) +
xlab("Types de difficulté") +
ylab("Cumul des moutons perdus") +
ggtitle("Isoler les mauvais joueurs critiques (mise)")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",cumul=max(cumulDeltaMise)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,cumul)) +
xlab("Types de difficulté") +
ylab("Cumul du delta des mises") +
ggtitle("Isoler la stratégie alernance échec/succès")
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$cumul)$out
outliersMMiseS <- boxplot.stats(DTDescS$cumul)$out
outliersMMiseL <- boxplot.stats(DTDescL$cumul)$out
idOutliersM = DTDescM[cumul %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[cumul %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[cumul %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,difficulty,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm,IDjoueur);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
#creation de la table totale
DT <- data.table()
if(useLogique) DT <- rbind(DT,DTL)
if(useMotrice) DT <- rbind(DT,DTM)
if(useSensorielle) DT <- rbind(DT,DTS)
#supprimer le debut ou la fin
if(removeTenFirst)
DT <- removeHeadTail(DT,10);
DTLocGamer <- DTLoc[meanProfilJoueur>=3]
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$meanProfilJoueur + (1 | DTLocGamer$IDjoueur))
DTLoc$perdant <- 1-DTLoc$gagnant;
DTLoc$miseNorm <- DTLoc$mise / 7;
DTLoc$evalDiff <- 1 - DTLoc$miseNorm;
DTLoc$erreurMise = DTLoc$miseNorm - DTLoc$gagnant;
DTLocGamer <- DTLoc[meanProfilJoueur>=3]
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$meanProfilJoueur + (1 | DTLocGamer$IDjoueur))
summary(model)
DTLocGamer <- DTLoc[meanProfilJoueur>=3]
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$meanProfilJoueur + (1 | DTLocGamer$IDjoueur))
summary(model)
DTLocNoGamer <- DTLoc[meanProfilJoueur<3]
model <- lmer(DTLocNoGamer$erreurMise ~ DTLocNoGamer$meanProfilJoueur + (1 | DTLocNoGamer$IDjoueur))
summary(model) #*, c'est déjà ça
ggplot(data=DTLoc, aes(erreurMise,meanProfilJoueur))
ggplot(data=DTLoc, aes(erreurMise,meanProfilJoueur))
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur))
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur))
+ geom_density(kernel = "gaussian")
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur))
+ geom_dotplot()
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur))
+ geom_line()
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur))
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur)) +
geom_line()
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur)) +
geom_line()
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur)) +
geom_density(kernel = "gaussian")
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur)) +
geom_density(kernel = "gaussian")
ggplot(data=DTLoc, aes(x = erreurMise,y = meanProfilJoueur)) +
geom_area(stat = "bin")
ggplot(data=DTLoc, aes(x = action_de_jeu,y = meanProfilJoueur)) +
geom_area(stat = "bin")
ggplot(data=DTLoc, aes(x = action_de_jeu,y = meanProfilJoueur))
ggplot(data=DTLoc, aes(x = action_de_jeu,y = meanProfilJoueur))
ggplot(data=DTLoc, aes(x = mise,y = meanProfilJoueur))
ggplot(data=DTLoc, aes(x = mise,y = meanProfilJoueur))
DTLocGamer <- DTLoc[meanProfilJoueur>=3]
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$meanProfilJoueur + (1 | DTLocGamer$IDjoueur))
summary(model)
r.squaredGLMM(model)
predict(model)
glm(erreurMise ~ meanProfilJoueur, data = DTLoc, family = "binomial"(link = "logit"))
glm(erreurMise ~ meanProfilJoueur, data = DTLoc, family = "poisson"(link = "logit"))
lm(formula = DTLocerreurMise ~ DTLocmeanProfilJoueur)
lm(formula = DTLoc$erreurMise ~ DTLoc$meanProfilJoueur)
lm(formula = DTLoc$erreurMise ~ DTLoc$meanProfilJoueur)
plot(lm(formula = DTLoc$erreurMise ~ DTLoc$meanProfilJoueur))
plot(lm(formula = DTLoc$erreurMise ~ DTLoc$meanProfilJoueur))
model <- lmer(DTLoc$erreurMise ~ DTLoc$action_de_jeu + (1 | DTLoc$IDjoueur))
summary(model) #nope
DTLocRisk <- DTLoc[sumProfilRA>=6]
View(DTLocRisk)
DTLocRisk <- DTLoc[sumProfilRA>=6]
model <- lmer(DTLocRisk$erreurMise ~ DTLocRisk$sumProfilRA + (1 | DTLocRisk$IDjoueur))
summary(model) #rassurant, être risquophobe n'a pas d'impact, on peut garder les données
DTLocNoRisk <- DTLoc[sumProfilRA<=5]
model <- lmer(DTLocNoRisk$erreurMise ~ DTLocNoRisk$sumProfilRA + (1 | DTLocNoRisk$IDjoueur))
summary(model) #rassurant, être risquophile n'a pas d'impact, on peut garder les données
DTLocWomen <- DTLoc[sexe==1]
View(DTLocWomen)
DTLocWomen <- DTLoc[sexe==1]
model <- lmer(DTLocWomen$erreurMise ~ DTLocWomen$sexe + (1 | DTLocWomen$IDjoueur))
summary(model) #pas d'impact lié au sexe
DTLocWomen <- DTLoc[sexe==1]
model <- lmer(DTLocWomen$erreurMise ~ DTLocWomen$sexe + (1 | DTLocWomen$IDjoueur))
model <- lmer(DTLoc$erreurMise ~ DTLoc$action_de_jeu + (1 | DTLoc$IDjoueur))
summary(model) #nope
model <- lmer(DTLoc$erreurMise ~ DTLoc$difficulty + (1 | DTLoc$IDjoueur))
summary(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$difficulty + (1 | DTLoc$IDjoueur))
r.squaredGLMM(model)
View(DTLoc)
DTLocL <- DTLoc[nom_du_jeu == "Logique2"]
View(DTLocL)
DTLocL <- DTLoc[nom_du_jeu == "Logique2"]
model <- lmer(DTLocL$erreurMise ~ DTLocL$difficulty + (1 | DTLocL$IDjoueur))
summary(model)
r.squaredGLMM(model)
DTLocM <- DTLoc[nom_du_jeu == "Motrice"]
model <- lmer(DTLocM$erreurMise ~ DTLocM$difficulty + (1 | DTLocM$IDjoueur))
summary(model)
r.squaredGLMM(model)
DTLocS <- DTLoc[nom_du_jeu == "Sensoriel"]
View(DTLocS)
model <- lmer(DTLocS$erreurMise ~ DTLocS$difficulty + (1 | DTLocS$IDjoueur))
summary(model)
r.squaredGLMM(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$action_de_jeu + (1 | DTLoc$IDjoueur))
summary(model) #nope
r.squaredGLMM(model)
mylogit <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$estDiff =  predict(mylogit, newdata = sample, type = "response");
glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
DTLocMen <- DTLoc[sexe==0]
model <- lmer(DTLocMen$erreurMise ~ DTLocMen$sexe + (1 | DTLocMen$IDjoueur))
summary(model) #pas d'impact lié au sexe
model <- ln(DTLocMen$erreurMise ~ DTLocMen$sexe)
model <- glm(DTLocMen$erreurMise ~ DTLocMen$sexe)
summary(model) #pas d'impact lié au sexe
DTLocWomen <- DTLoc[sexe==1]
model <- lmer(DTLoc$erreurMise ~ DTLocWomen$sexe + (1 | DTLocWomen$IDjoueur))
model <- lmer(DTLoc$erreurMise ~ DTLoc$sexe + (1 | DTLoc$IDjoueur))
summary(model)
DTLocWomen <- DTLoc[sexe==1]
model <- lmer(DTLocWomen$erreurMise ~ DTLocWomen$difficulty + (1 | DTLocWomen$IDjoueur))
summary(model) #pas d'impact lié au sexe
r.squaredGLMM(model)
DTLocMen <- DTLoc[sexe==0]
model <- lmer(DTLocMen$erreurMise ~ DTLocMen$difficulty + (1 | DTLocMen$IDjoueur))
summary(model) #pas d'impact lié au sexe
r.squaredGLMM(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$sexe + (1 | DTLoc$IDjoueur))
summary(model)
r.squaredGLMM(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$sexe + (1 | DTLoc$IDjoueur))
summary(model) #pas d'impact lié au sexe
summary(model) #pas d'impact lié au sexe
r.squaredGLMM(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$sumProfilRA + (1 | DTLoc$IDjoueur))
summary(model) #pas d'impact lié au sexe
r.squaredGLMM(model)
DTLocRisk <- DTLoc[sumProfilRA>=6]
model <- lmer(DTLocRisk$erreurMise ~ DTLocRisk$difficulty + (1 | DTLocRisk$IDjoueur))
summary(model) #rassurant, être risquophobe n'a pas d'impact, on peut garder les données
r.squaredGLMM(model)
DTLocNoRisk <- DTLoc[sumProfilRA<=5]
model <- lmer(DTLocNoRisk$erreurMise ~ DTLocNoRisk$difficulty + (1 | DTLocNoRisk$IDjoueur))
summary(model) #rassurant, être risquophile n'a pas d'impact, on peut garder les données
r.squaredGLMM(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$sumProfilRA + (1 | DTLoc$IDjoueur))
summary(model) #pas d'impact lié au profil risquophobe/phile
r.squaredGLMM(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$meanProfilJoueur + (1 | DTLoc$IDjoueur))
summary(model) #nope
r.squaredGLMM(model)
DTLocGamer <- DTLoc[meanProfilJoueur>=3]
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$difficulty + (1 | DTLocGamer$IDjoueur))
summary(model)
model <- lmer(DTLoc$erreurMise ~ DTLoc$meanProfilJoueur + (1 | DTLoc$IDjoueur))
summary(model)
r.squaredGLMM(model)
DTLocGamer <- DTLoc[meanProfilJoueur>=3]
model <- lmer(DTLocGamer$erreurMise ~ DTLocGamer$difficulty + (1 | DTLocGamer$IDjoueur))
summary(model)
r.squaredGLMM(model)
DTLocNoGamer <- DTLoc[meanProfilJoueur<3]
model <- lmer(DTLocNoGamer$erreurMise ~ DTLocNoGamer$difficulty + (1 | DTLocNoGamer$IDjoueur))
summary(model) #*, c'est déjà ça
r.squaredGLMM(model)
model <- lmer(DTLoc$mise ~ DTLoc$difficulty + (1 | DTLoc$IDjoueur))
summary(model)
r.squaredGLMM(model)
DTLocL <- DTLoc[nom_du_jeu == "Logique2"]
model <- lmer(DTLocL$mise ~ DTLocL$difficulty + (1 | DTLocL$IDjoueur))
summary(model)
r.squaredGLMM(model)
DTLocM <- DTLoc[nom_du_jeu == "Motrice"]
model <- lmer(DTLocM$mise ~ DTLocM$difficulty + (1 | DTLocM$IDjoueur))
summary(model)
r.squaredGLMM(model)
DTLocS <- DTLoc[nom_du_jeu == "Sensoriel"]
model <- lmer(DTLocS$mise ~ DTLocS$difficulty + (1 | DTLocS$IDjoueur))
summary(model)
r.squaredGLMM(model)
help("aov")
model <- aov(DTLoc$erreurMise ~ DTLoc$sexe)
summary(model) #pas d'impact lié au sexe
r.squaredGLMM(model)
model <- aov(DTLocWomen$erreurMise ~ DTLocWomen$difficulty)
summary(model)
r.squaredGLMM(model) #r2 non révélateur
model <- aov(DTLoc$erreurMise ~ DTLoc$sexe)
summary(model) #pas d'impact lié au sexe
r.squaredGLMM(model)
