level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(level.mean - level.sd))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(level.mean + level.sd))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="green",size=1.3)
print(p)
}
print.objective.diff.model.curves(DTM,fit.diff.motor)
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY FUNCS
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
inter.p.val = fit.sum$coefficients7
beta.diff.p.val = fit.sum$coefficients8
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
print.objective.diff.model.curves <- function (DT,fit) {
DTLevel <- get.levels(DT,fit)
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = DTLevel[i]$IDjoueur, estDiff = newres)
if(i==1)
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2) + xlim(0,1) + ylim(0,1)
else
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2)
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(niveau)];
joueurMin = DTLevel[1]$IDjoueur
joueurMax = DTLevel[nrow(DTLevel)]$IDjoueur
level.sd = sd(DTLevel$niveau)
level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(niveau - (level.mean - level.sd)))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.mean + level.sd)))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="green",size=1.3)
print(p)
}
print.objective.diff.model.curves(DTM,fit.diff.motor)
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY FUNCS
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
inter.p.val = fit.sum$coefficients7
beta.diff.p.val = fit.sum$coefficients8
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
print.objective.diff.model.curves <- function (DT,fit) {
DTLevel <- get.levels(DT,fit)
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = DTLevel[i]$IDjoueur, estDiff = newres)
if(i==1)
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2) + xlim(0,1) + ylim(0,1)
else
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2)
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(niveau)];
joueurMin = DTLevel[1]$IDjoueur
joueurMax = DTLevel[nrow(DTLevel)]$IDjoueur
level.sd = sd(DTLevel$niveau)
level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(niveau - (level.mean - level.sd)))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.mean + level.sd)))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.1)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="green",size=1.1)
print(p)
}
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY FUNCS
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
inter.p.val = fit.sum$coefficients7
beta.diff.p.val = fit.sum$coefficients8
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
print.objective.diff.model.curves <- function (DT,fit) {
DTLevel <- get.levels(DT,fit)
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = DTLevel[i]$IDjoueur, estDiff = newres)
if(i==1)
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2) + xlim(0,1) + ylim(0,1)
else
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2)
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(niveau)];
joueurMin = DTLevel[1]$IDjoueur
joueurMax = DTLevel[nrow(DTLevel)]$IDjoueur
level.sd = sd(DTLevel$niveau)
level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(niveau - (level.mean - level.sd)))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.mean + level.sd)))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.1)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.1)
print(p)
}
print.objective.diff.model.curves(DTM,fit.diff.motor)
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY FUNCS
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
inter.p.val = fit.sum$coefficients7
beta.diff.p.val = fit.sum$coefficients8
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
print.objective.diff.model.curves <- function (DT,fit) {
DTLevel <- get.levels(DT,fit)
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = DTLevel[i]$IDjoueur, estDiff = newres)
if(i==1)
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2) + xlim(0,1) + ylim(0,1)
else
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2)
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(niveau)];
joueurMin = DTLevel[1]$IDjoueur
joueurMax = DTLevel[nrow(DTLevel)]$IDjoueur
level.sd = sd(DTLevel$niveau)
level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(niveau - (level.mean - level.sd)))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.mean + level.sd)))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
print(p)
}
print.objective.diff.model.curves(DTM,fit.diff.motor)
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY FUNCS
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
inter.p.val = fit.sum$coefficients7
beta.diff.p.val = fit.sum$coefficients8
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
print.objective.diff.model.curves <- function (DT,fit) {
DTLevel <- get.levels(DT,fit)
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = DTLevel[i]$IDjoueur, estDiff = newres)
if(i==1)
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2) + xlim(0,1) + ylim(0,1)
else
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2)
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(niveau)];
joueurMin = DTLevel[1]$IDjoueur
joueurMax = DTLevel[nrow(DTLevel)]$IDjoueur
level.sd = sd(DTLevel$niveau)
level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(niveau - (level.mean - 2*level.sd)))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.mean + 2*level.sd)))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
print(p)
}
print.objective.diff.model.curves(DTM,fit.diff.motor)
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY FUNCS
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
inter.p.val = fit.sum$coefficients7
beta.diff.p.val = fit.sum$coefficients8
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
print.objective.diff.model.curves <- function (DT,fit) {
DTLevel <- get.levels(DT,fit)
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = DTLevel[i]$IDjoueur, estDiff = newres)
if(i==1)
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2) + xlim(0,1) + ylim(0,1)
else
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2)
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(niveau)];
joueurMin = DTLevel[1]$IDjoueur
joueurMax = DTLevel[nrow(DTLevel)]$IDjoueur
level.sd = sd(DTLevel$niveau)
level.mean = mean(DTLevel$niveau)
DTLevel = DTLevel[order(abs(niveau - (level.mean - level.sd)))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.mean + level.sd)))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="blue",size=1.3)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,color="red",size=1.01)
print(p)
}
DTPlayers = DT[unique(IDjoueur)]
DT = DTM
DTPlayers = DT[unique(IDjoueur)]
for(i in 1:nrow(DTPlayers))
print(DTPlayers[i]$IDjoueur)
DTPlayers = unique(DTPlayers$IDjoueur)
for(i in 1:nrow(DTPlayers))
print(DTPlayers[i]$IDjoueur)
DTPlayers = unique(DTM$IDjoueur)
for(i in 1:nrow(DTPlayers))
print(DTPlayers[i]$IDjoueur)
DTPlayers = unique(DTM$IDjoueur)
DTPlayers = unique(DTM$IDjoueur)
DTPlayers = unique(DTM$IDjoueur)
DT = DTM
DTPlayers = unique(DT$IDjoueur)
DTPlayers = unique(DT$IDjoueur)
DTPlayers
for(i in 1:nrow(DTPlayers))
print(DTPlayers[i]$IDjoueur)
DT = DTM
DTPlayers = unique(DT$IDjoueur)
for(i in 1:length(DTPlayers))
print(DTPlayers[i]$IDjoueur)
DTPlayers = unique(DT$IDjoueur)
for(i in 1:length(DTPlayers))
print(DTPlayers[i])
p <- ggplot()
for(i in 1:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
nbSteps = length(diff)
p<-p+geom.line(x=nbSteps,y=diff)
}
p <- ggplot()
for(i in 1:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
nbSteps = length(diff)
p<-p+geom_line(x=nbSteps,y=diff)
}
print(p)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
diff
nbSteps
nbSteps = [1:length(diff)]
nbSteps = 1:length(diff)
p<-p+geom_line(x=nbSteps,y=diff)
print(p)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
nbSteps = 1:length(diff)
df = data.frame(y=diff, x=,nbSteps)
df = data.frame(y=diff, x=nbSteps)
ggplot(df,aes(x,y))
ggplot(df,aes(x,y)) + geom_line()
for(i in 2:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
nbSteps = 1:length(diff)
p<-p+geom_line(x=nbSteps,y=diff)
}
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
nbSteps = 1:length(diff)
df = data.frame(y=diff, x=nbSteps)
p = ggplot(df,aes(x,y)) + geom_line()
for(i in 2:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
nbSteps = 1:length(diff)
p<-p+geom_line(x=nbSteps,y=diff)
}
print(p)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
df = data.frame(y=diff, x=nbSteps)
p = ggplot(df,aes(x,y)) + geom_line()
diff = DT[IDjoueur == DTPlayers[2]]$obj.diff
nbSteps = 1:length(diff)
p<-p+geom_line(x=nbSteps,y=diff)
print(p)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
df = data.frame(y=diff, x=nbSteps)
diff = DT[IDjoueur == DTPlayers[2]]$obj.diff
nbSteps = 1:length(diff)
p<-p+geom_line(aes(x=nbSteps,y=diff))
print(p)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
df = data.frame(y=diff, x=nbSteps)
diff = DT[IDjoueur == DTPlayers[2]]$obj.diff
p<-p+geom_line(y=diff)
print(p)
diff = DT[IDjoueur == DTPlayers[2]]$obj.diff
p<-p+geom_line(aes(y=diff))
print(p)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
df = data.frame(y=diff, x=nbSteps)
p = ggplot(df,aes(x,y)) + geom_line()
diff = DT[IDjoueur == DTPlayers[2]]$obj.diff
print(p)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
df = data.frame(y=diff, x=nbSteps)
for(i in 2:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[2]]$obj.diff
p<-p+geom_line(aes(y=diff))
}
for(i in 2:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[2]]$obj.diff
p<-p+geom_line(aes(y=diff))
}
print(p)
print(p)
DT = DTM
DTPlayers = unique(DT$IDjoueur)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
nbSteps = 1:length(diff)
df = data.frame(y=diff, x=nbSteps)
p = ggplot(df,aes(x,y)) + geom_line()
for(i in 2:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
p<-p+geom_line(aes(y=diff))
}
print(p)
DT = DTM
DTPlayers = unique(DT$IDjoueur)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
nbSteps = 1:length(diff)
df = data.frame(y=diff, x=nbSteps)
p = ggplot(df,aes(x,y)) + geom_line()
for(i in 2:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
p<-p+geom_line(aes(y=diff))
print(DTPlayers[i])
}
print(p)
DT = DTM
DTPlayers = unique(DT$IDjoueur)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
nbSteps = 1:length(diff)
df = data.frame(y=diff, x=nbSteps)
p = ggplot(df,aes(x,y)) + geom_line()
for(i in 2:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
p<-p+geom_line(aes(y=diff))
print(DTPlayers[i])
print(summary(diff))
}
print(p)
DT = DTM
DTPlayers = unique(DT$IDjoueur)
diff = DT[IDjoueur == DTPlayers[1]]$obj.diff
nbSteps = 1:length(diff)
df = data.frame(y=diff, x=nbSteps)
p = ggplot()
nbSteps = 1:length(diff)
for(i in 1:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
df = data.frame(y=diff, x=nbSteps)
p<-p+geom_line(aes(x=nbSteps,y=diff),diff)
}
DT = DTM
DTPlayers = unique(DT$IDjoueur)
p = ggplot()
nbSteps = 1:length(diff)
for(i in 1:length(DTPlayers)){
diff = DT[IDjoueur == DTPlayers[i]]$obj.diff
df = data.frame(x=nbSteps,y=diff)
p<-p+geom_line(aes(x,y),diff)
}
