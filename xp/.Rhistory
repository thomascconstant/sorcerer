}
add.levels <- function(DT,fit){
DTLevel <- get.levels(DT,fit)
return(merge(DT,DTLevel,by="IDjoueur",all=T))
}
#TODO par groupe
add.levels.groups<- function(DT){
#fit = hclust(dist(DT$niveau), "ward.D2")
#plot(fit,hang=-1)
#groups <- cutree(fit, k=3)
nbJoueur <- nrow(unique(DT,by="niveau"))
fit<-kmeans(DT$niveau,min(nbJoueur,3))
groups<-fit$cluster
DT$niveau.group = factor(groups)
levels.order = DT[order(niveau),.(ordered.group=niveau.group),by=niveau.group]
levels.factors = levels(factor(c("bad","medium","good"),levels=c("bad","medium","good"),ordered=T))
levels(DT$niveau.group)[levels(DT$niveau.group)==levels.order[1]$niveau.group] <- levels.factors[1]
levels(DT$niveau.group)[levels(DT$niveau.group)==levels.order[2]$niveau.group] <- levels.factors[2]
levels(DT$niveau.group)[levels(DT$niveau.group)==levels.order[3]$niveau.group] <- levels.factors[3]
return(DT)
}
#------------------------------------------------------
#         SHOWING OBJECTIVE DIFFICULTY
#------------------------------------------------------
print.objective.diff.model <- function (DT,fit) {
fit.ranef = ranef(fit)$IDjoueur
fit.sum = unlist(summary(fit))
inter = fit.sum$coefficients1
beta.diff = fit.sum$coefficients2
beta.time = fit.sum$coefficients3
inter.p.val = fit.sum$coefficients10
beta.diff.p.val = fit.sum$coefficients11
beta.time.p.val = fit.sum$coefficients12
fit.r.value = r.squaredGLMM(fit)[2] #R2 for mixed effect model
print(table(DT$nom_du_jeu))
print("Player levels from ranef:")
print(summary(fit.ranef))
print(paste("Intercept:",format.coef(inter,inter.p.val)))
print(paste("Difficulty:",format.coef(beta.diff,beta.diff.p.val)))
print(paste("Time:",format.coef(beta.time,beta.time.p.val)))
print(paste("R2:",signif(fit.r.value,digits=3)))
}
plot.objective.diff.model.curves <- function (DT,fit,time=1) {
#DTLevel <- get.levels(DT,fit)
DTLevel <- unique(DT,by="IDjoueur")
DTLevel[niveau.group=="bad",group.color:=as.character("green")]
DTLevel[niveau.group=="medium",group.color:=as.character("yellow")]
DTLevel[niveau.group=="good",group.color:=as.character("cyan")]
for(i in 1:nrow(DTLevel)){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=DTLevel[i]$IDjoueur, timeNorm=time)#TODO plusieurs temps
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),
IDjoueur = DTLevel[i]$IDjoueur,
estDiff = newres,
group.color = DTLevel[i]$group.color)
if(i==1){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 0.2,colour=DT$group.color) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 0.2,size=1.2,colour=DT$group.color)
}
}
DTLevel = DTLevel[order(abs(niveau))];
joueurMed = DTLevel[1]$IDjoueur
level.quants = quantile(DTLevel$niveau,probs = seq(0, 1, 0.25))
print(level.quants)
DTLevel = DTLevel[order(abs(niveau - (level.quants[2])))];
joueurMin = DTLevel[1]$IDjoueur
DTLevel = DTLevel[order(abs(niveau - (level.quants[4])))];
joueurMax = DTLevel[1]$IDjoueur
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed, timeNorm=time)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMed, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,colour="blue",size=1.3,linetype="dashed")
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMin, timeNorm=time)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMin, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,colour="red",size=1.01,linetype="dashed")
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMax, timeNorm=time)
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),IDjoueur = joueurMax, estDiff = newres)
p = p + geom_path(x=DT$difficulty,y=DT$estDiff,colour="red",size=1.01,linetype="dashed")
p <- p + theme(legend.position="none")
print(p)
}
plot.objective.diff.model.curves.time <- function (DT,fit) {
DTLevel <- unique(DT,by="IDjoueur")
DTLevelOrder = DTLevel[order(abs(niveau))]
joueurMed = DTLevelOrder[1]$IDjoueur
cols <- colorRampPalette(brewer.pal(9,"Spectral"))(11)
for(i in 0:10){
sample = data.frame(difficulty=seq(0, 1, 0.05),IDjoueur=joueurMed, timeNorm=i/10)#TODO plusieurs temps
newres = predict(fit, newdata = sample, type = "response")
DT = data.table(difficulty=seq(0, 1, 0.05),
IDjoueur = joueurMed,
estDiff = newres,
timeNorm = i/10)
if(i==0){
p = ggplot(DT,aes(x=difficulty,y=estDiff)) + geom_path(alpha = 1,color=cols[i+1]) + xlim(0,1) + ylim(0,1)
} else {
p = p + geom_path(x=DT$difficulty,y=DT$estDiff, alpha = 1,size=1,color=cols[i+1])
}
}
p <- p + theme(legend.position="none")
print(p)
}
plot.objective.diff.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, obj.diff)) + geom_bin2d(binwidth=c(1,0.05))
print(p)
}
plot.objective.diff.smooth <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, obj.diff)) + geom_point(alpha=0.5) + geom_smooth()
print(p)
}
#------------------------------------------------------
#        MODELING OBJECTIVE DIFFICULTY MOTOR TASK
#------------------------------------------------------
fit.diff.motor <- model.objective.diff(DTM)
DTM <- add.diff.obj(DTM,fit.diff.motor)
DTM <- add.levels(DTM,fit.diff.motor)
DTM <- add.levels.groups(DTM)
print.objective.diff.model(DTM,fit.diff.motor)
plot.objective.diff.model.curves(DTM,fit.diff.motor,0)
plot.objective.diff.model.curves(DTM,fit.diff.motor,1)
plot.objective.diff.model.curves.time(DTM,fit.diff.motor)
plot.objective.diff.density(DTM)
plot.objective.diff.smooth(DTM)
#------------------------------------------------------
#        MODELING OBJECTIVE DIFFICULTY SENSORY TASK
#------------------------------------------------------
fit.diff.senso <- model.objective.diff(DTS)
DTS <- add.diff.obj(DTS,fit.diff.senso)
DTS <- add.levels(DTS,fit.diff.senso)
DTS <- add.levels.groups(DTS)
print.objective.diff.model(DTS,fit.diff.senso)
plot.objective.diff.model.curves(DTS,fit.diff.senso,0)
plot.objective.diff.model.curves(DTS,fit.diff.senso,1)
plot.objective.diff.model.curves.time(DTS,fit.diff.senso)
plot.objective.diff.density(DTS)
plot.objective.diff.smooth(DTS)
#------------------------------------------------------
#        MODELING OBJECTIVE DIFFICULTY LOGICAL TASK
#------------------------------------------------------
fit.diff.logic <- model.objective.diff(DTL)
DTL <- add.diff.obj(DTL,fit.diff.logic)
DTL <- add.levels(DTL,fit.diff.logic)
DTL <- add.levels.groups(DTL)
print.objective.diff.model(DTL,fit.diff.logic)
plot.objective.diff.model.curves(DTL,fit.diff.logic,0)
plot.objective.diff.model.curves(DTL,fit.diff.logic,1)
plot.objective.diff.model.curves.time(DTL,fit.diff.logic)
plot.objective.diff.density(DTL)
plot.objective.diff.smooth(DTL)
#------------------------------------------------------
#       MERGE INTO DTALL
#------------------------------------------------------
DTAll <- data.table()
DTAll <- rbind(DTAll,DTL)
DTAll <- rbind(DTAll,DTM)
DTAll <- rbind(DTAll,DTS)
#------------------------------------------------------
#        MODELING SUBJECTIVE DIFFICULTY
#------------------------------------------------------
#adding error between subjective difficulty and objective difficulty
DTAll$subj.diff.mise = 1 - DTAll$miseNorm;
DTAll$error.subj.diff.mise = DTAll$subj.diff.mise - DTAll$obj.diff
DTAll <- DTAll[,error.subj.diff.mise.mean:=mean(error.subj.diff.mise),by=IDjoueur]
#evaluating confidence as a damped over time sum of win and fails;
#each win and fail importance based on objective difficulty at that time
id = DTAll$IDjoueur; # tmp vector faster to read
cur.confidence = 0;
cur.confidence.liss = 0;
lastID <- id[1];
est.confidence <- numeric(nrow(DTAll))
est.confidence[1] = 0;
obj.diff = DTAll$obj.diff
alpha <- 0.9
i = 1
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
cur.confidence.liss = 0;
}else{
if(gagnant[i-1]){
cur.confidence = obj.diff[i-1];
}else{
cur.confidence = -(1 - obj.diff[i-1]);
}
cur.confidence.liss <- alpha * cur.confidence.liss + cur.confidence;
}
lastID <- id[i];
est.confidence[i] <- cur.confidence.liss;
}
DTAll$est.confidence = est.confidence;
DTAll$est.confidence.norm = exp(DTAll$est.confidence) / (1+exp(DTAll$est.confidence));
#update DTM DTS and DTL
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
#âge des participants
counts <- table(unique(DTM,by="IDjoueur")$age)
bpAge <- barplot(counts,
col = c("lightblue", "lightgreen"),
xlab="Age",
ylab="Distribution by participants",
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=0.5,pos=3)
#niveau d'étude
precounts <- unique(DTM,by="IDjoueur")$niveauEtude
counts <- table(factor(precounts,levels=1:9))
bpEtudes <- barplot(counts, main="Certificate levels", horiz=FALSE,
names.arg=c("None", "BEPC", "BEP/CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Certificate levels",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 15),
cex.names=0.8)
text(bpEtudes, 0, round(counts, 1),cex=0.5,pos=3)
#sexe des joueurs
counts <- table(unique(DTM,by="IDjoueur")$sexe)
bpSexe <- barplot(counts, main="Genre of players", horiz=FALSE,
names.arg=c("Female", "Male"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
col = c("lightblue", "lightgreen"),
xlab="Genre of players",
ylab="Distribution by participants",
xlim = c(0, 3),
ylim = c(0, 45),
cex.names=1)
text(bpSexe, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux vidéo
counts <- table(unique(DTM,by="IDjoueur")$play.video.games)
bpVideoGames <- barplot(counts, main="Playing Video Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Video Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 40),
cex.names=1)
text(bpVideoGames, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux de société
counts <- table(unique(DTM,by="IDjoueur")$play.board.games)
bpBoardGames <- barplot(counts, main="Playing Board Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Board Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 30),
cex.names=1)
text(bpBoardGames, 0, round(counts, 1),cex=0.8,pos=3)
#sentiment d'auto-efficacité
#counts <- table(exclude = "0", unique(DTM,by="IDjoueur")$self.eff) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
counts <- table(unique(DTM,by="IDjoueur")$self.eff)
counts <- table(exclude = "0", unique(DTM,by="IDjoueur")$self.eff) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
histSelfEff <- hist(counts,main="Self efficacy",
#names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
ylim = c(0, 15))
text(histSelfEff$mids, histSelfEff$counts, labels=histSelfEff$counts,adj=c(0.5, -0.5))
hist(exclude = "0",unique(DTM,by="IDjoueur")$self.eff,main="Self efficacy")
precounts <- as.data.table(unique(DTM,by="IDjoueur")$self.eff.sum)
counts <- table(factor(precounts,levels=0.5:10))
counts <- table(exclude = "0", unique(DTM,by="IDjoueur")$self.eff.sum) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE, beside = TRUE,
#names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
counts <- table(exclude = "0", unique(DTM,by="IDjoueur")$self.eff.sum) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
#names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
counts <- table(exclude = "0", unique(DTM,by="IDjoueur")$self.eff.sum) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
#names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
counts <- table(exclude = "0", unique(DTM,by="IDjoueur")$self.eff) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
#names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
names.arg=c("0.5", "0.55", "0.6", "0.65", "0.70"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
#names.arg=c("0.5", "0.55", "0.6", "0.65", "0.70"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
#names.arg=c("0.5", "0.55", "0.6", "0.65", "0.70"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
legend("top", legend = "From 0.5 as Medium to 1 as Strong")
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
#names.arg=c("0.5", "0.55", "0.6", "0.65", "0.70"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 10),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
legend("topright", legend = "From 0.5 as Medium to 1 as Strong")
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
#names.arg=c("0.5", "0.55", "0.6", "0.65", "0.70"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 5),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
legend("topright", legend = "From 0.5 as Medium to 1 as Strong")
counts <- table(unique(DTM,by="IDjoueur")$risk.av)
bpRiskAver <- barplot(counts, main="Risk aversion", horiz=FALSE,
names.arg=c("Highly risk loving", "Risk loving", "Risk neutral", "Slightly risk averse", "Risk averse", "Very risk averse", "Highly risk averse", "stay in bed"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Risk aversion",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 20),
cex.names=0.9)
text(bpRiskAver, 0, round(counts, 1),cex=0.8,pos=3)
#âge des participants
counts <- table(unique(DTM,by="IDjoueur")$age)
bpAge <- barplot(counts,
col = c("lightblue", "lightgreen"),
xlab="Age",
ylab="Distribution by participants",
ylim = c(0, 15))
text(bpAge, 0, round(counts, 1),cex=0.5,pos=3)
#niveau d'étude
precounts <- unique(DTM,by="IDjoueur")$niveauEtude
counts <- table(factor(precounts,levels=1:9))
bpEtudes <- barplot(counts, main="Certificate levels", horiz=FALSE,
names.arg=c("None", "BEPC", "BEP/CAP", "BAC", "BAC+2", "BAC+3", "BAC+4", "BAC+5", "BAC+8"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
xlab="Certificate levels",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 15),
cex.names=0.8)
text(bpEtudes, 0, round(counts, 1),cex=0.5,pos=3)
#sexe des joueurs
counts <- table(unique(DTM,by="IDjoueur")$sexe)
bpSexe <- barplot(counts, main="Genre of players", horiz=FALSE,
names.arg=c("Female", "Male"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
col = c("lightblue", "lightgreen"),
xlab="Genre of players",
ylab="Distribution by participants",
xlim = c(0, 3),
ylim = c(0, 45),
cex.names=1)
text(bpSexe, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux vidéo
counts <- table(unique(DTM,by="IDjoueur")$play.video.games)
bpVideoGames <- barplot(counts, main="Playing Video Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Video Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 40),
cex.names=1)
text(bpVideoGames, 0, round(counts, 1),cex=0.8,pos=3)
#joueurs de jeux de société
counts <- table(unique(DTM,by="IDjoueur")$play.board.games)
bpBoardGames <- barplot(counts, main="Playing Board Games", horiz=FALSE,
names.arg=c("Never", "Almost never", "Monthly", "Weekly", "Daily"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Playing Board Games",
ylab="Distribution by participants",
xlim = c(0, 6),
ylim = c(0, 30),
cex.names=1)
text(bpBoardGames, 0, round(counts, 1),cex=0.8,pos=3)
#sentiment d'auto-efficacité
#counts <- table(unique(DTM,by="IDjoueur")$self.eff)
counts <- table(exclude = "0", unique(DTM,by="IDjoueur")$self.eff) #ne garder que les joueurs de jeux vidéo (donc                                                                        self.eff > 0)
bpSelfEff <- barplot(counts, main="Self-efficacy in video games", horiz=FALSE,
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Self-efficacy in video games",
ylab="Distribution by video games players",
#xlim = c(0, 30),
ylim = c(0, 5),
cex.names=0.8)
text(bpSelfEff, 0, round(counts, 1),cex=0.8,pos=3)
legend("topright", legend = "From 0.5 as Medium to 1 as Strong")
#aversion au risque
counts <- table(unique(DTM,by="IDjoueur")$risk.av)
bpRiskAver <- barplot(counts, main="Risk aversion", horiz=FALSE,
names.arg=c("Highly risk loving", "Risk loving", "Risk neutral", "Slightly risk averse", "Risk averse", "Very risk averse", "Highly risk averse", "stay in bed"),
legend.text = NULL, beside = TRUE,
axes = TRUE, axisnames = TRUE,
#col = c("lightblue", "lightgreen"),
xlab="Risk aversion",
ylab="Distribution by participants",
xlim = c(0, 10),
ylim = c(0, 20),
cex.names=0.9)
text(bpRiskAver, 0, round(counts, 1),cex=0.8,pos=3)
#------------------------------------------------------------------------
#        MODELING SUBJECTIVE DIFFICULTY ON CONFIDENCE (NOT BET)
#------------------------------------------------------------------------
#adding error between subjective difficulty and objective difficulty
DTAll$subj.diff.confiance = 1 - DTAll$confianceNorm;
DTAll$error.subj.diff.confiance = DTAll$subj.diff.confiance - DTAll$obj.diff
DTAll <- DTAll[,error.subj.diff.confiance.mean:=mean(error.subj.diff.confiance),by=IDjoueur]
#evaluating confidence as a damped over time sum of win and fails;
#each win and fail importance based on objective difficulty at that time
id = DTAll$IDjoueur; # tmp vector faster to read
cur.confidence = 0;
cur.confidence.liss = 0;
lastID <- id[1];
est.confidence <- numeric(nrow(DTAll))
est.confidence[1] = 0;
obj.diff = DTAll$obj.diff
alpha <- 0.9
i = 1
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
cur.confidence.liss = 0;
}else{
if(gagnant[i-1]){
cur.confidence = obj.diff[i-1];
}else{
cur.confidence = -(1 - obj.diff[i-1]);
}
cur.confidence.liss <- alpha * cur.confidence.liss + cur.confidence;
}
lastID <- id[i];
est.confidence[i] <- cur.confidence.liss;
}
DTAll$est.confidence = est.confidence;
DTAll$est.confidence.norm = exp(DTAll$est.confidence) / (1+exp(DTAll$est.confidence));
#update DTM DTS and DTL
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
####tests
