DTL <- add.diff.obj.basic(DTL)
DTL <- add.levels(DTL,fit.diff.logic)
DTL <- add.levels.groups(DTL)
print.objective.diff.model(DTL,fit.diff.logic)
plot.objective.diff.model.curves(DTL,fit.diff.logic,0)
plot.objective.diff.model.curves(DTL,fit.diff.logic,1)
plot.objective.diff.model.curves.time(DTL,fit.diff.logic)
plot.objective.diff.density(DTL)
plot.objective.diff.smooth(DTL)
#------------------------------------------------------
#       MERGE INTO DTALL
#------------------------------------------------------
DTAll <- data.table()
DTAll <- rbind(DTAll,DTL)
DTAll <- rbind(DTAll,DTM)
DTAll <- rbind(DTAll,DTS)
#------------------------------------------------------
#        MODELING SUBJECTIVE DIFFICULTY
#------------------------------------------------------
#adding error between subjective difficulty and objective difficulty
DTAll$subj.diff.mise = 1 - DTAll$miseNorm;
DTAll$error.subj.diff.mise = DTAll$subj.diff.mise - DTAll$obj.diff
DTAll <- DTAll[,error.subj.diff.mise.mean:=mean(error.subj.diff.mise),by=IDjoueur]
#evaluating confidence as a damped over time sum of win and fails;
#each win and fail importance based on objective difficulty at that time
id = DTAll$IDjoueur; # tmp vector faster to read
cur.confidence = 0;
cur.confidence.liss = 0;
lastID <- id[1];
est.confidence <- numeric(nrow(DTAll))
est.confidence[1] = 0;
obj.diff = DTAll$obj.diff
alpha <- 0.9
i = 1
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
cur.confidence.liss = 0;
}else{
if(gagnant[i-1]){
cur.confidence = obj.diff[i-1];
}else{
cur.confidence = -(1 - obj.diff[i-1]);
}
cur.confidence.liss <- alpha * cur.confidence.liss + cur.confidence;
}
lastID <- id[i];
est.confidence[i] <- cur.confidence.liss;
}
DTAll$est.confidence = est.confidence;
DTAll$est.confidence.norm = exp(DTAll$est.confidence) / (1+exp(DTAll$est.confidence));
#update DTM DTS and DTL
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
hist(unique(DTM,by="IDjoueur")$age,breaks=30,main="Age of players")
hist(unique(DTM,by="IDjoueur")$sexe,main="Sex of players")
hist(unique(DTM,by="IDjoueur")$play.video.games,main="Playing Video Games")
hist(unique(DTM,by="IDjoueur")$play.board.games,main="Playing Board Games")
hist(unique(DTM,by="IDjoueur")$self.eff,main="Self efficacy")
hist(unique(DTM,by="IDjoueur")$risk.av,main="Risk aversion")
test.profile <- function(Y,X,title){
test <- cor.test(Y,X, method="kendall")
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
test.profile.binary <- function(A,B,title){
test <- wilcox.test(B,A,conf.int=T)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
res <- paste(res,paste("mean(A):",signif(mean(A),digit=2)))
res <- paste(res,paste("mean(B):",signif(mean(B),digit=2)))
print(paste(title,res))
}
return(res)
}
test.profile.multigroups <- function(Y,X,title){
test <- kruskal.test(Y ~ X)
res <- paste(format.pval.stars(test$p.value))
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
pvg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.video.games,"pvg.on.level.m")
pvg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.video.games,"pvg.on.level.s")
pvg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.video.games,"pvg.on.level.l")
pbg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.board.games,"pbg.on.level.m")
pbg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.board.games,"pbg.on.level.s")
pbg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.board.games,"pbg.on.level.l")
self.eff.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$self.eff,"self.eff.on.level.m")
self.eff.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$self.eff,"self.eff.on.level.s")
self.eff.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$self.eff,"self.eff.on.level.l")
risk.av.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$risk.av,"risk.av.on.level.m")
risk.av.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$risk.av,"risk.av.on.level.s")
risk.av.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$risk.av,"risk.av.on.level.l")
age.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$age,"age.on.level.m")
age.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$age,"age.on.level.s")
age.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$age,"age.on.level.l")
sexe.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$sexe,"sexe.on.level.m")
sexe.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$sexe,"sexe.on.level.s")
sexe.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$sexe,"sexe.on.level.l")
sexe.on.level.m.2 <- test.profile.binary(unique(DTM[sexe==0],by="IDjoueur")$niveau, unique(DTM[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.m.2")
sexe.on.level.s.2 <- test.profile.binary(unique(DTS[sexe==0],by="IDjoueur")$niveau, unique(DTS[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.s.2")
sexe.on.level.l.2 <- test.profile.binary(unique(DTL[sexe==0],by="IDjoueur")$niveau, unique(DTL[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.l.2")
pvg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.video.games,"pvg.on.error")
pbg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.board.games,"pbg.on.error")
niveau.group.on.error <- test.profile.multigroups(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error")
niveau.group.on.error.m <- test.profile.multigroups(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.m")
niveau.group.on.error.s <- test.profile.multigroups(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.s")
niveau.group.on.error.l <- test.profile.multigroups(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.l")
sexe.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error")
sexe.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.m")
sexe.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.s")
sexe.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.l")
sexe.on.error.2 <- test.profile.binary(unique(DTAll[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.2")
sexe.on.error.m.2 <- test.profile.binary(unique(DTM[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.m.2")
sexe.on.error.s.2 <- test.profile.binary(unique(DTS[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.s.2")
sexe.on.error.l.2 <- test.profile.binary(unique(DTL[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.l.2")
risk.av.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
self.eff.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,1/16)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
shapes =  numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
DTLoc = DTLoc[,.(mise.mean=mean(subj.diff.mise)),by=IDjoueur]
subj.diff = DTLoc$mise.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
shapes[i] = 1
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 2
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med, shapes=shapes)
p = ggplot() +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3, shape=DTPlot$shapes) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
plot.subjective.difficulty(DTAll)
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,1/16)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
shapes =  numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
DTLoc = DTLoc[,.(mise.mean=mean(subj.diff.mise)),by=IDjoueur]
subj.diff = DTLoc$mise.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
shapes[i] = 1
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 2
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med, shapes=shapes)
p = ggplot() +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3, shape=DTPlot$shapes, solid=T) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,1/16)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
shapes =  numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
DTLoc = DTLoc[,.(mise.mean=mean(subj.diff.mise)),by=IDjoueur]
subj.diff = DTLoc$mise.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
shapes[i] = 1
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
#print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 2
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med, shapes=shapes)
p = ggplot() +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3, shape=DTPlot$shapes, solid=T) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
plot.subjective.difficulty(DTAll)
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,1/16)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
shapes =  numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
DTLoc = DTLoc[,.(mise.mean=mean(subj.diff.mise)),by=IDjoueur]
subj.diff = DTLoc$mise.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
shapes[i] = 1
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
#print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 2
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med, shapes=shapes)
p = ggplot() +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3, shape=DTPlot$shapes, solid=T) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
plot.subjective.difficulty(DTAll)
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,1/16)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
shapes =  numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
DTLoc = DTLoc[,.(mise.mean=mean(subj.diff.mise)),by=IDjoueur]
subj.diff = DTLoc$mise.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
shapes[i] = 16
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
#print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 17
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med, shapes=shapes)
p = ggplot() +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3, shape=DTPlot$shapes) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
plot.subjective.difficulty(DTAll)
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,1/16)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
shapes =  numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
DTLoc = DTLoc[,.(mise.mean=mean(subj.diff.mise)),by=IDjoueur]
subj.diff = DTLoc$mise.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
shapes[i] = 16
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
#print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
if(test.res$p.value < 0.05)
shapes[i] = 24
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med, shapes=shapes)
p = ggplot() +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3, shape=DTPlot$shapes) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
plot.subjective.difficulty(DTAll)
