data <- read.xlsx(file,sheetIndex=1,header=TRUE)
file = "./log_questionnaire_XP_WEEK1ANDWEEK2.xlsx"
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
data.sexeMasculin = data[which(data$Sexe=="Masculin"),]
data.sexeFeminin = data[which(data$Sexe=="Feminin"),]
dataSexe <- gsub("Feminin", 1, data)
dataSexe
dataSexe <- gsub("Feminin", "1", data)
dataSexe
data2 <- data.frame(data$Sexe)
View(data2)
dataSexe <- gsub("Feminin", "1", data2)
dataSexe
dataSexe <- gsub("Feminin", "1", data2, ignore.case=81)
dataSexe
dataSexe <- gsub("Feminin", "1", data2, ignore.case="NA")
dataSexe
dataSexe <- gsub("Feminin", "1", data2, ignore.case=NA)
dataSexe
View(data2)
dataSexe1 <- gsub("Masculin", "0", data2, ignore.case=NA)
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
data2 <- data.frame(data$Sexe)
dataSexe <- gsub("Feminin", "1", data2, ignore.case=NA)
dataSexe <- gsub("Masculin", "0", data2, ignore.case=NA)
dataSexe
gsub("Feminin", "1", data2, ignore.case=NA)
dataX <- sapply(data2, clean)
clean <- function(ttt){
as.numeric( gsub('Feminin', '1', ttt))
}
dataX <- sapply(data2, clean)
View(data2)
clean <- function(ttt){
as.numeric( gsub('Feminin', '1', ttt))
as.numeric( gsub('Masculin', '0', ttt))
}
dataX <- sapply(data2, clean)
clean <- function(ttt){
as.numeric( gsub('Feminin', '1', ttt, gsub('Masculin', '0', ttt)))
}
dataX <- sapply(data2, clean)
clean <- function(ttt){
as.numeric( gsub('Feminin', '1', gsub('Masculin', '0', ttt)))
}
dataX <- sapply(data2, clean)
CountMasculin <- sort(data$Sexe=="Masculin")
CountMasculin
View(dataX)
CountMasculin <- sort(data2=="0")
CountMasculin
CountMasculin <- as.numeric(sort(data2=="0"))
CountMasculin
CountMasculin <- sum(numbers == 0)
CountMasculin <- sum(data2 == 0)
CountMasculin
dataX <- sapply(data2, clean)
CountMasculin <- as.numeric(sort(data2=="0"))
table(CountMasculin)
TotalMasculin <- table(CountMasculin)
dataX <- sapply(data2, clean)
CountMasculin <- as.numeric(sort(data2=="0"))
TotalMasculin <- table(CountMasculin)
CountFeminin <- as.numeric(sort(data2=="1"))
TotalFeminin <- table(CountFeminin)
dataX <- sapply(data2, clean)
CountMasculin <- as.numeric(sort(data2==0))
TotalMasculin <- table(CountMasculin)
dataX <- sapply(data2, clean)
CountMasculin <- as.numeric(sort(data2==0))
TotalMasculin <- table(CountMasculin)
CountFeminin <- as.numeric(sort(data2==1))
TotalFeminin <- table(CountFeminin)
dataX <- sapply(data2, clean)
CountMasculin <- as.numeric(sort(dataX==0))
TotalMasculin <- table(CountMasculin)
CountFeminin <- as.numeric(sort(dataX==1))
TotalFeminin <- table(CountFeminin)
TotalFeminin
dataSexe <- sapply(data2, clean)
CountMasculin <- as.numeric(sort(dataSexe==0))
TotalMasculin <- table(CountMasculin)
CountFeminin <- as.numeric(sort(dataSexe==1))
TotalFeminin <- table(CountFeminin)
CountFeminin <- as.numeric(sort(dataSexe==1))
TotalFemininPuisMasculin <- table(CountFeminin)
CountMasculin
TotalMasculin <- table(0)
TotalMasculin <- table(dataSexe==0)
TotalFeminin <- table(dataSexe==1)
barplot(TotalFeminin)
barplot(TotalMasculin)
barplot(TotalMasculin, xlab="Sexe",  ylab="Nombre de participants")
barplot(TotalMasculin, names.arg="Feminin", xlab="Sexe",  ylab="Nombre de participants")
barplot(TotalMasculin, names.arg="Feminin", names.arg="Masculin", xlab="Sexe",  ylab="Nombre de participants")
barplot(TotalMasculin, names.arg=dataSexe("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants")
barplot(TotalMasculin, names.arg=("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants")
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants")
barplot(data.sexeFeminin, data.sexeMasculin, xlab="feminin",  ylab="masculin",legend = rownames(counts))
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", legend = rownames(counts))
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", legend = rownames(TotalMasculin))
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", legend = "test")
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text("test"))
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test"))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test"))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test"))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test",pos=3))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test",cex=1, pos=3))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test",cex=1, pos=3))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test",cex=2, pos=3))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,"test",cex=2, pos=3))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,CountMasculin,cex=2, pos=3))
TotalMasculin <- sum(CountMasculin)
TotalFeminin <- sum(CountFeminin)
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,round(TotalFeminin, 1),cex=2, pos=3))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,round(TotalFeminin, 1), pos=3))
bp <- barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(round(TotalFeminin, 1), pos=3))
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
barplot(TotalMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
file = "./log_questionnaire_XP_WEEK1ANDWEEK2.xlsx"
Unaccent <- function(text) {
text <- gsub("['`^~\"]", " ", text)
text <- iconv(text, to="ASCII//TRANSLIT//IGNORE")
text <- gsub("['`^~\"]", "", text)
return(text)
}
TrueOrFalse <- function(Sexe) {
Sexe <- gsub("Feminin", 1, Sexe)
Sexe <- gsub("Masculin", 0, Sexe)
return(Sexe)
}
clean <- function(ttt){
as.numeric( gsub('Feminin', '1', gsub('Masculin', '0', ttt)))
}
data <- read.xlsx(file,sheetIndex=1,header=TRUE)
data2 <- data.frame(data$Sexe)
data.sexeMasculin = data[which(data$Sexe=="Masculin"),]
data.sexeFeminin = data[which(data$Sexe=="Feminin"),]
CountMasculin <- sort(data$Sexe=="Masculin")
TotalMasculin <- sum(CountMasculin)
CountFeminin <- sort(data$Sexe=="Feminin")
TotalFeminin <- sum(CountFeminin)
dataSexe <- sapply(data2, clean)
CumulMasculin <- table(dataSexe==0)
CumulFeminin <- table(dataSexe==1)
barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,round(TotalFeminin, 1), pos=3))
barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(0,round(TotalFeminin, 1), pos=3))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,round(TotalFeminin, 1), pos=3))
barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60), text(bp, 0,round(TotalFeminin, 1), pos=3))
bp
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0,round(TotalFeminin, 1), pos=3))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(TotalFeminin, 1), pos=3))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(TotalFeminin, TotalMasculin, 2), pos=3))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(TotalFeminin, TotalMasculin), pos=3))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CountMasculin, 1), pos=3))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CountMasculin, 1), pos=3))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CountMasculin, 1), pos=3))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(TotalMasculin, 1), pos=3))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CumulMasculin, 1), pos=3))
bp <- barplot(CumulMasculin, names.arg=c("Feminin", "Masculin"), xlab="Sexe",  ylab="Nombre de participants", ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CumulMasculin, 1), cex=1, pos=3))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CumulMasculin, 1), cex=2, pos=3))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "mistyrose"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("blue", "green"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Sexe",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CumulMasculin, 1), cex=2, pos=3))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60))
bp <- barplot(CumulMasculin,
names.arg=c("Feminin", "Masculin"),
col = c("lightblue", "lightgreen"),
xlab="Genre",
ylab="Nombre de participants",
ylim = c(0, 60),
text(bp, 0, round(CumulMasculin, 1), cex=2, pos=3))
#setwd("C:/Users/Thomas Constant/Source/Repos/sorcerer/xp")
#install.packages("rmarkdown")
#setwd("C:/Users/Thomas Constant/Source/Repos/sorcerer/xp")
#install.packages("rmarkdown")
#install.packages("data.table")
#install.packages("ggplot2")
require(data.table)
require(ggplot2)
#----------------------------------- configuration
useMotrice = TRUE
useSensorielle = TRUE
useLogique = TRUE
drawLogit = TRUE
removeTenFirst = FALSE
removeOutliers = TRUE
plotDiffCurves = TRUE
plotDiffCurvesOutliers = TRUE
plotLinModels = FALSE
echoModels = TRUE
file = "./log_thomas_XPFINALES_WEEK2.txt"
#file = "./log_thomas_XPFINALES_WEEK1.txt"
#file = "./log_thomas_XPFINALES_WEEK1ANDWEEK2.txt"
#file = "./log_thomas_correct_motrice.txt"
#---------------------------------- fonctions
addVariables <- function(DTLoc,trace = FALSE,titre="noTitle"){
#echec au lieu de succes pour diff c'est mieux
DTLoc$perdant <- 1-DTLoc$gagnant;
#normalisation de la mise
DTLoc$miseNorm <- DTLoc$mise / 7;
#difficulte évaluée par le joueur
DTLoc$evalDiff <- 1 - DTLoc$miseNorm;
#On ajoute une colonne de la difficulte estimee, a partir d'un
#logit de la difficulte supposée sur l'échec constaté
mylogit <- glm(perdant ~ difficulty, data = DTLoc, family = "binomial"(link = "logit"))
print(summary(mylogit));
sample = data.frame(difficulty=DTLoc$difficulty);
DTLoc$estDiff =  predict(mylogit, newdata = sample, type = "response");
if(trace){
sample = data.frame(difficulty=seq(0, 1, 0.05))
newres = predict(mylogit, newdata = sample, type = "response")
plot(DTLoc$difficulty, DTLoc$perdant, main=titre, xlab="Difficulté hypothétique",  ylab="Difficulté objective (estimée)",  col=rgb(0,100,0,100,maxColorValue=255))
points(data.frame(sample,newres), type="o")
}
#erreur d'estimation de la difficulte par le joueur (exces de confiance ?)
DTLoc$erreurdiff <- DTLoc$evalDiff - DTLoc$estDiff;
#nombre de fail consecutifs
DTNbFail <- DTLoc[1,]
nbFailCpt = 0;#DTLoc[1,perdant]
DTNbFail <- cbind(DTNbFail,data.table(nbFail=nbFailCpt))
lastID <- DTLoc[1]$IDjoueur;
for(i in 2:nrow(DTLoc)){
if(DTLoc[i]$IDjoueur != lastID){
nbFailCpt = 0;
}else{
if(DTLoc[i-1,gagnant] == 0){
nbFailCpt = nbFailCpt+1;
}else{
nbFailCpt = 0;
}
}
lastID = DTLoc[i]$IDjoueur;
#if(nbFailCpt > 5)
#  nbFailCpt = 5
DTNbFail <- rbind(DTNbFail,cbind(DTLoc[i,],data.table(nbFail=nbFailCpt)))
}
DTLoc <- DTNbFail
#nombre de wins consecutifs
DTNbWin <- DTLoc[1,]
nbWinCpt = 0;#DTLoc[1,gagnant]
DTNbWin <- cbind(DTNbWin,data.table(nbWin=nbWinCpt))
lastID <- DTLoc[1]$IDjoueur;
for(i in 2:nrow(DTLoc)){
if(DTLoc[i]$IDjoueur != lastID){
nbWinCpt = 0;
}else{
if(DTLoc[i-1,gagnant] == 1){
nbWinCpt = nbWinCpt+1;
}else{
nbWinCpt = 0;
}
}
lastID = DTLoc[i]$IDjoueur;
#if(nbWinCpt > 5)
#  nbWinCpt = 5
DTNbWin <- rbind(DTNbWin,cbind(DTLoc[i,],data.table(nbWin=nbWinCpt)))
}
DTLoc <- DTNbWin
#On calcule une somme lissée des echecs et succes
DTResLisse <- DTLoc[1,]
resLisseCur <- 0
DTResLisse <- cbind(DTResLisse,data.table(resLisse=resLisseCur))
lastID <- DTLoc[1]$IDjoueur;
alpha <- 0.6;
for(i in 2:nrow(DTLoc)){
if(DTLoc[i]$IDjoueur != lastID){
resLisseCur = 0;
}else{
res <- DTLoc[i-1,gagnant]*2-1
resLisseCur <- alpha * resLisseCur + res;
}
lastID = DTLoc[i]$IDjoueur;
DTResLisse <- rbind(DTResLisse,cbind(DTLoc[i,],data.table(resLisse=resLisseCur)))
}
DTLoc <- DTResLisse
DTLoc$resLisseBase <- DTLoc$resLisse;
DTLoc$resLisse = exp(DTLoc$resLisseBase) / (1+exp(DTLoc$resLisseBase));
return (DTLoc)
}
removeHeadTail <- function(DTLoc,nb,bHead=TRUE){
#garder que les 20 derniers tours de chaque personne
DTLoc <- as.data.table(DTLoc)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DTLoc <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DTLoc <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DTLoc)
}
lienErreurEvalDiffResLisse <- function(DTLoc,titre="title"){
plot(x=DTLoc$resLisse, y=DTLoc$erreurdiff, main=titre, xlab="Indice de confiance lissé", ylab="Erreur d'estimation de la difficulté")
# TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbFail]
# TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbFail]
# TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbFail]
# setkey(TMP,nbFail)
# setkey(TMP2,nbFail)
# setkey(TMP3,nbFail)
# points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
# points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
# points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova res lisse");
fit <- aov(erreurdiff ~ resLisse, data=DTLoc);
if(echoModels)
print(summary(fit));
print("Regression linéaire");
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$resLisse);
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl));
return(fit);
}
lienErreurEvalDiffFailsRepetes <- function(DTLoc,fails = TRUE,titre="title"){
if(fails){
plot(x=DTLoc$nbFail, y=DTLoc$erreurdiff, main=titre, xlab="Nombre d'échecs consécutifs (nbFail)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbFail]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbFail]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbFail]
setkey(TMP,nbFail)
setkey(TMP2,nbFail)
setkey(TMP3,nbFail)
points(y=TMP$meanDiffEstimated, x=TMP$nbFail, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbFail, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbFail, col="blue", type="o")
print("Anova")
fit <- aov(erreurdiff ~ nbFail, data=DTLoc)
if(echoModels)
print(summary(fit))
print("Regression linéaire")
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$nbFail)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="green")
if(echoModels)
print(summary(fitl))
}
else{
plot(x=DTLoc$nbWin, y=DTLoc$erreurdiff, main=titre, xlab="Nombre de succès consécutifs (nbWin)", ylab="Erreur d'estimation de la difficulté")
TMP <- DTLoc[, .(meanDiffEstimated=mean(erreurdiff)),by=nbWin]
TMP2 <- DTLoc[, .(varUpDiffEstimated=mean(erreurdiff)+2*sd(erreurdiff)),by=nbWin]
TMP3 <- DTLoc[, .(varDownDiffEstimated=mean(erreurdiff)-2*sd(erreurdiff)),by=nbWin]
setkey(TMP,nbWin)
setkey(TMP2,nbWin)
setkey(TMP3,nbWin)
points(y=TMP$meanDiffEstimated, x=TMP$nbWin, col="red", type="o")
points(y=TMP2$varUpDiffEstimated, x=TMP2$nbWin, col="blue", type="o")
points(y=TMP3$varDownDiffEstimated, x=TMP3$nbWin, col="blue", type="o")
#ggplot(data=DTLoc, aes(factor(DTLoc$nbWin),erreurdiff)) + geom_boxplot()
print("Anova")
fit <- aov(erreurdiff ~ nbWin, data=DTLoc)
if(echoModels)
print(summary(fit))
fitl <- glm(DTLoc$erreurdiff ~ DTLoc$nbWin)
abline(a =fitl$coefficients[1], b=fitl$coefficients[2], col="purple")
print("Regression linéaire")
if(echoModels)
print(summary(fitl))
}
return(fit)
}
#plot les courbes de diff
plotCurves <- function (numStep,diffSubj,diffObj,confiance,id,nbWin,nbFail,error){
#print(diffSubj);
df <- data.frame(ns=numStep,do=diffObj,ds=diffSubj,c=confiance)
pl <- ggplot(df,aes(x=ns,y=diffObj)) + ggtitle(id[1]);
pl <- pl + geom_point(size=1);
pl <- pl + geom_line(size=0.5,colour="#992299");
pl <- pl + geom_line(aes(x=ns,y=diffSubj),size=0.5,colour="#992222");
pl <- pl + geom_line(aes(x=ns,y=confiance),size=0.5,colour="#229922");
pl <- pl + geom_line(aes(x=ns,y=error),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbWin),size=0.5,colour="#555555");
#pl <- pl + geom_line(aes(x=ns,y=nbFail),size=0.5,colour="#000000");
#pl <- pl + coord_fixed(ratio = 20);
print(pl)
}
description <- function(DTLoc){
p <- ggplot(DTLoc, aes(factor(cyl), mpg))
p + geom_boxplot()
print(p)
}
echoPValue <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else{
return(paste(pv,":("));
}
return("");
}
#---------------------------------- traitement
#Prepa plot
#attach(mtcars)
#par(mfrow=c(5,3))
#on recup les données
csv.data <- read.csv(file,header=TRUE,sep=";")
#difficulte logique
DTL <- csv.data[which(csv.data$nom_du_jeu=="Logique2"),]
DTL <- as.data.table(DTL)
DTL <- addVariables(DTL,drawLogit,titre="Jeu de déduction (difficulté logique)")
View(DTL)
mylogit <- glm(perdant ~ estDiff * nbFail, data = DTL, family = "binomial"(link = "logit"))
help glm()
help(glm)
summary(mylogit)
mylogit <- glm(perdant ~ estDiff + nbFail, data = DTL, family = "binomial"(link = "logit"))
summary(mylogit)
mylogit <- glm(mise ~ estDiff * nbFail, data = DTL, family = "binomial"(link = "logit"))
summary(mylogit)
mylogit <- glm(miseNorm ~ estDiff * nbFail, data = DTL, family = "binomial"(link = "logit"))
mylogit <- glm(mise ~ estDiff * nbFail, data = DTL, family = "binomial"(link = "logit"))
mylogit <- glm(mise ~ estDiff * nbFail, data = DTL)
summary(mylogit)
mylogit <- glm(mise ~ estDiff + nbFail, data = DTL)
summary(mylogit)
mylogit <- glm(mise ~ estDiff + nbFail + nbWin, data = DTL)
summary(mylogit)
help(lag)
help(DT)
