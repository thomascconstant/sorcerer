DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_sauves)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
DTDesc = data.table();
DTDescM = data.table();
DTDescS = data.table();
DTDescL = data.table();
DTDescM = DTM[,.(type="Moteur",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensorielle",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",totalMoutons=max(moutons_tues)),by=IDjoueur]
DTDesc = DTDescM;
DTDesc = rbind(DTDesc,DTDescS);
DTDesc = rbind(DTDesc,DTDescL);
p <- ggplot(DTDesc, aes(type,totalMoutons))
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
outliersMMiseM <- boxplot.stats(DTDescM$totalMoutons)$out
outliersMMiseS <- boxplot.stats(DTDescS$totalMoutons)$out
outliersMMiseL <- boxplot.stats(DTDescL$totalMoutons)$out
idOutliersM = DTDescM[totalMoutons %in% outliersMMiseM]$IDjoueur
idOutliersS = DTDescS[totalMoutons %in% outliersMMiseS]$IDjoueur
idOutliersL = DTDescL[totalMoutons %in% outliersMMiseL]$IDjoueur
print(paste("Id out motrice moutons:",toString(idOutliersM)))
print(paste("Id out senso moutons:",toString(idOutliersS)))
print(paste("Id out logique moutons:",toString(idOutliersL)))
if(plotDiffCurvesOutliers){
if(!length(idOutliersM )==0)
void <- DTM[IDjoueur %in% idOutliersM,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
if(!length(idOutliersS) == 0)
void <- DTS[IDjoueur %in% idOutliersS,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
if(!length(idOutliersL) == 0)
void <- DTL[IDjoueur %in% idOutliersL,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurvesOutliers == FALSE")
}
if(removeOutliers){
DTM <- DTM[!IDjoueur %in% idOutliersM]
DTS <- DTS[!IDjoueur %in% idOutliersS]
DTL <- DTL[!IDjoueur %in% idOutliersL]
}else{
print("NOT REMOVING OUTLIERS (removeOutliers == FALSE)")
}
#creation de la table totale
DT <- data.table()
if(useLogique) DT <- rbind(DT,DTL)
if(useMotrice) DT <- rbind(DT,DTM)
if(useSensorielle) DT <- rbind(DT,DTS)
#supprimer le debut ou la fin
if(removeTenFirst)
DT <- removeHeadTail(DT,10);
# DTLoc1 = DTL;
#
# res <- numeric(11)
# nb <- numeric(11)
# i = 0;
# while(i<=10){
#   diff=i/10;
#   print(diff)
#   DTLoc = DTLoc1[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 5)]
#   if(nrow(DTLoc) > 20){
#     plot(x=DTLoc$resLisse, y=DTLoc$erreurDiffConfiance, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
#     fit <- glm(DTLoc$erreurDiffConfiance ~ DTLoc$resLisse);
#     DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0)
#     fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
#     sample = data.frame(resLisse=seq(0, 1, 0.05))
#     newres = predict(fitg, newdata = sample, type = "response")
#     points(x=sample$resLisse,y=newres,col="red")
#     print(summary(fitg))
#     abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#     res[i+1] = fit$coefficients[2];
#     nb[i+1] = nrow(DTLoc);
#   }else{
#     res[i+1] = NA;
#   }
#
#   i=i+1
# }
# print(nb)
# print(res)
analyseParDifficute <- function(DTParam){
res <- numeric(11)
nb <- numeric(11)
nb2 <- numeric(11)
pv1 <- numeric(11)
pv2 <- numeric(11)
dObj <- numeric(11)
i = 0;
while(i<=10){
diff=i/10;
print(diff)
DTLoc = DTParam[which(difficulty >= diff-0.01 & difficulty <= diff+0.01  & action_de_jeu > 2)]
DTLoc$miseBin = ifelse(DTLoc$mise>4, 1, 0);
# DTLoc[,miseBin:= -1];
# DTLoc[mise > 4,miseBin := 1];
# DTLoc[mise < 4,miseBin := 0];
# DTLoc = DTLoc[miseBin != -1];
#
if(nrow(DTLoc) > 30){
plot(x=DTLoc$resLisse, y=DTLoc$miseNorm, main=paste(diff,signif(unique(DTLoc$estDiff),digits=2)))
fit <- glm(DTLoc$miseNorm ~ DTLoc$resLisse);
fitg <- glm(miseBin ~ resLisse, data = DTLoc, family = "binomial"(link = "logit"))
sample = data.frame(resLisse=seq(0, 1, 0.05))
newres = predict(fitg, newdata = sample, type = "response")
points(x=sample$resLisse,y=newres,col="red")
print(summary(fitg))
abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
res[i+1] = signif(fit$coefficients[2],digits=2);
#print(unlist(summary(fit)));
pv1[i+1] = echoPValue(unlist(summary(fitg))$coefficients7)
pv2[i+1] = echoPValue(unlist(summary(fitg))$coefficients8)
}else{
res[i+1] = NA;
pv1[i+1] = NA;
pv2[i+1] = NA;
}
nb[i+1] = nrow(DTLoc);
nb2[i+1] = length(unique(DTLoc$IDjoueur))
dObj[i+1] = DTLoc$estDiff[1];
i=i+1
}
resTable = data.table(NbObservations = nb);
#  resTable[,NbObservations := nb];
resTable[,DiffObj := dObj];
resTable[,NbJoueurs := nb2];
resTable[,Coeffs := res];
resTable[,Interecept := pv1];
resTable[,resLisse := pv2];
return(resTable)
}
print("Logique")
resLog = analyseParDifficute(DTL);
print("Motrice")
resMot = analyseParDifficute(DTM);
print("Senso")
resSenso = analyseParDifficute(DTS);
#
# DTS2 = DTS[which(action_de_jeu > 10)]
# hist(DTS2$difficulty)
# DTS2 = DTS[which(difficulty == 0.3 & action_de_jeu > 10)]
# hist(DTS2$resLisse)
# hist(DTS2$erreurDiffConfiance)
# shapiro.test(DTS2$resLisse)
# shapiro.test(DTS2$mise)
# qqnorm(DTS2$resLisse)
# qqnorm(DTS2$mise)
#
# lienErreurEvalDiffFailsRepetes(DTS2)
# lienErreurEvalDiffFailsRepetes(DTS2,FALSE)
#
# DTLoc = DTS2;
# plot(x=DTLoc$resLisse, y=DTLoc$mise)
# fit <- glm(DTLoc$mise ~ DTLoc$resLisse);
# abline(a =fit$coefficients[1], b=fit$coefficients[2], col="green")
#
# fit <- lm(mise ~ resLisse, data=DTS2);
# plot(fit)
# summary(fit);
print("Logique")
print(resLog);
print("Motrice")
print(resMot);
print("Senso")
print(resSenso );
#lien erreur d'eval diff (exces confiance ?) et fails ou succes répétés
fit <- lienErreurEvalDiffFailsRepetes(DT,TRUE,"Tous les jeux")
pvalDTFails = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTFails);
fit <- lienErreurEvalDiffFailsRepetes(DT,FALSE,"Tous les jeux")
pvalDTWins = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTWins);
fit <- lienErreurEvalDiffResLisse(DT,"Tous les jeux")
pvalDTLisse = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLisse);
fit <- lienErreurEvalDiffFailsRepetes(DTL,TRUE,"Difficulté logique")
pvalDTLFails = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLFails);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffFailsRepetes(DTL,FALSE,"Difficulté logique")
pvalDTLWins = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLWins);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffResLisse(DTL,"Difficulté logique")
pvalDTLLisse = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTLLisse);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
if(plotDiffCurves){
void <- DTL[,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurves == FALSE")
}
fit <- lienErreurEvalDiffFailsRepetes(DTM,TRUE,"Difficulté motrice")
pvalDTMFails = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTMFails);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffFailsRepetes(DTM,FALSE,"Difficulté motrice")
pvalDTMWins = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTMWins);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffResLisse(DTM,"Difficulté motrice")
pvalDTMLisse = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTMLisse);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
if(plotDiffCurves){
void <- DTM[,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurves == FALSE")
}
fit <- lienErreurEvalDiffFailsRepetes(DTS,TRUE,"Difficulté sensorielle")
pvalDTSFails = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTSFails);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffFailsRepetes(DTS,FALSE,"Difficulté sensorielle")
pvalDTSWins = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTSWins);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
fit <- lienErreurEvalDiffResLisse(DTS,"Difficulté sensorielle")
pvalDTSLisse = unlist(summary(fit))["Pr(>F)1"]
print("pvalue anova")
echoPValue(pvalDTSLisse);
if(plotLinModels){
plot(fit);
}else{
print("plotLinModels == FALSE")
}
if(plotDiffCurves){
void <- DTS[,{plotCurves(action_de_jeu,evalDiff,estDiff,resLisse,IDjoueur,nbWin,nbFail,erreurDiffConfiance,miseNorm);NULL},by=.(IDjoueur)]
}else{
print("plotDiffCurves == FALSE")
}
DT2 <- DT
DT2[, lag_mise:=c(NA,mise[1:(length(mise)-1)]), by=c("difficulty", "nom_du_jeu", "IDjoueur")]
DT2[, passage:=1:.N, by=c("difficulty", "nom_du_jeu", "IDjoueur")]
install.packages(lme4)
library(lme4)
install.packages(Matrix)
install.packages("Matrix")
library(lme4) #nécessite package Matrix
niveauxJoueurs <- lmer(DT2$gagnant ~ DT2$nom_du_jeu + (1|DT2$IDjoueur),
data = Multi, family = binomial)
niveauxJoueurs <- glmer(DT2$gagnant ~ DT2$nom_du_jeu + (1|DT2$IDjoueur),
data = Multi, family = binomial)
niveauxJoueurs <- glmer(DT2$gagnant ~ DT2$nom_du_jeu + (1|DT2$IDjoueur),
family = binomial)
summar(niveauxJoueurs)
summary(niveauxJoueurs)
fixef(niveauxJoueurs)
ranef(niveauxJoueurs)
niveauxJoueurs <- glmer(cbind(DT2$gagnant, DT2$perdant) ~ DT2$nom_du_jeu + (1|DT2$IDjoueur),
family = binomial)
summary(niveauxJoueurs)
fixef(niveauxJoueurs)
ranef(niveauxJoueurs)
niveauxJoueurs <- lmer(cbind(DT2$gagnant, DT2$perdant) ~ DT2$nom_du_jeu + (1|DT2$IDjoueur),
family = binomial)
summary(niveauxJoueurs)
fixef(niveauxJoueurs)
ranef(niveauxJoueurs)
niveauxJoueurs <- glmer(cbind(DT2$gagnant, DT2$perdant) ~ DT2$nom_du_jeu[Logique] + (1|DT2$IDjoueur),
family = binomial)
niveauxJoueurs <- glmer(cbind(DT2$gagnant, DT2$perdant) ~ DT2$nom_du_jeu + (1|DT2$IDjoueur),
family = binomial)
summary(niveauxJoueurs)
fixef(niveauxJoueurs)
niveauxJoueurs <- glmer(cbind(DT2$gagnant, DT2$perdant) ~ DT2$nom_du_jeu + (DT2$nom_du_jeu|DT2$IDjoueur),
family = binomial)
summary(niveauxJoueurs)
fixef(niveauxJoueurs)
ranef(niveauxJoueurs)
ranef(niveauxJoueurs, condVar = TRUE) #permet d'observer les différences de niveau
niveauxJoueurs <- glmer(cbind(DT2$gagnant, DT2$perdant) ~ DT2$nom_du_jeu + (DT2$nom_du_jeu|DT2$IDjoueur),
data = DT2, family = binomial)
summary(niveauxJoueurs)
fixef(niveauxJoueurs)
ranef(niveauxJoueurs, condVar = TRUE) #permet d'observer les différences de niveau
niveauxJoueurs <- glmer(cbind(gagnant, perdant) ~ nom_du_jeu + (nom_du_jeu|IDjoueur),
data = DT2[Logique2], family = binomial)
niveauxJoueurs <- glmer(cbind(gagnant, perdant) ~ nom_du_jeu + (nom_du_jeu|IDjoueur),
data = DT2[nom_du_jeu=Logique2], family = binomial)
test <- DT2[nom_du_jeu:=Logique2]
test <- DT2[nom_du_jeu=Logique2]
test <- DT2[DT2$Logique2]
return("");
test
summary(test)
test
View(test)
test <- DT2$Logique2
test <- DT2["Logique2"]
test <- DT2["nom_du_jeu"]
test
test <- DT2[nom_du_jeu == "Logique2"]
test <- DT2[nom_du_jeu == "Logique2",]
View(DT2)
test <- DT2[DT2$nom_du_jeu == "Logique2",]
View(test)
logique <- DT2[DT2$nom_du_jeu == "Logique2",]
niveauxJoueurs <- glmer(cbind(gagnant, perdant) ~ nom_du_jeu + (nom_du_jeu|IDjoueur),
data = logique, family = binomial)
summary(niveauxJoueurs)
View(DT2)
niveauxJoueurs <- glmer(cbind(gagnant, perdant) ~ 1 + (1|IDjoueur),
data = logique, family = binomial)
summary(niveauxJoueurs)
ranef(niveauxJoueurs, condVar = TRUE) #permet d'observer les différences de niveau
senso <- DT2[DT2$nom_du_jeu == "Sensoriel",]
motrice <- DT2[DT2$nom_du_jeu == "Motrice",]
DT2maxMoutons <- pmax(DT2$moutons_sauves:DT2$IDjoueur, na.rm = FALSE)
View(DTDescM)
niveauxJoueurs <- glmer(moutons_sauves ~ 1 + (1|IDjoueur),
data = logique, family = binomial)
motrice = DTM[,.(type="Moteur",totalMoutonsSauves=max(moutons_sauves),totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
View(DTM)
View(motrice)
motriceNiveauJoueur = DTM[,.(type="Moteur",totalMoutonsSauves=max(moutons_sauves),totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
motriceNiveauJoueur = DTM[,.(type="Moteur",totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
motriceNiveauxJoueurs = data.table();
require(data.table)
require(ggplot2)
motriceNiveauxJoueurs = data.table();
motriceNiveauxJoueurs = DTM[,.(type="Moteur",totalMoutonsSauves=max(moutons_sauves),totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
View(motriceNiveauxJoueurs)
motriceNiveauxJoueurs = data.table();
motriceNiveauxJoueurs = DTM[,.(type="Moteur",totalMoutonsSauves=max(moutons_sauves),totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
sensoNiveauxJoueurs = data.table();
sensoNiveauxJoueurs = DTM[,.(type="Sensorielle",totalMoutonsSauves=max(moutons_sauves),totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
logiqueNiveauxJoueurs = data.table();
logiqueNiveauxJoueurs = DTM[,.(type="Logique",totalMoutonsSauves=max(moutons_sauves),totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
niveauxJoueurs <- glmer(moutons_sauves ~ 1 + (1|IDjoueur),
data = sensoNiveauxJoueurs, family = binomial)
niveauxJoueurs <- glmer(cbind(moutons_sauves,moutons_tues) ~ 1 + (1|IDjoueur),
data = sensoNiveauxJoueurs, family = binomial)
niveauxJoueurs <- glmer(cbind(totalMoutonsSauves,totalMoutonsTues) ~ 1 + (1|IDjoueur),
data = sensoNiveauxJoueurs, family = binomial)
summary(niveauxJoueurs)
fixef(niveauxJoueurs)
ranef(niveauxJoueurs, condVar = TRUE) #permet d'observer les différences de niveau
niveauxJoueursLogique <- glmer(cbind(totalMoutonsSauves,totalMoutonsTues) ~ 1 + (1|IDjoueur),
data = logiqueNiveauxJoueurs, family = binomial)
ranef(niveauxJoueursLogique, condVar = TRUE) #permet d'observer les différences de niveau
niveauxJoueursMotrice <- glmer(cbind(totalMoutonsSauves,totalMoutonsTues) ~ 1 + (1|IDjoueur),
data = motriceNiveauxJoueurs, family = binomial)
ranef(niveauxJoueursMotrice, condVar = TRUE) #permet d'observer les différences de niveau
motriceNiveauxJoueursWF = data.table();
motriceNiveauxJoueursWF = DTM[,.(type="Moteur",totalWin=sum(moutons_sauves),totalFail=sum(moutons_tues)),by=IDjoueur]
View(motriceNiveauxJoueursWF)
motriceNiveauxJoueursWF = DTM[,.(type="Moteur",totalWin=sum(gagnant),totalFail=sum(perdant)),by=IDjoueur]
sensoNiveauxJoueursWF = data.table();
sensoNiveauxJoueursWF = DTM[,.(type="Sensorielle",totalWin=sum(gagnant),totalFail=sum(perdant)),by=IDjoueur]
logiqueNiveauxJoueursWF = data.table();
logiqueNiveauxJoueursWF = DTM[,.(type="Logique",totalWin=sum(gagnant),totalFail=sum(perdant)),by=IDjoueur]
View(logiqueNiveauxJoueursWF)
niveauxJoueursSensoWF <- glmer(cbind(totalMoutonsSauves,totalMoutonsTues) ~ 1 + (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
niveauxJoueursSensoWF <- glmer(cbind(gagnant,perdant) ~ 1 + (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
niveauxJoueursSensoWF <- glmer(cbind(totalWin,totalFail) ~ 1 + (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
summary(niveauxJoueursSensoWF)
ranef(niveauxJoueursSensoWF, condVar = TRUE) #permet d'observer les différences de niveau
View(sensoNiveauxJoueursWF)
sensoNiveauxJoueursWF = data.table();
sensoNiveauxJoueursWF = DTM[,.(type="Sensorielle",totalWin=sum(gagnant),totalFail=sum(perdant)),by=IDjoueur]
niveauxJoueursSensoWF <- glmer(cbind(totalWin,totalFail) ~ (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
summary(niveauxJoueursSensoWF)
ranef(niveauxJoueursSensoWF, condVar = TRUE) #permet d'observer les différences de niveau
niveauxJoueursSensoWF <- glmer(totalWin ~ (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
niveauxJoueursWF = data.table();
niveauxJoueursWF = DT[,.(totalWin=sum(gagnant),totalFail=sum(perdant)),by=IDjoueur]
View(niveauxJoueursWF)
niveauxJoueursWF = DT[,.(totalWin=sum(gagnant),totalFail=sum(perdant)),by=c(IDjoueur,type)]
niveauxJoueursWF = DT[,.(totalWin=sum(gagnant),totalFail=sum(perdant)),by=c([IDjoueur],[type])]
niveauxJoueursWF = DT[,.(totalWin=sum(gagnant),totalFail=sum(perdant)),by=c("IDjoueur","type")]
niveauxJoueursWF = DT[,.(totalWin=sum(gagnant),totalFail=sum(perdant)),by=c("IDjoueur","nom_du_jeu")]
View(niveauxJoueursWF)
niveauxJoueursLogiqueWF <- glmer(cbind(totalWin,totalFail) ~ Logique2 + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
niveauxJoueursLogiqueWF <- glmer(cbind(totalWin,totalFail) ~ "Logique2" + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
niveauxJoueursLogiqueWF <- glmer(cbind(totalWin,totalFail) ~ niveauxJoueursWF$Logique2 + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
niveauxJoueursALLWF <- glmer(cbind(totalWin,totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
summary(niveauxJoueursALLWF)
ranef(niveauxJoueursALLWF, condVar = TRUE)
motriceNiveauxJoueurs = data.table();
motriceNiveauxJoueurs = DTM[,.(type="Moteur",totalMoutonsSauves=max(moutons_sauves),totalMoutonsTues=max(moutons_tues)),by=IDjoueur]
niveauxJoueursMotrice <- glmer(cbind(totalMoutonsSauves,totalMoutonsTues) ~ 1 + (1|IDjoueur),
data = motriceNiveauxJoueurs, family = binomial)
ranef(niveauxJoueursMotrice, condVar = TRUE) #permet d'observer les différences de niveau
sensoNiveauxJoueursWF = data.table();
sensoNiveauxJoueursWF = DTM[,.(type="Sensorielle",totalWin=sum(gagnant),totalFail=sum(perdant)),by=IDjoueur]
niveauxJoueursSensoWF <- glmer(totalWin ~ (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
niveauxJoueursSensoWF <- glmer(totalWin/(totalWin+totalFail) ~ (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
help(glmer)
View(logiqueNiveauxJoueurs)
View(motriceNiveauxJoueurs)
niveauxJoueursWF = data.table();
niveauxJoueursWF = DT[,.(totalWin=sum(gagnant),totalFail=sum(perdant)),by=c("IDjoueur","nom_du_jeu")]
niveauxJoueursALLWF <- glmer(cbind(totalWin,totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
summary(niveauxJoueursALLWF)
ranef(niveauxJoueursALLWF, condVar = TRUE)
niveauxJoueursALLWF <- glmer(cbind(100*totalWin,100*totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
summary(niveauxJoueursALLWF)
ranef(niveauxJoueursALLWF, condVar = TRUE)
niveauxJoueursALLWF <- glmer(cbind(1000*totalWin,1000*totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
niveauxJoueursALLWF <- glmer(cbind(10*totalWin,10*totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
ranef(niveauxJoueursALLWF, condVar = TRUE)
niveauxJoueursALLWF <- glmer(cbind(100*totalWin,100*totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
ranef(niveauxJoueursALLWF, condVar = TRUE)
niveauxJoueursALLWF <- glmer(cbind(2*totalWin,2*totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
ranef(niveauxJoueursALLWF, condVar = TRUE)
niveauxJoueursALLWF <- glmer(cbind(1*totalWin,1*totalFail) ~ nom_du_jeu + (1|IDjoueur),
data = niveauxJoueursWF, family = binomial)
ranef(niveauxJoueursALLWF, condVar = TRUE)
niveauxJoueursSensoWF <- glmer(cbind(10*totalWin,10*totalFail) ~ (1|IDjoueur),
data = sensoNiveauxJoueursWF, family = binomial)
summary(niveauxJoueursSensoWF)
ranef(niveauxJoueursSensoWF, condVar = TRUE) #permet d'observer les différences de niveau
