sexe.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$sexe,"sexe.on.level.s")
sexe.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$sexe,"sexe.on.level.l")
sexe.on.level.m.2 <- test.profile.binary(unique(DTM[sexe==0],by="IDjoueur")$niveau, unique(DTM[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.m.2")
sexe.on.level.s.2 <- test.profile.binary(unique(DTS[sexe==0],by="IDjoueur")$niveau, unique(DTS[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.s.2")
sexe.on.level.l.2 <- test.profile.binary(unique(DTL[sexe==0],by="IDjoueur")$niveau, unique(DTL[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.l.2")
#Subjective difficulty and play habits
pvg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.video.games,"pvg.on.error")
pbg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.board.games,"pbg.on.error")
#Subjective difficulty and sex
sexe.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error")
sexe.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.m")
sexe.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.s")
sexe.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.l")
sexe.on.error.2 <- test.profile.binary(unique(DTAll[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.2")
sexe.on.error.m.2 <- test.profile.binary(unique(DTM[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.m.2")
sexe.on.error.s.2 <- test.profile.binary(unique(DTS[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.s.2")
sexe.on.error.l.2 <- test.profile.binary(unique(DTL[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.l.2")
#Subjective difficulty and risk aversion
risk.av.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
#Subjective difficulty and self efficacy
self.eff.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
#------------------------------------------------------
#     SHOWING SUBJECTIVE VS OBJECTIVE DIFFICULTY
#------------------------------------------------------
plot.subjective.difficulty <- function(DT){
# Lien entre mise normalisée et difficultée estimée (hard / easy effect)
obj.diff.quants = seq(0,1,0.075)#quantile(DT$obj.diff, probs=(seq(0,1,0.05)))
nb.bins = length(obj.diff.quants)-1
subj.diff.med = numeric(nb.bins)
obj.diff.bin = numeric(nb.bins)
obj.diff.bin.cur = 0;
test.pvals = numeric(nb.bins)
conf.min = numeric(nb.bins)
conf.max = numeric(nb.bins)
nb.vals = numeric(nb.bins)
delta.obj.subj = numeric(nb.bins)
hist(DT$obj.diff)
for(i in 1:nb.bins){
#obj.diff.bin.cur = round(i/10,1)
#subj.diff = DT[round(obj.diff,1)==obj.diff.bin.cur]$subj.diff.mise
obj.diff.bin.cur = (obj.diff.quants[i] + obj.diff.quants[i+1])/2.0
#subj.diff = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]$subj.diff.mise
DTLoc = DT[obj.diff > obj.diff.quants[i] & obj.diff<=obj.diff.quants[i+1]]
DTLoc = DTLoc[,.(mise.mean=mean(subj.diff.mise)),by=IDjoueur]
subj.diff = DTLoc$mise.mean
obj.diff.bin[i] = obj.diff.bin.cur
subj.diff.med[i] = NA
test.pvals[i] = NA
conf.min[i] = NA
conf.max[i] = NA
delta.obj.subj[i] = NA
nb.vals[i] = length(subj.diff)
if(nb.vals[i] > 1){
try.res = try(test.res <- wilcox.test(subj.diff,mu = obj.diff.bin.cur,conf.int=T))
if (class(try.res) != "try-error"){
#print(test.res)
#hist(subj.diff)
test.pvals[i] = format.pval.stars(test.res$p.value)
#subj.diff.med[i] = mean(subj.diff)
subj.diff.med[i] = test.res$estimate
conf.min[i] = test.res$conf.int[1]
conf.max[i] = test.res$conf.int[2]
delta.obj.subj[i] = signif(subj.diff.med[i] - obj.diff.bin.cur,digit=2)
}
}
}
#print table of pvalues
print(data.table(obj.diff.bin=obj.diff.bin,delta.obj.subj=delta.obj.subj,n=nb.vals,pval=test.pvals))
#kernel smooth
subj.diff.smooth <- ksmooth(x=DT$obj.diff,y=DT$subj.diff.mise,bandwidth = 0.2)
DTSmooth = data.table(x=subj.diff.smooth$x,y=subj.diff.smooth$y)
DTPlot = data.table(obj.diff=obj.diff.bin,subj.diff=subj.diff.med)
p = ggplot() +
#       geom_line(aes(x=DTPouet$x,y=DTPouet$y))+
geom_point(aes(x=DTPlot$obj.diff,y=DTPlot$subj.diff),alpha = 1, size = 3) +
xlim(0,1)+
ylim(0,1)+
geom_errorbar(aes(x=DTPlot$obj.diff, ymin=conf.min, ymax=conf.max), width=.01,color="red")  +
geom_abline(intercept = 0, slope = 1, color="blue")
print(p)
}
plot.subjective.difficulty(DTAll)
plot.subjective.difficulty(DTM)
plot.subjective.difficulty(DTS)
plot.subjective.difficulty(DTL)
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.2))
print(p)
}
plot.subjective.diff.error.density <- function (DT) {
p <- ggplot(DT, aes(action_de_jeu, error.subj.diff.mise)) + geom_bin2d(binwidth=c(1,0.2))
print(p)
}
plot.subjective.diff.error.density(DTM)
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTM))
plot.subjective.diff.error.density(DTS)
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTS))
plot.subjective.diff.error.density(DTL)
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTL))
plot.subjective.diff.error.density(DTM[niveau.group=="bad"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTM[niveau.group=="bad"]))
plot.subjective.diff.error.density(DTM[niveau.group=="medium"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTM[niveau.group=="medium"]))
plot.subjective.diff.error.density(DTM[niveau.group=="good"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTM[niveau.group=="good"]))
plot.subjective.diff.error.density(DTS[niveau.group=="bad"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTS[niveau.group=="bad"]))
plot.subjective.diff.error.density(DTS[niveau.group=="medium"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTS[niveau.group=="medium"]))
plot.subjective.diff.error.density(DTS[niveau.group=="good"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTS[niveau.group=="good"]))
plot.subjective.diff.error.density(DTL[niveau.group=="bad"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTL[niveau.group=="bad"]))
plot.subjective.diff.error.density(DTL[niveau.group=="medium"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTL[niveau.group=="medium"]))
plot.subjective.diff.error.density(DTL[niveau.group=="good"])
summary(glm(error.subj.diff.mise~timeNorm + obj.diff,data = DTL[niveau.group=="good"]))
summary(glm(error.subj.diff.mise~nbWin,data = DTM))
summary(glm(error.subj.diff.mise~est.confidence,data = DTM))
summary(glm(error.subj.diff.mise~est.confidence,data = DTM))
summary(glm(error.subj.diff.mise~est.confidence,data = DTS))
summary(glm(error.subj.diff.mise~est.confidence,data = DTL))
summary(glm(error.subj.diff.mise~est.confidence,data = DTM))
summary(glm(error.subj.diff.mise~est.confidence,data = DTM))
summary(glm(error.subj.diff.mise~est.confidence,data = DTS))
summary(glm(error.subj.diff.mise~est.confidence,data = DTL))
summary(glm(error.subj.diff.mise~est.confidence,data = DTS))
summary(glm(error.subj.diff.mise~est.confidence,data = DTM))
summary(glm(error.subj.diff.mise~est.confidence,data = DTS))
summary(glm(error.subj.diff.mise~est.confidence,data = DTL))
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTM))
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTS))
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTL))
player = sample(unique(DTL[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
player
plot.random.diff.curve.confidence(DTM)
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=est.confidence.norm,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Estimated Confidence" = "green",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM)
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=est.confidence.norm,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Estimated Confidence" = "green",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM,"Motor")
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Estimated Confidence" = "green",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM,"Motor")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTM))
plot.random.diff.curve.confidence(DTS,"Sensory")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTS))
plot.random.diff.curve.confidence(DTL,"Logical")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTL))
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Estimated Confidence"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Estimated Confidence" = "green",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM,"Motor")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTM))
plot.random.diff.curve.confidence(DTS,"Sensory")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTS))
plot.random.diff.curve.confidence(DTL,"Logical")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTL))
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty",alpha=0.5))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter",alpha=0.5))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Estimated Confidence",alpha=0.5))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Estimated Confidence" = "green",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM,"Motor")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTM))
plot.random.diff.curve.confidence(DTS,"Sensory")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTS))
plot.random.diff.curve.confidence(DTL,"Logical")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTL))
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Estimated Confidence"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Estimated Confidence" = "green",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM,"Motor")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTM))
plot.random.diff.curve.confidence(DTS,"Sensory")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTS))
plot.random.diff.curve.confidence(DTL,"Logical")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTL))
#Plot la courbe de diff pour un joueur
plot.diff.curve.confidence <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Estimated Confidence"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "red",
"Estimated Confidence" = "green",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.random.diff.curve.confidence<- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.random.diff.curve.confidence(DTM,"Motor")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTM))
plot.random.diff.curve.confidence(DTS,"Sensory")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTS))
plot.random.diff.curve.confidence(DTL,"Logical")
summary(glm(error.subj.diff.mise~est.confidence.norm,data = DTL))
niveau.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
test.profile <- function(Y,X,title){
test <- cor.test(Y,X, method="kendall")
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
test.profile.binary <- function(A,B,title){
test <- wilcox.test(B,A,conf.int=T)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
res <- paste(res,paste("mean(A):",signif(mean(A),digit=2)))
res <- paste(res,paste("mean(B):",signif(mean(B),digit=2)))
print(paste(title,res))
}
return(res)
}
#Objective level and player profile
pvg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.video.games,"pvg.on.level.m")
pvg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.video.games,"pvg.on.level.s")
pvg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.video.games,"pvg.on.level.l")
pbg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.board.games,"pbg.on.level.m")
pbg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.board.games,"pbg.on.level.s")
pbg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.board.games,"pbg.on.level.l")
self.eff.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$self.eff,"self.eff.on.level.m")
self.eff.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$self.eff,"self.eff.on.level.s")
self.eff.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$self.eff,"self.eff.on.level.l")
risk.av.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$risk.av,"risk.av.on.level.m")
risk.av.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$risk.av,"risk.av.on.level.s")
risk.av.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$risk.av,"risk.av.on.level.l")
age.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$age,"age.on.level.m")
age.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$age,"age.on.level.s")
age.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$age,"age.on.level.l")
sexe.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$sexe,"sexe.on.level.m")
sexe.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$sexe,"sexe.on.level.s")
sexe.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$sexe,"sexe.on.level.l")
sexe.on.level.m.2 <- test.profile.binary(unique(DTM[sexe==0],by="IDjoueur")$niveau, unique(DTM[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.m.2")
sexe.on.level.s.2 <- test.profile.binary(unique(DTS[sexe==0],by="IDjoueur")$niveau, unique(DTS[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.s.2")
sexe.on.level.l.2 <- test.profile.binary(unique(DTL[sexe==0],by="IDjoueur")$niveau, unique(DTL[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.l.2")
#Subjective difficulty and play habits
pvg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.video.games,"pvg.on.error")
pbg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.board.games,"pbg.on.error")
#Subjective difficulty and ingame level
niveau.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
#Subjective difficulty and sex
sexe.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error")
sexe.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.m")
sexe.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.s")
sexe.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.l")
sexe.on.error.2 <- test.profile.binary(unique(DTAll[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.2")
sexe.on.error.m.2 <- test.profile.binary(unique(DTM[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.m.2")
sexe.on.error.s.2 <- test.profile.binary(unique(DTS[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.s.2")
sexe.on.error.l.2 <- test.profile.binary(unique(DTL[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.l.2")
#Subjective difficulty and risk aversion
risk.av.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
#Subjective difficulty and self efficacy
self.eff.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
test.profile <- function(Y,X,title){
test <- cor.test(Y,X, method="kendall")
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
print(paste(title,res))
}
return(res)
}
test.profile.binary <- function(A,B,title){
test <- wilcox.test(B,A,conf.int=T)
res <- paste(signif(test$estimate,digits=2),format.pval.stars(test$p.value))
if(test$p.value < 0.1){
res <- paste(res,paste("mean(A):",signif(mean(A),digit=2)))
res <- paste(res,paste("mean(B):",signif(mean(B),digit=2)))
print(paste(title,res))
}
return(res)
}
#Objective level and player profile
pvg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.video.games,"pvg.on.level.m")
pvg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.video.games,"pvg.on.level.s")
pvg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.video.games,"pvg.on.level.l")
pbg.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$play.board.games,"pbg.on.level.m")
pbg.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$play.board.games,"pbg.on.level.s")
pbg.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$play.board.games,"pbg.on.level.l")
self.eff.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$self.eff,"self.eff.on.level.m")
self.eff.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$self.eff,"self.eff.on.level.s")
self.eff.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$self.eff,"self.eff.on.level.l")
risk.av.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$risk.av,"risk.av.on.level.m")
risk.av.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$risk.av,"risk.av.on.level.s")
risk.av.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$risk.av,"risk.av.on.level.l")
age.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$age,"age.on.level.m")
age.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$age,"age.on.level.s")
age.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$age,"age.on.level.l")
sexe.on.level.m <- test.profile(unique(DTM,by="IDjoueur")$niveau, unique(DTM,by="IDjoueur")$sexe,"sexe.on.level.m")
sexe.on.level.s <- test.profile(unique(DTS,by="IDjoueur")$niveau, unique(DTS,by="IDjoueur")$sexe,"sexe.on.level.s")
sexe.on.level.l <- test.profile(unique(DTL,by="IDjoueur")$niveau, unique(DTL,by="IDjoueur")$sexe,"sexe.on.level.l")
sexe.on.level.m.2 <- test.profile.binary(unique(DTM[sexe==0],by="IDjoueur")$niveau, unique(DTM[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.m.2")
sexe.on.level.s.2 <- test.profile.binary(unique(DTS[sexe==0],by="IDjoueur")$niveau, unique(DTS[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.s.2")
sexe.on.level.l.2 <- test.profile.binary(unique(DTL[sexe==0],by="IDjoueur")$niveau, unique(DTL[sexe==1],by="IDjoueur")$niveau,"sexe.on.level.l.2")
#Subjective difficulty and play habits
pvg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.video.games,"pvg.on.error")
pbg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.board.games,"pbg.on.error")
#Subjective difficulty and ingame level
niveau.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
niveau.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau,"pvg.on.error")
#Subjective difficulty and sex
sexe.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error")
sexe.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.m")
sexe.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.s")
sexe.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.l")
sexe.on.error.2 <- test.profile.binary(unique(DTAll[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.2")
sexe.on.error.m.2 <- test.profile.binary(unique(DTM[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTM[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.m.2")
sexe.on.error.s.2 <- test.profile.binary(unique(DTS[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTS[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.s.2")
sexe.on.error.l.2 <- test.profile.binary(unique(DTL[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTL[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.l.2")
#Subjective difficulty and risk aversion
risk.av.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
#Subjective difficulty and self efficacy
self.eff.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
