#number of consecutive wins
nbWins <- numeric(nrow(DTAll)) # tmp vector faster to write
nbWins[1] = 0;
nbWinCpt = 0;
lastID <- id[1];
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
nbWinCpt = 0;
}else{
if(gagnant[i-1] == 1){
nbWinCpt = nbWinCpt+1;
}else{
nbWinCpt = 0;
}
}
nbWins[i] <- nbWinCpt;
lastID = id[i-1];
}
DTAll$nbWin = nbWins;
#sum of absolute bet variation over time, mainly to spot 1/7/1/7/1/7 behaviors
mise = DTAll$mise;
cumulDeltaMise <- numeric(nrow(DTAll))
cumulDeltaMise[1] = 0;
lastID <- id[1];
currentCumulDeltaMise = 0;
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
currentCumulDeltaMise = 0;
}else{
currentCumulDeltaMise = currentCumulDeltaMise + abs(mise[i] - mise[i-1]);
}
lastID = id[i];
cumulDeltaMise[i] = currentCumulDeltaMise;
}
DTAll$cumulDeltaMise = cumulDeltaMise;
# #evaluating confidence as a damped over time sum of win and fails;
# #each win and fail importance based on objective difficulty at that time
# cur.confidence = 0;
# lastID <- id[1];
# est.confidence <- numeric(nrow(DTLoc))
# est.confidence[1] = 0;
# est.diff = DTAll.est.diff
#
#   for(i in 2:nrow(DTLoc)){
#     if(id[i] != lastID){
#       resLisseCur = 0;
#     }else{
#       #confiance <- gagnant[i-1]*2-1
#       if(gagnant[i-1]){
#         confiance = diffObj[i-1];
#       }else{
#         confiance = -(1 - diffObj[i-1]);
#       }
#       resLisseCur <- alpha * resLisseCur + confiance;
#     }
#     lastID = id[i];
#     res[i] = resLisseCur;
#   }
#
#   DTLoc$resLisseBase = res;
#   DTLoc$resLisse = exp(DTLoc$resLisseBase) / (1+exp(DTLoc$resLisseBase));
#
#   print(paste("Lissee:",toString(proc.time()[1]-temps)))
#   temps <- proc.time()[1];
#------------------------------------------------------
#         ADDING VARIABLES FOR QUESTIONNAIRE
#------------------------------------------------------
# how much playing video games in general
DTAll$play.video.games = pmax(DTAll$profilJoueur2,
DTAll$profilJoueur3,
DTAll$profilJoueur4,
DTAll$profilJoueur5,
DTAll$profilJoueur6)
# how much playing board games
DTAll$play.board.game = pmax(DTAll$profilJoueur1)
# how much playing games with money
DTAll$play.money.games = pmax(DTAll$profilJoueur7)
# feeling of self efficacy
cols.self.eff <- c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4",
"autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8",
"autoEffJoueur9","autoEffJoueur10")
DTAll = DTAll[, self.eff := rowSums(.SD,na.rm=TRUE), .SDcols = cols.self.eff]
# risk aversion
cols.risk.av <- c("loterie1","loterie2","loterie3","loterie4","loterie5",
"loterie6","loterie7","loterie8","loterie9","loterie10")
DTAll = DTAll[, risk.av := rowSums(.SD,na.rm=TRUE), .SDcols = cols.risk.av]
#------------------------------------------------------
#                  LOADING DATA
#------------------------------------------------------
# Data from game trace
fileGameTrace = "./log_thomas_XPFINALES_WEEK2.txt"
DTGame <- read.csv(fileGameTrace,header=TRUE,sep=";")
DTGame <- as.data.table(DTGame)
DTGame <- set.empty.to.na(DTGame)
DTGame <- remove.na.cols(DTGame)
DTGame <- remove.na.rows(DTGame)
# Data from questionnaire
fileQuestions = "./log_questionnaire_XP_WEEK2_REWRITED.csv"
DTQuest <- read.csv(fileQuestions,header=TRUE,sep=";")
DTQuest <- as.data.table(DTQuest)
DTQuest <- set.empty.to.na(DTQuest)
DTQuest <- remove.na.cols(DTQuest)
DTQuest <- remove.na.rows(DTQuest)
# Merging tables into one
setkey(DTGame,IDjoueur)
setkey(DTQuest,IDjoueur)
DTAll <- merge(DTGame,DTQuest, all.x=TRUE)
#------------------------------------------------------
#         ADDING VARIABLES FOR QUESTIONNAIRE
#------------------------------------------------------
# how much playing video games in general
DTAll$play.video.games = pmax(DTAll$profilJoueur2,
DTAll$profilJoueur3,
DTAll$profilJoueur4,
DTAll$profilJoueur5,
DTAll$profilJoueur6)
# how much playing board games
DTAll$play.board.game = pmax(DTAll$profilJoueur1)
# how much playing games with money
DTAll$play.money.games = pmax(DTAll$profilJoueur7)
# feeling of self efficacy
cols.self.eff <- c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4",
"autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8",
"autoEffJoueur9","autoEffJoueur10")
DTAll = DTAll[, self.eff := rowSums(.SD,na.rm=TRUE), .SDcols = cols.self.eff]
# risk aversion
cols.risk.av <- c("loterie1","loterie2","loterie3","loterie4","loterie5",
"loterie6","loterie7","loterie8","loterie9","loterie10")
DTAll = DTAll[, risk.av := rowSums(.SD,na.rm=TRUE), .SDcols = cols.risk.av]
#------------------------------------------------------
#         ADDING SIMPLE VARIABLES FOR GAME TRACES
#------------------------------------------------------
DTAll$perdant <- 1-DTAll$gagnant # if the player did fail on that try
DTAll$miseNorm <- DTAll$mise / 7 # normalize bet
#number of consecutive fails
gagnant = DTAll$gagnant; # tmp vector faster to read
id = DTAll$IDjoueur; # tmp vector faster to read
nbFails <- numeric(nrow(DTAll)) # tmp vector faster to write
nbFails[1] = 0;
nbFailCpt = 0;
lastID <- id[1];
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
nbFailCpt = 0;
}else{
if(gagnant[i-1] == 0){
nbFailCpt = nbFailCpt+1;
}else{
nbFailCpt = 0;
}
}
nbFails[i] <- nbFailCpt;
lastID = id[i-1];
}
DTAll$nbFail = nbFails;
#number of consecutive wins
nbWins <- numeric(nrow(DTAll)) # tmp vector faster to write
nbWins[1] = 0;
nbWinCpt = 0;
lastID <- id[1];
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
nbWinCpt = 0;
}else{
if(gagnant[i-1] == 1){
nbWinCpt = nbWinCpt+1;
}else{
nbWinCpt = 0;
}
}
nbWins[i] <- nbWinCpt;
lastID = id[i-1];
}
DTAll$nbWin = nbWins;
#sum of absolute bet variation over time, mainly to spot 1/7/1/7/1/7 behaviors
mise = DTAll$mise;
cumulDeltaMise <- numeric(nrow(DTAll))
cumulDeltaMise[1] = 0;
lastID <- id[1];
currentCumulDeltaMise = 0;
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
currentCumulDeltaMise = 0;
}else{
currentCumulDeltaMise = currentCumulDeltaMise + abs(mise[i] - mise[i-1]);
}
lastID = id[i];
cumulDeltaMise[i] = currentCumulDeltaMise;
}
DTAll$cumulDeltaMise = cumulDeltaMise;
# #evaluating confidence as a damped over time sum of win and fails;
# #each win and fail importance based on objective difficulty at that time
# cur.confidence = 0;
# lastID <- id[1];
# est.confidence <- numeric(nrow(DTLoc))
# est.confidence[1] = 0;
# est.diff = DTAll.est.diff
#
#   for(i in 2:nrow(DTLoc)){
#     if(id[i] != lastID){
#       resLisseCur = 0;
#     }else{
#       #confiance <- gagnant[i-1]*2-1
#       if(gagnant[i-1]){
#         confiance = diffObj[i-1];
#       }else{
#         confiance = -(1 - diffObj[i-1]);
#       }
#       resLisseCur <- alpha * resLisseCur + confiance;
#     }
#     lastID = id[i];
#     res[i] = resLisseCur;
#   }
#
#   DTLoc$resLisseBase = res;
#   DTLoc$resLisse = exp(DTLoc$resLisseBase) / (1+exp(DTLoc$resLisseBase));
#
#   print(paste("Lissee:",toString(proc.time()[1]-temps)))
#   temps <- proc.time()[1];
#------------------------------------------------------
#            REMOVING OUTLIERS
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
idOutliersM = data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur)
idOutliersS = data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur)
idOutliersL = data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur)
return(merge(merge(idOutliersM,idOutliersL,all=TRUE),idOutliersS,all=TRUE))
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("All Outliers :",toString(outliers$id)))
#DTS <- DTS[!IDjoueur %in% unlist(outliers$id)]
#------------------------------------------------------
#            REMOVING OUTLIERS
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
idOutliersM = data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur)
idOutliersS = data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur)
idOutliersL = data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur)
return(merge(merge(idOutliersM,idOutliersL,all=TRUE),idOutliersS,all=TRUE))
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("All Outliers :",toString(outliers$id)))
# removing all outliers
DTAll <- DTAll[!IDjoueur %in% unlist(outliers$id)]
#------------------------------------------------------
#            REMOVING OUTLIERS
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
idOutliersM = data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur)
idOutliersS = data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur)
idOutliersL = data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur)
return(merge(merge(idOutliersM,idOutliersL,all=TRUE),idOutliersS,all=TRUE))
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("All Outliers :",toString(outliers$id)))
# removing all outliers
DTAll <- DTAll[!IDjoueur %in% unlist(outliers$id)]
#------------------------------------------------------
#            REMOVING OUTLIERS
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
idOutliersM = data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur)
idOutliersS = data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur)
idOutliersL = data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur)
return(merge(merge(idOutliersM,idOutliersL,all=TRUE),idOutliersS,all=TRUE))
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("All Outliers :",toString(outliers$id)))
# removing all outliers
DTAll <- DTAll[!IDjoueur %in% unlist(outliers$id)]
length(outliers$id)
nrow(outliers$id)
