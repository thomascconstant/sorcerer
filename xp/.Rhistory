if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Estimated Confidence"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "red",
"Estimated Confidence" = "green",
"Confiance" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.p <- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.p(DTM,"Motor")
summary(lmer(error.subj.diff.confiance ~ est.confidence.norm + (1 | IDjoueur), data=DTM))
plot.p(DTS,"Sensory")
summary(lmer(error.subj.diff.confiance ~ est.confidence.norm + (1 | IDjoueur), data=DTS))
plot.p(DTL,"Logical")
summary(lmer(error.subj.diff.confiance ~ est.confidence.norm + (1 | IDjoueur), data=DTL))
#-------------------------------------------------------------------------------------
#       MODELING SUBJECTIVE DIFFICULTY ON CONFIDENCE (CONFIDENCE SCALE APPROACH)
#-------------------------------------------------------------------------------------
#adding error between subjective difficulty and objective difficulty
DTAll$subj.diff.confiance = 1 - DTAll$confianceNorm;
DTAll$error.subj.diff.confiance = DTAll$subj.diff.confiance - DTAll$obj.diff
DTAll <- DTAll[,error.subj.diff.confiance.mean:=mean(error.subj.diff.confiance),by=IDjoueur]
#evaluating confidence as a damped over time sum of win and fails;
#each win and fail importance based on objective difficulty at that time
id = DTAll$IDjoueur; # tmp vector faster to read
cur.confidence = 0;
cur.confidence.liss = 0;
lastID <- id[1];
est.confidence <- numeric(nrow(DTAll))
est.confidence[1] = 0;
obj.diff = DTAll$obj.diff
alpha <- 0.9
i = 1
for(i in 2:nrow(DTAll)){
if(id[i] != lastID){
cur.confidence.liss = 0;
}else{
if(gagnant[i-1]){
cur.confidence = obj.diff[i-1];
}else{
cur.confidence = -(1 - obj.diff[i-1]);
}
cur.confidence.liss <- alpha * cur.confidence.liss + cur.confidence;
}
lastID <- id[i];
est.confidence[i] <- cur.confidence.liss;
}
DTAll$est.confidence = est.confidence;
DTAll$est.confidence.norm = exp(DTAll$est.confidence) / (1+exp(DTAll$est.confidence));
#update DTM DTS and DTL
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
####tests
p <- lmer(error.subj.diff.confiance ~ est.confidence.norm + (1 | IDjoueur), data=DTAll)
summary(p)
plot.p <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
confidence=DT$confianceNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=confidence,colour="Ranked Confidence"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + geom_step(aes(y=DT$est.confidence.norm,colour="Estimated Confidence"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "red",
"Estimated Confidence" = "green",
"Ranked Confidence" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
plot.p <- function (DT,title){
player = sample(unique(DT[niveau.group == "bad"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"bad"))
player = sample(unique(DT[niveau.group == "medium"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"medium"))
player = sample(unique(DT[niveau.group == "good"],by="IDjoueur")$IDjoueur,1)
plot.diff.curve.confidence(DT[IDjoueur == player],paste(title,"good"))
}
plot.p(DTM,"Motor")
summary(lmer(error.subj.diff.confiance ~ est.confidence.norm + (1 | IDjoueur), data=DTM))
plot.p(DTS,"Sensory")
summary(lmer(error.subj.diff.confiance ~ est.confidence.norm + (1 | IDjoueur), data=DTS))
plot.p(DTL,"Logical")
summary(lmer(error.subj.diff.confiance ~ est.confidence.norm + (1 | IDjoueur), data=DTL))
#-----------------------------------------------------------------------------------------------------------
#        INFLUENCE OF PLAYERS' PROFILES ON PLAYERS' DIFFICULTY ESTIMATION (BASED ON CONFIDENCE SCALE)
#-----------------------------------------------------------------------------------------------------------
#ATTENTION, CACUL BASE SUR L'ECHELLE DE CONFIANCE : error.subj.diff.confiance.mean
#--------------------------------------------------------------------------------------------------------
#        INFLUENCE OF VIDEO GAME EXPERTISE ON PLAYERS' DIFFICULTY ESTIMATION (CONFIDENCE SCALE)
#--------------------------------------------------------------------------------------------------------
pvg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.video.games,"pvg.on.error")
#--------------------------------------------------------------------------------------------------------
#        INFLUENCE OF BOARD GAME EXPERTISE ON PLAYERS' DIFFICULTY ESTIMATION (CONFIDENCE SCALE)
#--------------------------------------------------------------------------------------------------------
pbg.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$play.board.games,"pbg.on.error")
#----------------------------------------------------------------------------------------------
#        INFLUENCE OF IN GAME LEVEL ON PLAYERS' DIFFICULTY ESTIMATION (CONFIDENCE SCALE)
#----------------------------------------------------------------------------------------------
niveau.group.on.error <- test.profile.multigroups(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error")
niveau.group.on.error.m <- test.profile.multigroups(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.m")
niveau.group.on.error.s <- test.profile.multigroups(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.s")
niveau.group.on.error.l <- test.profile.multigroups(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau.group,"niveau.group.on.error.l")
niveau.group.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error")
niveau.group.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error.m")
niveau.group.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error.s")
niveau.group.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$niveau,"niveau.group.on.error.l")
#----------------------------------------------------------------------------------------------
#        INFLUENCE OF SEX AND LEVEL ON PLAYERS' DIFFICULTY ESTIMATION (CONFIDENCE SCALE)
#----------------------------------------------------------------------------------------------
sexe.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error")
sexe.on.error.m <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.m")
sexe.on.error.s <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.s")
sexe.on.error.l <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$sexe,"sexe.on.error.l")
sexe.on.error.2 <- test.profile.binary(unique(DTAll[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.2")
sexe.on.error.m.2 <- test.profile.binary(unique(DTM[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTM[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.m.2")
sexe.on.error.s.2 <- test.profile.binary(unique(DTS[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTS[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.s.2")
sexe.on.error.l.2 <- test.profile.binary(unique(DTL[sexe==0],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTL[sexe==1],by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.mise.mean,"sexe.on.error.l.2")
#----------------------------------------------------------------------------------------------
#        INFLUENCE OF RISK AVERSION ON PLAYERS' DIFFICULTY ESTIMATION (CONFIDENCE SCALE)
#----------------------------------------------------------------------------------------------
risk.av.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
risk.av.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
risk.av.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
risk.av.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$risk.av,"risk.av.on.error")
#----------------------------------------------------------------------------------------------
#        INFLUENCE OF SELF EFFICACY ON PLAYERS' DIFFICULTY ESTIMATION (CONFIDENCE SCALE)
#----------------------------------------------------------------------------------------------
self.eff.on.error <- test.profile(unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTAll,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
self.eff.on.error <- test.profile(unique(DTM,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTM,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
self.eff.on.error <- test.profile(unique(DTS,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTS,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
self.eff.on.error <- test.profile(unique(DTL,by=c("IDjoueur","nom_du_jeu"))$error.subj.diff.confiance.mean, unique(DTL,by=c("IDjoueur","nom_du_jeu"))$self.eff,"self.eff.on.error")
View(DTConfidenceScale)
#------------------------------------------------------
#                  SETUP : PACKAGES
#------------------------------------------------------
require(xlsx)
require(plyr)
require(data.table)
require(ggplot2)
library(car)
require(lme4)
require(lmerTest)
require(Matrix)
library(usdm)
require(lattice)
require(psychometric)
require(MuMIn)
require(pyramid)
require(sjPlot)
require(arm)
library(MASS)
require(MuMIn)
require(Hmisc)
require(RColorBrewer)
#------------------------------------------------------
#              SETUP : UTILS FUNCTIONS
#------------------------------------------------------
format.pval.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("unable to format pvalue !!");
}
format.pval.only.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return("***");
}else if(pv<0.01){
return("**");
}else  if(pv<0.05){
return("*");
}else if(pv<0.1){
return(".");
}else{
return(":(");
}
return("unable to format pvalue !!");
}
format.coef <- function(coef,p.val){
return(paste(signif(coef,digits=3),format.pval.stars(p.val)))
}
remove.na.cols <- function(DT){
return(as.data.table(DT[,which(unlist(lapply(DT, function(x)!all(is.na(x))))),with=F]))
}
remove.na.rows <- function(DT){
return(as.data.table(DT[rowSums(is.na(DT)) != ncol(DT),]))
}
set.empty.to.na <- function(DT){
return(as.data.table(lapply(DT, function(x){replace(x, x=="",NA)})))
}
remove.head.tail <- function(DT,nb,bHead=TRUE){
DT <- as.data.table(DT)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DT <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DT <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DT)
}
#Plot la courbe de diff pour un joueur avec la BET
plot.diff.curve <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
#Plot la courbe de diff pour un joueur avec la CS
plot.diff.curve.cs <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
confidence=DT$confianceNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=confidence,colour="Confidence"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Confidence" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
p <- median(DTQuest, c("age"))
title: "Experiment with Random Difficulty (results based on the bet)"
output:
html_document:
theme: lumen
pdf_document: default
---
```{r global.infos, echo=FALSE}
# risk aversion scores
# 0-1 : highly risk loving
#  2  : very risk loving
#  3  : risk loving
#  4  : risk neutral
#  5  : slightly risk averse
#  6  : risk averse
#  7  : very risk averse
#  8  : highly risk avers
# 9-10 : max choix sûr
# self efficacy scores
# 0 : not a player so did not answer
# de 10 à 20 : sentiment AE faible
# de 21 à 30 : sentiment AE moyen
# de 31 à 40 : sentiment AE fort
# de 41 à 50 : sentiment AE très fort
```
```{r setup, include = FALSE}
#------------------------------------------------------
#                  SETUP : PACKAGES
#------------------------------------------------------
require(xlsx)
require(plyr)
require(data.table)
require(ggplot2)
library(car)
require(lme4)
require(lmerTest)
require(Matrix)
library(usdm)
require(lattice)
require(psychometric)
require(MuMIn)
require(pyramid)
require(sjPlot)
require(arm)
library(MASS)
require(MuMIn)
require(Hmisc)
require(RColorBrewer)
#------------------------------------------------------
#              SETUP : UTILS FUNCTIONS
#------------------------------------------------------
format.pval.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return(paste(pv,"***"));
}else if(pv<0.01){
return(paste(pv,"**"));
}else  if(pv<0.05){
return(paste(pv,"*"));
}else if(pv<0.1){
return(paste(pv,"."));
}else{
return(paste(pv,":("));
}
return("unable to format pvalue !!");
}
format.pval.only.stars <- function(pv){
pv = signif(pv,digits=2)
if(pv<0.001) {
return("***");
}else if(pv<0.01){
return("**");
}else  if(pv<0.05){
return("*");
}else if(pv<0.1){
return(".");
}else{
return(":(");
}
return("unable to format pvalue !!");
}
format.coef <- function(coef,p.val){
return(paste(signif(coef,digits=3),format.pval.stars(p.val)))
}
remove.na.cols <- function(DT){
return(as.data.table(DT[,which(unlist(lapply(DT, function(x)!all(is.na(x))))),with=F]))
}
remove.na.rows <- function(DT){
return(as.data.table(DT[rowSums(is.na(DT)) != ncol(DT),]))
}
set.empty.to.na <- function(DT){
return(as.data.table(lapply(DT, function(x){replace(x, x=="",NA)})))
}
remove.head.tail <- function(DT,nb,bHead=TRUE){
DT <- as.data.table(DT)
setkey(DTLoc, IDjoueur, nom_du_jeu, action_de_jeu)
if(bHead)
DT <- DTLoc[, tail(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
else
DT <- DTLoc[, head(.SD, nrow(.SD)-nb), by = .(IDjoueur,nom_du_jeu)]
return(DT)
}
#Plot la courbe de diff pour un joueur avec la BET
plot.diff.curve <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
bet=DT$miseNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=bet,colour="Bet"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Bet" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
#Plot la courbe de diff pour un joueur avec la CS
plot.diff.curve.cs <- function (DT,title){
if(nrow(DT) == 0)
return()
df <- data.frame(time=DT$action_de_jeu,
difficulty=DT$difficulty,
confidence=DT$confianceNorm)
p <- ggplot(df,aes(x=time))
p <- p + geom_step(aes(y=confidence,colour="Confidence"))
if(length(DT$obj.diff) > 0)
p <- p + geom_step(aes(y=DT$obj.diff,colour="Objective Difficulty"))
else
p <- p + geom_step(aes(y=difficulty,colour="Difficulty parameter"))
p <- p + ylim(0, 1)
p <- p + scale_colour_manual(
values = c("Difficulty parameter" = "red",
"Objective Difficulty" = "pink",
"Confidence" = "blue"))
p <- p  +  ggtitle(title);
print(p)
}
```
```{r data.loading, echo=FALSE}
#------------------------------------------------------
#                  LOADING DATA
#------------------------------------------------------
# Data from game trace
#fileGameTrace = "./log_thomas_XPFINALES_WEEK2.txt" #résultats jeux XP CN2 avec diff DDA
fileGameTrace = "./log_jeu_XP_NOWELL.txt" #résultats jeux XP CN2 avec diff RANDOM
DTGame <- read.csv(fileGameTrace,header=TRUE,sep=";")
DTGame <- as.data.table(DTGame)
DTGame <- set.empty.to.na(DTGame)
DTGame <- remove.na.cols(DTGame)
DTGame <- remove.na.rows(DTGame)
DTAll <- DTGame #pour n'avoir que les données tirées du jeu
# Data from questionnaire
#fileQuestions = "./log_questionnaire_XP_WEEK2_REWRITED.csv" #résultats questionnaire XP CN2 avec diff DDA
fileQuestions = "./log_questionnaire_XP_NOWELL.csv" #résultats questionnaire XP CN2 avec diff RANDOM
DTQuest <- read.csv(fileQuestions,header=TRUE,sep=";")
DTQuest <- as.data.table(DTQuest)
DTQuest <- set.empty.to.na(DTQuest)
DTQuest <- remove.na.cols(DTQuest)
DTQuest <- remove.na.rows(DTQuest)
# Merging tables into one
setkey(DTGame,IDjoueur)
setkey(DTQuest,IDjoueur)
DTAll <- merge(DTGame,DTQuest, all.x=TRUE)
# Removing the first 3 training turns
DTAll <- subset(DTAll, modeTest!=1)
# Removing the first turn (where difficulty == 0)
DTAll <- subset(DTAll, action_de_jeu!=1)
```
```{r questionnaire.variables, echo=FALSE}
#------------------------------------------------------
#         ADDING VARIABLES FOR QUESTIONNAIRE
#------------------------------------------------------
# how much playing video games in general
DTAll$play.video.games = pmax(DTAll$profilJoueur2,
DTAll$profilJoueur3,
DTAll$profilJoueur4,
DTAll$profilJoueur5,
DTAll$profilJoueur6)
DTAll$play.video.games = DTAll$play.video.games / max(DTAll$play.video.games)
# how much playing board games
DTAll$play.board.games = pmax(DTAll$profilJoueur1)
DTAll$play.board.games = DTAll$play.board.games / max(DTAll$play.board.games)
# how much playing games with money
DTAll$play.money.games = pmax(DTAll$profilJoueur7)
DTAll$play.money.games = DTAll$play.money.games / max(DTAll$play.money.games)
DTAll <- DTAll[,c("profilJoueur1","profilJoueur2","profilJoueur3","profilJoueur4",
"profilJoueur5","profilJoueur6","profilJoueur7"):=NULL] #dont need them anymore
# feeling of self efficacy
cols.self.eff <- c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4",
"autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8",
"autoEffJoueur9","autoEffJoueur10")
DTAll = DTAll[, self.eff := rowSums(.SD,na.rm=TRUE), .SDcols = cols.self.eff]
DTAll$self.eff = DTAll$self.eff/10
DTAll[profilJoueur8==0,self.eff := NA] #NA tout ceux qui ne jouaient pas au jeu vidéo
DTAll <- DTAll[,c("autoEffJoueur1","autoEffJoueur2","autoEffJoueur3","autoEffJoueur4",
"autoEffJoueur5","autoEffJoueur6","autoEffJoueur7","autoEffJoueur8",
"autoEffJoueur9","autoEffJoueur10","profilJoueur8"):=NULL] #dont need them anymore
# risk aversion
cols.risk.av <- c("loterie1","loterie2","loterie3","loterie4","loterie5",
"loterie6","loterie7","loterie8","loterie9","loterie10")
DTAll = DTAll[, risk.av := rowSums(.SD,na.rm=TRUE), .SDcols = cols.risk.av]
DTAll$risk.av = DTAll$risk.av/10
DTAll <- DTAll[,c("loterie1","loterie2","loterie3","loterie4","loterie5",
"loterie6","loterie7","loterie8","loterie9","loterie10"):=NULL] #dont need them anymore
# Printing data from players
DTQuestLit <- subset(DTQuest, select=c("IDjoueur","sexe", "profilJoueur8"))
p <- nrow(DTQuestLit[profilJoueur8==1])
cat("Nombre de participants se déclarant comme joueurs : ", p)
#===#
p <- DTQuestLit[ which( DTQuestLit$profilJoueur8 == 1 & DTQuestLit$sexe == 1) , ]
p <- nrow(p[profilJoueur8==1])
cat("Nombre de femmes se déclarant comme joueuses : ", p)
#===#
p <- median(DTQuest, c("age"))
p <- median(DTQuest$age)
p
median(DTQuest$age)
DTQuestAge <- subset(DTQuest, select=c("age"))
View(DTQuestAge)
p <- median(DTQuestAge)
describeBy(DTQuestAge)
as.vector(DTQuestAge)
p <- median(DTQuestAge)
View(DTQuestAge)
DTQuestAge <- subset(DTQuest, select=c("age"))
prout <- as.numeric(DTQuestAge)
View(DTQuestAge)
prout <- as.numeric(DTQuestAge$age)
p <- median(prout)
p <- median(DTQuestAge$age)
p <- median(DTQuestAge$age, na.rm = T)
View(DTQuestAge)
cat("Age médian des joueurs : ", p)
