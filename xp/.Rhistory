p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
#------------------------------------------------------
#            REMOVING OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
idOutliersM = data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur)
idOutliersS = data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur)
idOutliersL = data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur)
outliers = data.table(type=character(0),id=character(0))
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by="id",all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by="id",all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by="id",all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(outliers))))
DTM <- DTM[!IDjoueur %in% unlist(outliers[type=="Moteur"]$id)]
DTS <- DTS[!IDjoueur %in% unlist(outliers[type=="Sensoriel"]$id)]
DTL <- DTL[!IDjoueur %in% unlist(outliers[type=="Logique"]$id)]
outliers[type=="Logique"]$id
outliers
#------------------------------------------------------
#            REMOVING OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
outliers = data.table(type=character(0),id=character(0))
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by=c("id"),all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by="id",all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by="id",all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
#------------------------------------------------------
#            REMOVING OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
outliers = data.table(type=character(0),id=character(0))
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by=c("id"),all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by="id",all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by="id",all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
outliers
#------------------------------------------------------
#            REMOVING OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
outliers = data.table(type=character(0),id=character(0))
setkey(outliers,id)
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by=c("id"),all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by="id",all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by="id",all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
outliers
#------------------------------------------------------
#            REMOVING OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
outliers = data.table(type=character(0),id=character(0))
setkey(outliers,id)
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by=c("id","type"),all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by=c("id","type"),all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by=c("id","type"),all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
outliers
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
setkey(outliers,id)
setkey(outliersLoc,id)
outliers = merge(outliers,outliersLoc,all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(outliers))))
DTM <- DTM[!IDjoueur %in% unlist(outliers[type=="Moteur"]$id)]
outliers
#------------------------------------------------------
#            REMOVING OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
outliers = data.table(type=character(0),id=character(0))
setkey(outliers,id)
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by=c("id","type"),all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by=c("id","type"),all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by=c("id","type"),all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
outliers
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(outliers))))
#------------------------------------------------------
#            REMOVING OUTLIERS SETUP
#------------------------------------------------------
DTM <- DTAll[which(DTAll$nom_du_jeu=="Motrice"),]
DTL <- DTAll[which(DTAll$nom_du_jeu=="Logique2"),]
DTS <- DTAll[which(DTAll$nom_du_jeu=="Sensoriel"),]
get.outliers <- function(DTDescMLoc,DTDescSLoc,DTDescLLoc){
outliersM <- boxplot.stats(DTDescMLoc$var)$out
outliersS <- boxplot.stats(DTDescSLoc$var)$out
outliersL <- boxplot.stats(DTDescLLoc$var)$out
outliers = data.table(type=character(0),id=character(0))
setkey(outliers,id)
if(length(outliersM) > 0)
outliers = merge(outliers,data.table(id=DTDescMLoc[var %in% outliersM]$IDjoueur,type="Moteur"),by=c("id","type"),all=TRUE)
if(length(outliersS) > 0)
outliers = merge(outliers,data.table(id=DTDescSLoc[var %in% outliersS]$IDjoueur,type="Sensoriel"),by=c("id","type"),all=TRUE)
if(length(outliersL) > 0)
outliers = merge(outliers,data.table(id=DTDescLLoc[var %in% outliersL]$IDjoueur,type="Logique"),by=c("id","type"),all=TRUE)
return(outliers)
}
plot.outliers <- function(DT,title){
p <- ggplot(DT,
aes(type,var)) +
xlab("Difficulty Type") +
ylab(title)
p <- p + geom_boxplot() + geom_point(shape=1)
print(p)
}
# Bet standard dev
DTDescM = DTM[,.(type="Moteur",var=sd(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sd(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sd(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Standard Dev");
outliers = get.outliers(DTDescM,DTDescS,DTDescL)
print(paste("Outliers :",toString(outliers$id)))
# Bet mean dev
DTDescM = DTM[,.(type="Moteur",var=mean(miseNorm)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=mean(miseNorm)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=mean(miseNorm)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Bet Mean");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty : win sum
DTDescM = DTM[,.(type="Moteur",var=sum(gagnant)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=sum(gagnant)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=sum(gagnant)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win Sum");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# Difficulty and strategy = saved sheeps
DTDescM = DTM[,.(type="Moteur",var=max(moutons_sauves)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(moutons_sauves)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(moutons_sauves)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Saved sheeps");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(outliers))))
outliers
print(paste("Total number of outliers: ",toString(nrow(outliers[unique(id)]))))
print(paste("Total number of outliers: ",toString(nrow(outliers[unique(id)]))))
outliers[unique(id)]
print(paste("Total number of outliers: ",toString(nrow(unique(outliers,by="id")))))
DTM <- DTM[!IDjoueur %in% unlist(outliers[type=="Moteur"]$id)]
DTS <- DTS[!IDjoueur %in% unlist(outliers[type=="Sensoriel"]$id)]
DTL <- DTL[!IDjoueur %in% unlist(outliers[type=="Logique"]$id)]
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(unique(outliers,by="id")))))
print(paste("Total number of outliers motor task: ",toString(nrow(unique(outliers[type="Moteur"],by="id")))))
print(paste("Total number of outliers sensitive task: ",toString(nrow(unique(outliers[type="Logique"],by="id")))))
print(paste("Total number of outliers logical task: ",toString(nrow(unique(outliers[type="Sensoriel"],by="id")))))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(unique(outliers,by="id")))))
print(paste("Total number of outliers motor task: ",toString(nrow(unique(outliers[type=="Moteur"],by="id")))))
print(paste("Total number of outliers sensitive task: ",toString(nrow(unique(outliers[type=="Logique"],by="id")))))
print(paste("Total number of outliers logical task: ",toString(nrow(unique(outliers[type=="Sensoriel"],by="id")))))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(unique(outliers,by="id")))))
print(paste("Total number of outliers motor task: ",toString(nrow(unique(outliers[type=="Moteur"],by="id")))))
print(paste("Total number of outliers perceptive task: ",toString(nrow(unique(outliers[type=="Logique"],by="id")))))
print(paste("Total number of outliers logical task: ",toString(nrow(unique(outliers[type=="Sensoriel"],by="id")))))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(unique(outliers,by="id")))))
print(paste("Total number of outliers motor task: ",toString(nrow(unique(outliers[type=="Moteur"],by="id")))))
print(paste("Total number of outliers perceptive task: ",toString(nrow(unique(outliers[type=="Logique"],by="id")))))
print(paste("Total number of outliers logical task: ",toString(nrow(unique(outliers[type=="Sensoriel"],by="id")))))
# DDA Exploit : Win/Fail delta sum max
DTDescM = DTM[,.(type="Moteur",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescS = DTS[,.(type="Sensoriel",var=max(cumulDeltaMise)),by=IDjoueur]
DTDescL = DTL[,.(type="Logique",var=max(cumulDeltaMise)),by=IDjoueur]
plot.outliers(rbind(DTDescM,rbind(DTDescL,DTDescS)), "Win/Fail delta sum max");
outliersLoc = get.outliers(DTDescM,DTDescS,DTDescL)
outliers = merge(outliers,outliersLoc,by=c("id","type"),all=TRUE)
print(paste("Outliers :",toString(outliersLoc$id)))
print(paste("Total number of outliers: ",toString(nrow(unique(outliers,by="id")))))
print(paste("Total number of outliers motor task: ",toString(nrow(unique(outliers[type=="Moteur"],by="id")))))
print(paste("Total number of outliers perceptive task: ",toString(nrow(unique(outliers[type=="Logique"],by="id")))))
print(paste("Total number of outliers logical task: ",toString(nrow(unique(outliers[type=="Sensoriel"],by="id")))))
